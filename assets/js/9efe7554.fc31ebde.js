"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[8506],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=i.createContext({}),m=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return i.createElement(o.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=m(n),c=r,d=p["".concat(o,".").concat(c)]||p[c]||f[c]||a;return n?i.createElement(d,l(l({ref:t},u),{},{components:n})):i.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var m=2;m<a;m++)l[m]=n[m];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9291:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var i=n(7462),r=(n(7294),n(3905));const a={},l="Traits and Lifetime in Rust",s={unversionedId:"rust/07lifetime_traits",id:"rust/07lifetime_traits",title:"Traits and Lifetime in Rust",description:"Traits in Rust",source:"@site/docs/rust/07lifetime_traits.md",sourceDirName:"rust",slug:"/rust/07lifetime_traits",permalink:"/md/rust/07lifetime_traits",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/rust/07lifetime_traits.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Error Handling in Rust",permalink:"/md/rust/06errors"},next:{title:"Testing in Rust",permalink:"/md/rust/08testing"}},o={},m=[{value:"Traits in Rust",id:"traits-in-rust",level:2},{value:"default implementation for Traits",id:"default-implementation-for-traits",level:3},{value:"Traits in Parameters",id:"traits-in-parameters",level:3},{value:"conditionally implement Methods:",id:"conditionally-implement-methods",level:3},{value:"Lifetime syntax",id:"lifetime-syntax",level:2},{value:"References with Lifetimes (functions)",id:"references-with-lifetimes-functions",level:2},{value:"References with Lifetimes (structs)",id:"references-with-lifetimes-structs",level:2},{value:"References with Lifetime (struct-methods)",id:"references-with-lifetime-struct-methods",level:3},{value:"static lifetime",id:"static-lifetime",level:2}],u={toc:m};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"traits-and-lifetime-in-rust"},"Traits and Lifetime in Rust"),(0,r.kt)("h2",{id:"traits-in-rust"},"Traits in Rust"),(0,r.kt)("p",null,"Fills a similar purpose to interfaces or abstract classes in other languages. The compiler will enforce that any type implementing a Trait must implement all it's methods."),(0,r.kt)("p",null,"Some really common Rust traits include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Clone")," the ",(0,r.kt)("inlineCode",{parentName:"li"},"clone()")," method"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Display")," to allow formatted display/println via ",(0,r.kt)("inlineCode",{parentName:"li"},"{}")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Debug")," to allow formatted display/println via ",(0,r.kt)("inlineCode",{parentName:"li"},"{:?} and {:#?}"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// the trait definition\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n// a struct\npub struct NewsFeed {\n    pub headline: String,\n    pub author: String,\n    pub content: String,\n}\n// above struct implements the Summary trait\nimpl Summary for NewsFeed {\n    fn summarize(&self) -> String{\n        format!("{} \\n {}, written by {}", self.headline, self.content, self.author)\n    }\n}\n\nfn main(){\n    let news = NewsFeed{\n        headline: String::from("A Story"),\n        author: String::from("by Me"),\n        content: String::from("Some lorem Ipsum never fails to impress..."),\n    };\n    println!("{}", news.summarize())\n}\n')),(0,r.kt)("h3",{id:"default-implementation-for-traits"},"default implementation for Traits"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub trait Summary {\n    fn summarize(&self) -> String{\n        String::from("This is a default value")\n    }\n}\n')),(0,r.kt)("h3",{id:"traits-in-parameters"},"Traits in Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// syntax with impl\npub fn some_func_printer(input: &impl Summary) {\n    println!("{}", input.summarize());\n}\n// trait bound syntax forcing both inputs to the the same type\npub fn some_func_printer<T: Summary>(input1: &T, input2: &T) {\n    println!("{} and {}", input1.summarize(), input2.summarize());\n}\n\n// forcing more than one traits at once:\npub fn func(input: &(impl Summary + Display)){}\npub fn func<T: Summary + Display>(input: &T){}\n\n// alternate traits syntax with where:\nfn func<T:Display + Clone, U: clone+ + Debug>(in1: &T, in2: &U) {}\nfn func<T, U>(in1: &T, in2: &U)\nwhere\n    T: Display + Clone,\n    U: Clone + Debug,\n{}\n\n// returning Types that implement Traits\nfn returns_summ() -> impl Summary{\n    NewsFeed{\n        headline: String::from("A Story"),\n        author: String::from("by Me"),\n        content: String::from("Some lorem Ipsum never fails to impress..."),\n    }\n}\n')),(0,r.kt)("h3",{id:"conditionally-implement-methods"},"conditionally implement Methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::fmt::Display;\n\nstruct Pair<T> {\n    x: T,\n    y: T,\n}\n\nimpl<T> Pair<T> {\n    fn new(x: T, y: T) -> Self {\n        Self { x, y }\n    }\n}\n\nimpl<T: Display + PartialOrd> Pair<T> {\n    fn cmp_display(&self) {\n        if self.x >= self.y {\n            println!("The largest member is x = {}", self.x);\n        } else {\n            println!("The largest member is y = {}", self.y);\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"lifetime-syntax"},"Lifetime syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"&i32        // a reference\n&'a i32     // a reference with an explicit lifetime\n&'a mut i32 // a mutable reference with an explicit lifetime\n")),(0,r.kt)("h2",{id:"references-with-lifetimes-functions"},"References with Lifetimes (functions)"),(0,r.kt)("p",null,"Lifetimes ensure that a reference is valid as long as we need it. Most of the time lifetimes are implicid and inferred, compare Borrowing Rules."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Lifetime annotations don\u2019t change how long any of the references live. Rather, they describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes."),(0,r.kt)("li",{parentName:"ul"},"The following will ",(0,r.kt)("strong",{parentName:"li"},"NOT COMPILE")," without the lifetime annotation ",(0,r.kt)("inlineCode",{parentName:"li"},"'a")," added in. (we are basically asserting that s1 s2 and the return value all have the same lifetime.)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let str1 = String::from("1234");\n    let str2 = "abcde";\n\n    let result = longest(str1.as_str(), str2);\n    println!("The longest string is {}", result);\n}\n\n// fn longest(s1: &str,s2: &str) -> &str {      // would not compile\nfn longest<\'a>(s1: &\'a str, s2: &\'a str) -> &\'a str {\n    if s1.len() > s2.len(){\n        s1\n    } else {\n        s2\n    }\n}\n')),(0,r.kt)("p",null,"We just defined that the returned stringslice lives as long as the minimum between s1 and s2 lifetime."),(0,r.kt)("h2",{id:"references-with-lifetimes-structs"},"References with Lifetimes (structs)"),(0,r.kt)("p",null,"As long as a struct only holds owned types there is no need for lifetime annotations. But once we define a struct to hold references we need to add those:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'struct Excerpt<\'a> {\n    part: &\'a str,\n}\n\nfn main() {\n    let novel = String::from("Some Lorem Ipsum. blah blah...");\n    let first_sentence = novel.split(\'.\').next().expect("Failed no . found");\n    let ex = Excerpt {\n        part: first_sentence\n    };\n    println!("{:?}", ex.part)\n}\n')),(0,r.kt)("h3",{id:"references-with-lifetime-struct-methods"},"References with Lifetime (struct-methods)"),(0,r.kt)("p",null,"Lifetime names for struct fields always need to be declared after the ",(0,r.kt)("inlineCode",{parentName:"p"},"impl")," keyword:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl <'a> excerpt <'a> {\n    fn level(&self) -> i32{\n        3\n    }\n}\n")),(0,r.kt)("h2",{id:"static-lifetime"},"static lifetime"),(0,r.kt)("p",null,"All string literals have the ",(0,r.kt)("inlineCode",{parentName:"p"},"'static"),"lifetime. The text is stored directly in the binary which is always available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let s: &\'static str = "I have a static lifetime.";\n')))}p.isMDXComponent=!0}}]);