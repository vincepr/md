"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[9423],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,h=p["".concat(o,".").concat(m)]||p[m]||d[m]||i;return t?a.createElement(h,s(s({ref:n},c),{},{components:t})):a.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=m;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var u=2;u<i;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const i={},s="PHP",l={unversionedId:"fiae/Programmierung/Grundlagen/php",id:"fiae/Programmierung/Grundlagen/php",title:"PHP",description:"Notizen zu PHP. Sehr",source:"@site/docs/fiae/Programmierung/Grundlagen/php.md",sourceDirName:"fiae/Programmierung/Grundlagen",slug:"/fiae/Programmierung/Grundlagen/php",permalink:"/md/fiae/Programmierung/Grundlagen/php",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/fiae/Programmierung/Grundlagen/php.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"UML - unified modeling language",permalink:"/md/fiae/Programmierung/Grundlagen/UML"},next:{title:"PHP - LAGER-Aufgabe",permalink:"/md/fiae/Programmierung/Grundlagen/phpLager"}},o={},u=[{value:"implementing with html, css",id:"implementing-with-html-css",level:2},{value:"Code snippets",id:"code-snippets",level:2},{value:"Basics",id:"basics",level:3},{value:"Classes",id:"classes",level:3},{value:"Kunde - Objekt",id:"kunde---objekt",level:3},{value:"pseudo Main()",id:"pseudo-main",level:3},{value:"Rechnungs Beispiel",id:"rechnungs-beispiel",level:3},{value:"Static",id:"static",level:3},{value:"Konstanten",id:"konstanten",level:3},{value:"Singleton",id:"singleton",level:3},{value:"Vererbung",id:"vererbung",level:2},{value:"protected",id:"protected",level:3},{value:"Bsp extends",id:"bsp-extends",level:3}],c={toc:u};function p(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"php"},"PHP"),(0,r.kt)("p",null,"Notizen zu PHP. Sehr "),(0,r.kt)("h2",{id:"implementing-with-html-css"},"implementing with html, css"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n    /* Styles Go Here, or import css file normally*/\n    </style>\n  </head>\n  <body>\n    <h4>Some Table grabbing data from a SQL db</h4>\n    <table>\n        <tr>\n            <td><?php\n                while($row = mysql_fetch_row($result)){\n                    echo 'Data...'; ?></td>\n                }\n        </tr>\n    </table>\n  </body>\n</html>\n")),(0,r.kt)("h2",{id:"code-snippets"},"Code snippets"),(0,r.kt)("h3",{id:"basics"},"Basics"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Variables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'// Variablen\n$v1 = "Welcome";\n$v2 = \'Smith\';\n$v3 = 012;\necho $v1." Mr $v2 your id is: ".$v3."\\n"\n// careful with booleans:\necho true;      // returns 1\necho false;     // returns NOTHING!\n// number systems:\n$num = 0123;  // is considered an octal number (that equals 83 decimal)\n$num = 0x123; // is considered a hexadecimal number (that equals 291 decimal)\n$num = 0b111; // is considered a binary number (that equals 7 decimal)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"note take care of leading zeros before converting or some octal-number shenanigans will happen!"),(0,r.kt)("li",{parentName:"ul"},'careful with using booleans in error msg etc, since false -> "" without casting to string first')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function isMonth($inMonths){\n        $months = ["Januar", "Februar", "M\xe4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"];\n        \n        $i = 0;\n        while($i < count($months) ){\n            if ($inMonths === $months[$i]) - "true";\n            $i++;\n        }\n        \n        return "false";\n    }\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function summeGeraden(){\n        [$sumEven, $sumOdd] = [0,0];\n        for ($i=0; $i<10; $i++){\n            $rng = rand(2,49);\n            if ($rng % 2) $sumOdd += $rng;\n            else $sumEven += $rng;\n        }\n        echo "summe gerade: ".$sumEven." summe ungerade: ".$sumOdd;\n    }\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Arrays")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'// like in js\n$prices = [["Cola", 1000],["Wasser",450],["Bier",800]];\n$samePricesArray [] = ["Cola", 1000]\n$samePricesArray [] = ["Wasser",450]\n$samePricesArray [] = ["Bier",800]\n\n// but we can also use them like a  Map/Dictonary:\n$users[\'vorname\'] = "Hans";\n$users[\'nachname\'] = "Wurst";\n$users[\'adresse\'] = "Stuttgarterweg 15";\n$users[\'nachname\'] = "Herbinger";\n$adr[0][\'vorname\'] = "Dieter";\n$adr[0][\'nachname\'] = "Dietberg";\n$adr[1][\'vorname\'] = "Jorg";\n$adr[1][\'nachname\'] = "Joergenson";\n\nforeach($adr as $row){\n    var_dump($row)\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sorting Arrays:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"//simple sorts:\nsort()          //sort ascending\nrsort()         //sort descending\nasort()         //sort ascending but keep original indexes\narsort()        // sort descending but keep original indexes\n\n// Multisort example (ex data from a sql db)\n$data=[];\n$data[] = array('Datum' => 99, 'ort' => \"Amberg\");\n$data[] = array('Datum' => 86, 'Ort' => \"Bielefeld\");\n$data[] = array('Datum' => 75, 'Ort' => \"Cambridge\");\n$data[] = array('Datum' => 68, 'Ort' => \"Duesburg\");\n$data[] = array('Datum' => 56, 'Ort' => \"Enn\");\n$data[] = array('Datum' => 47, 'Ort' => \"Frankfurt\");\n\n$datum  = array_column($data, 'Datum');\n$ort = array_column($data, 'Ort');\n// Sort the data with Datum descending, ort ascending\n// Add $data as the last parameter, to sort by the common key\narray_multisort($datum, SORT_ASC, $data);\n")),(0,r.kt)("h3",{id:"classes"},"Classes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class User{\n    //property declaration\n    public $name = "default name";\n\n    //method declaration\n    public function displayName(){\n        echo $this->name;           //no $\n    }\n}\n\n$instance1 = new User();\n$instance1 ->displayName();\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"calling attribute vs function (with same name)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Foo\n{\n    public $bar = "!property!";\n    \n    public function bar() {\n        return "!method!";\n    }\n}\n\n$obj = new Foo();\necho $obj->bar."<br>". $obj->bar()."<br>";\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"inheritance")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class AdminUser extends User\n{\n    // Redefine the parent method\n    function displayName()\n    {\n        echo "IS Admin: \\n";\n        parent::displayName();\n    }\n}\n\n$extended = new ExtendClass();\n$extended->displayName();\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Base{\n    public function foo(int $a) {\n        echo "Valid\\n";\n    }\n}\n\nclass ExtBase1 extends Base{\n    function foo(int $a = 5)\n    {\n        parent::foo($a);\n    }\n}\n\nclass ExtBase2 extends Base{\n    function foo(int $a, $b = 5)\n    {\n        parent::foo($a);\n    }\n}\n\n$extended1 = new ExtBase1();\n$extended1->foo();              //echo Valid\n$extended2 = new ExtBase2();\n$extended2->foo(1);             //echo Valid\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Constructor example with some data encapsulation:"),(0,r.kt)("li",{parentName:"ul"},"note how here we use the concept of encapsulation here to only allow setting of typ on creation.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Konto {\n    // attributes\n    private float $kontostand;      // holds money in bank\n    private string $typ;     // can only be defined on creation\n\n    //constructor\n    public function __construct(float $kontostand=0, string $typ="normal"){\n        $this -> kontostand = $kontostand;\n        $this -> setKontoTyp($typ);\n    }\n\n    // functions\n    private function setKontoTyp(string $typ){\n        $this -> typ= $typ;\n    }\n    public function getKontoTyp(){\n        return $this -> typ;\n    }\n    public function einzahlen($input){\n        return $this -> kontostand += $input;\n    }\n    public function auszahlen($input){\n        return $this -> kontostand -= $input;\n    }\n}\n\necho "<pre>";\n$defaultKonto = new Konto();\nvar_dump($defaultKonto);\n$paulsKonto = new Konto(1000, "enterprise");\nvar_dump($paulsKonto);\necho $paulsKonto-> einzahlen(999)."\\n";\necho $paulsKonto-> auszahlen(99)."\\n";\n')),(0,r.kt)("h3",{id:"kunde---objekt"},"Kunde - Objekt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Kunde{\n    // --Attribute--\n    private $vorname = "";\n    private $nachname = "";\n    private int $alter = 0;\n    private $geschlecht = "";\n\n    //Konstruktor\n    public function __construct(string $vor, string $nach, int $al, string $gesch){\n        $this -> vorname = $vor;\n        $this -> nachname = $nach;\n        $this -> alter = $al;\n        $this -> geschlecht = $gesch;\n    }\n    \n    // --Methoden--\n    // bei Hochzeit ect kann sich Nachname \xe4ndern\n    public function setNachname(string $neuerName){\n        $this->nachname = $neuerName;\n    }\n    // Jedes Jahr unvermeidbar\n    public function hatteGeburtstag(){\n        $this->alter +=1;\n    }\n\n    // Gibt alle Kundendaten aus \n    public function printInfo(){\n        $isVolljaehrig = false;\n        if ($this->alter >17){\n            $isVolljaehrig = true;\n        }\n        echo "Kunde ".$this->vorname\n            ." ".$this->nachname\n            ." ist ".$this->alter." Jahre alt, "\n            .$this->geschlecht." und "\n            .($isVolljaehrig ? "vollj\xe4hrig" : "minderj\xe4hrig")\n            .". <br>";\n    }\n}\n\n$alleKunden = [];\n$alleKunden[] = new Kunde("Susanne","Schmidt",19,"weiblich");\n$alleKunden[] = new Kunde("Aron","Griebler",17,"m\xe4nnlich");\n$alleKunden[] = new Kunde("Dieter","Griebler",33,"m\xe4nnlich");\n$alleKunden[] = new Kunde("Johanna","F\xfcrst",22,"weiblich");\n\necho "<h4>Urspr\xfcngliche Kunden</h4>";\nforeach ($alleKunden as $kunde){\n    $kunde->printInfo();\n}\n\n$alleKunden[1]->hatteGeburtstag();\n\necho "<h4>Kunden nach Geburtstag</h4>";\nforeach ($alleKunden as $kunde){\n    $kunde->printInfo();\n}\n')),(0,r.kt)("h3",{id:"pseudo-main"},"pseudo Main()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'require_once("Kunde.class.php");\nclass Programm{\n    public function __construct(){\n        $this -> main();\n    }\n    public function __destruct(){\n        echo "<br> Programm ist beendet <br>";\n    }\n\n    private function main(){\n        // run our Programm here\n    }\n}\nnew Programm();\n')),(0,r.kt)("h3",{id:"rechnungs-beispiel"},"Rechnungs Beispiel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Rechnung{\n    private $einzelpreis;\n    private $menge;\n\n    public function __construct(float $einzelpreis=0, int $menge=1){\n        $this->einzelpreis = round($einzelpreis,2);\n        $this->menge = $menge;\n    }\n\n    public function __destruct(){\n        $this->ausgabe();\n    }\n    \n    private function whatRabatt($gp){\n        $rabattProzent  = 0;\n        if      ($gp>200) $rabattProzent = 5;\n        else if ($gp>100) $rabattProzent = 4;\n        return $rabattProzent;\n    }\n\n    public function ausgabe(){\n        $gp = round($this->einzelpreis*$this->menge,2);\n        $rabattProzent = $this->whatRabatt($gp);\n        $rabatt = round($gp / 100 * $rabattProzent,2);\n        $gpBrutto = round(($gp - $rabatt) * 1.19,2);\n\n        echo "<h4>Rechnung:</h4><table>";\n        echo "<tr> <th>Einzelpreis: </th><th>".$this->einzelpreis."</th></tr>";\n        echo "<tr> <th>Menge: </th><th>".$this->menge."</th></tr>";\n        echo "<tr> <th>Gesamtpreis: </th><th>".$gp-$rabatt."</th></tr>";\n        echo "<tr> <th>Rabatt von $rabattProzent% : </th><th>".$rabatt."</th></tr>";\n        echo "<tr> <th>Gesamtpreis-Netto: </th><th>".$gp-$rabatt."</th></tr>";\n        echo "<tr> <th>Gesamtpreis-Brutto: </th><th>".$gpBrutto."</th></tr>";\n        echo "</table>";\n    }\n}\n\nfor ($i=0;$i<50;$i++){\n    new Rechnung(rand(10,300), rand(1,20));\n}\n')),(0,r.kt)("h3",{id:"static"},"Static"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"erzeugt mit dem Keywort ",(0,r.kt)("inlineCode",{parentName:"li"},"public static")),(0,r.kt)("li",{parentName:"ul"},"Angesprochen mit dem G\xfcltigkeitsbereichsoperator ",(0,r.kt)("inlineCode",{parentName:"li"},"::"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Firma {\n    public static $name = "C & A";\n    private static $locations = ["Bonn", "Leipzig", "M\xfcnchen"];\n\n    public static function locationList(){\n        foreach( self::$locations as $location){\n            echo "<li>$location </li>";\n        }\n    }\n}\n\n// zugriff auf statische Elemente ohne Instanz zu erzeugen:\necho Firma  :: $name;\nFirma::locationList();\n\n//auf statische Elemente kann man in PHP auch \xfcber eine Instanz der Klasse zugreifen:\n$firma1 = new Firma();\necho $firma1::$name;\n$firma1::locationList();\n')),(0,r.kt)("h3",{id:"konstanten"},"Konstanten"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Kunde{\n    // Konstanten:\n    public const type = "Human";\n    //\n}\n\necho Kunde::type;\n')),(0,r.kt)("h3",{id:"singleton"},"Singleton"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class SharedDataStorage{\n    private static $ich = null;\n    private $sharedDataStorage;\n    private final function __construct(){}\n    public static function getData() : SharedDataStorage{\n        if (!isset(self::$ich))\n            self::$ich = new SharedDataStorage();\n        return self::$ich;\n    }\n    public function setData($value){\n        $this->sharedDataStorage = $value;\n    }\n}\n\n$data1 = SharedDataStorage::getData();      // erste instanz des singleton wird erzeugt\n$data1 -> setData("Erster Wert");       // data wird: "Erster Wert"\n$name2 = SharedDataStorage::getData();      // name2 wird: "Erster Wert"\n$name2 -> setData(123);                 // data1 und name2 werden beide: 123\n$data3 = SharedDataStorage::getData();      // data3 wird 123\n$data3 -> setData("alle variablen");    // data1, name2 und data3 werden: "alle variablen"\n')),(0,r.kt)("h2",{id:"vererbung"},"Vererbung"),(0,r.kt)("h3",{id:"protected"},"protected"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Protected beschr\xe4nkt den Zugang auf Elternklassen und abgeleitete Klassen (sowie die Klasse, die das Element definiert). Private grenzt die Sichtbarkeit einzig auf die Klasse ein, die das Element definiert.")),(0,r.kt)("h3",{id:"bsp-extends"},"Bsp extends"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Bsp uml",src:t(5182).Z,width:"1858",height:"970"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Person{\n    protected $nachname = "";\n    public function __construct(string $name){\n        $this->nachname = $name;\n    }\n    public function echoName(){\n        echo "Nachname ist: ".$this->nachname."<br>";\n    }\n}\n\nclass Kunde extends Person{\n    protected $kundenNr;\n    public function __construct(string $name, int  $kundenNr){\n        parent :: __construct($name);\n        $this->kundenNr = $kundenNr;\n    }\n}\n\nclass Mitarbeiter extends Person{\n    public $steuerKlasse = "default";\n    public function __construct(string $name, string $steuerKlasse){\n        $this->steuerKlasse = $steuerKlasse;\n        parent :: __construct($name);\n    }\n    public function changeKlasse(string $neueKlasse){\n        $this->steuerKlasse = $neueKlasse;\n    }\n}\n\nclass Lieferant extends Person{\n    private $lieferantId;\n    public function __construct(string $name, int $lieferantId ){\n        parent :: __construct($name);\n        $this->lieferantId = $lieferantId;\n    }\n    public function echoName(){\n        echo "Lieferanten-";\n        parent::echoName();\n    }\n}\n\n$k1 = new Lieferant("Logistig gmbH", 212);\n$k1-> echoName();\n// -> Lieferanten-Nachname ist: Logistig gmbH\n\n$alleMitarbeiter = [];\n$alleMitarbeiter[] = new Mitarbeiter("Kunigunde Sch\xf6ffer", "Klasse 1");\n$alleMitarbeiter[] = new Mitarbeiter("Bert Grahm", "Klasse 0");\n$alleMitarbeiter[1]->changeKlasse("Klasse 4");\n\nforeach ($alleMitarbeiter as $mitarbeiter){\n    echo $mitarbeiter->steuerKlasse." - ";\n    $mitarbeiter->echoName();\n}\n// -> Klasse 1 - Nachname ist: Kunigunde Sch\xf6ffer\n// -> Klasse 4 - Nachname ist: Bert Grahm\n\n\n\necho "<h4> mixed data: </h4>";\n$allePersonen = $alleMitarbeiter;\n$allePersonen[] = new Kunde("Knut Stephen", 12312);\n$allePersonen[] = $k1;\n\nforeach($allePersonen as $person){\n    if($person instanceof Mitarbeiter) echo "MITARBEITER: ";\n    $person -> echoName();\n}\n\n// -> MITARBEITER: Nachname ist: Kunigunde Sch\xf6ffer\n// -> MITARBEITER: Nachname ist: Bert Grahm\n// -> Nachname ist: Knut Stephen\n// -> Lieferanten-Nachname ist: Logistig gmbH\n')))}p.isMDXComponent=!0},5182:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/klassenDiagrammBsp-ee08a4404a5372742007acdaa5f70916.svg"}}]);