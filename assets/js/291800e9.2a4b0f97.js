"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[7206],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>d});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=t.createContext({}),c=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},u=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},b=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(a),b=r,d=p["".concat(i,".").concat(b)]||p[b]||m[b]||s;return a?t.createElement(d,o(o({ref:n},u),{},{components:a})):t.createElement(d,o({ref:n},u))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=b;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=a[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}b.displayName="MDXCreateElement"},3487:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=a(7462),r=(a(7294),a(3905));const s={},o="Js Concepts",l={unversionedId:"webdev/js_concepts",id:"webdev/js_concepts",title:"Js Concepts",description:"map, filter, find",source:"@site/docs/webdev/js_concepts.md",sourceDirName:"webdev",slug:"/webdev/js_concepts",permalink:"/md/webdev/js_concepts",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/webdev/js_concepts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Js async",permalink:"/md/webdev/js_async"},next:{title:"PHP - notes",permalink:"/md/webdev/php"}},i={},c=[{value:"map, filter, find",id:"map-filter-find",level:2},{value:"Destructuring Arrays and Objects",id:"destructuring-arrays-and-objects",level:2},{value:"Rest and Spread Operators (...)",id:"rest-and-spread-operators-",level:2},{value:"Set() - unique value",id:"set---unique-value",level:2},{value:"dynamic object keys",id:"dynamic-object-keys",level:2},{value:"reduce()",id:"reduce",level:2},{value:"optional chaining",id:"optional-chaining",level:2}],u={toc:c};function p(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"js-concepts"},"Js Concepts"),(0,r.kt)("h2",{id:"map-filter-find"},"map, filter, find"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"especially useful to quickly render data with react/jsx")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let users = [\n  { firstName: "James", lastName: "Doe", age: 23, hobby: "Fishing" },\n  { firstName: "Paula", lastName: "Diaz", age: 26, hobby: "Reading" },\n  { firstName: "Jake", lastName: "Black", age: 40, hobby: "Music" },\n]\n\n// map() to create a new array with the same ammount of entires\nlet usersInnerHTML = users.map(user => {\n    return `<h3 class="name">${user.firstName+" "+user.LastName}<h3/>`\n})\n\n// filter() to get an array with equal or less entries\nlet youngUsers = users.filter(person => person.age <30)\n\n// find() to get the FIRST entry that matches the description\nlet search = users.find(person => person.FirstName === "James")\n')),(0,r.kt)("h2",{id:"destructuring-arrays-and-objects"},"Destructuring Arrays and Objects"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"faster and simpler access to unpacking variables from arrays and objects")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let flavors = ["coffee", "vanilla", "spicy", "exotic", "tropical",]\n\n// instead of:\nlet flavor_1 = flavor[1]\nlet flavor_2 = flavor[2]\n// we can simply:\nlet [flavor1, flavor2, flavor3] = flavors \n// to skipp data:\nlet [flav1,,,,flav5] = flavors\nlet [,fla2,,fla4,] = flavors\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const user = {\n  firstName: "James",\n  lastName: "Cameron",\n  age: 36,\n  hobbies: {\n    hobby1: "money",\n    hobby2: "cinema",\n  },\n}\n\n// instead of:\nconst FirstName = user.firstName\nconst Age = user.age\nconst Hobby1 = user.hobbies.hobby1\nconsole.log(FirstName, Age, Hobby1)\n// we can simply:\nconst {firstName, age, hobbies:{hobby1}} = user\nconsole.log(firstName, age, hobby1)\n// we can also do this in a function (example passing down props in jsx)\nfunction whoIsUser({firstName, age, hobbies:{hobby1}}){\n    console.log(firstName, age, hobby1)\n}\nwhoIsUser(user)\n')),(0,r.kt)("h2",{id:"rest-and-spread-operators-"},"Rest and Spread Operators (...)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// with arrays\nlet flavors = ["coffee", "vanilla", "spicy", "exotic", "tropical",]\n\nlet [firstFlavor, secondFlavor, ...rest] = flavors\n\nconsole.log(firstFlavor, secondFlavor, rest)\n    // "coffee" "vanilla" ["spicy", "exotic", "tropical",]\n\n// with objects\nconst user = {\n  firstName: "James",\n  lastName: "Cameron",\n  age: 36,\n  hobbies: {\n    hobby1: "money",\n    hobby2: "cinema",\n  },\n}\n\nconst {firstName, lastName, ...rest} = user\nconst fullname = firstName+" "+lastName\nconsole.log(fullname, rest)\n/*\n    "JamesCameron", {\n        age: 36,\n        hobbies: {\n            hobby1: "money",\n            hobby2: "cinema"\n        }\n    }\n*/\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let pets= ["cat", "dog" , "rabbits"]\nlet carnivorous = ["cat", "lion", "wolf", "leopard", "tiger"]\n\nlet wrongAnimals = [pets, carnivorous]\nconsole.log(wrongAnimals) \n    //[["cat", "dog" , "rabbits"], ["cat", "lion", "wolf", "leopard", "tiger"]]\n\nlet animals = [...pets, ...carnivorous]\nconsole.log(animals)\n    //["cat", "dog" , "rabbits", "cat", "lion", "wolf", "leopard", "tiger"]\n\nlet name = {firstName:"John", lastName:"Doe"}\nlet hobbies = {firstName:"NEVER USED", hobby1: "singing", hobby2: "dancing" }\nlet myInfo = {...name, ...hobbies}\n\nconsole.log(myInfo)\n    //{firstName:"John", lastName:"Doe", hobby1: "singing", hobby2: "dancing"}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"careful of getting duplicates while spreading arrays like this(cat)"),(0,r.kt)("li",{parentName:"ul"},'with objects the firstName:"NEVER USED" will never be reached like this, since firstName:"John" is found first and every subsequent firstName is discarded.')),(0,r.kt)("h2",{id:"set---unique-value"},"Set() - unique value"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"immagine we need all unique categories of the below data of animals")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let animals = [\n  {\n    name:'Lion',\n    category: 'carnivore',\n  },\n  {\n    name:'dog',\n    category:'pet',\n  },\n  {\n    name:'cat',\n    category:'pet',\n  },\n  {\n    name:'wolf',\n    category:'carnivore',\n  },\n]\n\n// map will create duplicates\nfunction getCategories(input){\n    return input.map(animal => animal.category)\n}\nconsole.log(getCategories(animals))\n    //[\"carnivore\", \"pet\", \"pet\", \"carnivore\"]\n// a Set will only allow unique properties, we can use this to create a Set then use ...Spread syntax to get an array again\n\nconsole.log( [... new Set(getCategories(animals)) ] )\n    //[\"carnivore\", \"pet\"]\n")),(0,r.kt)("h2",{id:"dynamic-object-keys"},"dynamic object keys"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'in case of "-" in the key obj.user-data will fail. -> use ',"[",'"user-data"',"]"),(0,r.kt)("li",{parentName:"ul"},"this also allows conditional object keys or the ? operator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function createData(name, number, gavebirth){\n    let data = {\n        "name" : name,\n        [gavebirth && "birthed-babies"]: number,\n    }\n    return data\n}\nconsole.log(createData("Paul", 2 ,false))\n    //{ name: "Paul", false: 2}\n\nconsole.log(createData("PaulsWife", 2, true))\n    //{ name: "PaulsWife", birthed-babies: 2}\n\n')),(0,r.kt)("h2",{id:"reduce"},"reduce()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"reduce(function (accumulator, currentValue, currentIndex, array)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let staff = [\n  { name: "Adam", age: 22, salary: 90 },\n  { name: "Eve", age: 42, salary: 120 },\n  { name: "Bob", age: 33, salary: 400 },\n  { name: "Dillan", age: 44, salary: 600 },\n  { name: "James", age: 55, salary: 1000 },\n  { name: "Ken", age: 66, salary: 222 },\n]\n\n// total salary:\nconst initialValue = 0\nconst totalSalary = staff.reduce((total, currentPerson)=>{\n    return total+currentPerson.salary\n},initialValue)\nconsole.log(totalSalary)    \n    //2432\n\n// + Rentenversicherung von 10%\nconst modifiedSalary = staff.reduce(\n    (kosten, person) =>{\n        let kassenKosten = person.salary*0.1\n        kosten.allgemein += person.salary\n        kosten.kasse += kassenKosten\n        kosten.ges += person.salary + kassenKosten\n        return kosten\n    }, {allgemein:0, kasse:0, ges:0}\n)\nconsole.log(modifiedSalary)\n    //Object { allgemein: 2432, kasse: 243.2, ges: 2675.2 }\n')),(0,r.kt)("h2",{id:"optional-chaining"},"optional chaining"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"save way to access nested object properties, rather than having multiple null checks")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let users = [\n{\n    name: "Sam",\n    age: 64,\n    hobby: "cooking",\n    hobbies: {\n      hobb1: "cooking",\n      hobby2: "sleeping"\n    }\n  },\n  { name: "Bruno", age: 56 },\n  { name: "Dave", age: 56, hobby: "Football" },\n  {\n    name: "Jacob",\n    age: 65,\n    hobbies: {\n      hobb1: "driving",\n      hobby2: "sleeping"\n    }\n  }\n]\n\n// naive approach throws an error:\ntry{\n    users.forEach((user) =>console.log(user.hobbies.hobby2))\n} catch (err) {\n    console.error(err)\n}\n    //"sleeping"\n    //TypeError: Cannot read properties of undefined (reading \'hobby2\')\n\n//null checking:\nusers.forEach(user => console.log(user.hobbies && user.hobbies.hobby2))\n    //"sleeping"\n    // undefined\n    // undefined\n    // "sleeping"\n\n// optional chaning\nusers.forEach(user => console.log(user ?.hobbies ?.hobby2))\n    //"sleeping"\n    // undefined\n    // undefined\n    // "sleeping"\n')))}p.isMDXComponent=!0}}]);