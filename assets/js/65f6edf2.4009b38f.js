"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[8131],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return t?o.createElement(k,l(l({ref:n},p),{},{components:t})):o.createElement(k,l({ref:n},p))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=t(7462),r=(t(7294),t(3905));const a={},l="CancellationToken in C",i={unversionedId:"csharp/examples/CancellationToken",id:"csharp/examples/CancellationToken",title:"CancellationToken in C",description:"To stop wasting ressources on for example disconnected Http-Requests, Websockets etc. a often used strategy is to use CancellationTokens. (like golang's ctx Context)",source:"@site/docs/csharp/examples/CancellationToken.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/CancellationToken",permalink:"/md/csharp/examples/CancellationToken",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/CancellationToken.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Wilkommen",permalink:"/md/"},next:{title:"IEnumerator - IEnumerable",permalink:"/md/csharp/examples/IEnumerator"}},s={},c=[{value:"Cancellation Token in the WebApi",id:"cancellation-token-in-the-webapi",level:2},{value:"Cancellation Token in a Console App",id:"cancellation-token-in-a-console-app",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cancellationtoken-in-c"},"CancellationToken in C#"),(0,r.kt)("p",null,"To stop wasting ressources on for example disconnected Http-Requests, Websockets etc. a often used strategy is to use CancellationTokens. (like golang's ctx Context)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"this can stop the running process (ex a Sql query taking time with more following after) and free those ressources.")),(0,r.kt)("p",null,"The token itself has ",(0,r.kt)("strong",{parentName:"p"},"no")," ",(0,r.kt)("inlineCode",{parentName:"p"},"token.Cancel()")," functionality. "),(0,r.kt)("p",null,"But instead the Consumer (ex the sql-library or entity-framework) has to check that token and then itself Stop the process/cleanup etc."),(0,r.kt)("h2",{id:"cancellation-token-in-the-webapi"},"Cancellation Token in the WebApi"),(0,r.kt)("p",null,"Cancellation Tokens are well supported by most frameworks, the web-controllers etc."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Controller without Cancellation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class Examplecontroller : ControllerBase{\n    private readonly IExampleRepository _exampleRepository;\n\n    public ExampleController(IExampleRepository exampleRepository){\n        _exampleRepository = exampleRepository;\n    }\n\n    [HttpGet("")]\n    public async Task<IActionResult> SomeUnderPerformingQuery(){\n        var result = await _exampleRepository.GetSomeNumersAsync();\n        return Ok(result);\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Controller passing down a Cancellation Token for the iExampleRepository to use")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class Examplecontroller : ControllerBase{\n    private readonly IExampleRepository _exampleRepository;\n\n    public ExampleController(IExampleRepository exampleRepository){\n        _exampleRepository = exampleRepository;\n    }\n\n    [HttpGet("")]\n    public async Task<IActionResult> SomeUnderPerformingQuery(CancellationToken token){\n        var result = await _exampleRepository.GetSomeNumersAsync(token);\n        return Ok(result);\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Our IExampleRepository (passing down the Cancellation Token)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public interface IExampleRepository{\n    Task<int> GetSomeNumersAsync(CancellationToken token);\n}\n\npublic class ExampleRepository : IExampleRepository\n{\n    private readonly IbBConnectionFactory _dbConnectionFactory;\n    private readonly ILogger<ExampleRepository> _logger;\n\n    public ExampleRepository(IDbConnectionFactory dbFac, ILogger<ExampleRepository> logger){\n        _dbConnectionFactory = dbFac;\n        _logger = logger;\n    }\n\n    public async Task<int> GetSomeNumbersAsync(CancellationToken token){\n        using var con = await _dbConnectionFactory.CreateconnectionAsync();\n        _logger.LogInformation("This is designed to take forever");\n\n        var cmdDef = new CommandDefinition(@"WITH RECURSIVE r(i) AS (VALUES(0) UNION SELECT i FROM r LIMIT 3000 ...)", cancellationToken: token);\n\n        try\n        {\n            var firstResult = await connection.QueryFirstOrDefaultAsync<int>(cmdDef);\n            _logger.LogInformation("First result done");\n\n            // now with the token the second Query here should never run (if we cancel the request in the time the first takes)\n            var secondResult = await connection.QueryFirstOrDefaultAsync<int>(cmdDef);\n            _logger.LogInformation("Second result done");\n        }\n        catch(TaskCancelledException err)\n        {\n            ConsoleWriteLine("Operation was cancelled. Freeing resources.");\n        }\n        return firstResult + secondResult;\n    }\n}\n')),(0,r.kt)("p",null,"Implementation differ on how those Cancellations get handled.\n",(0,r.kt)("inlineCode",{parentName:"p"},"TaskCanceledException")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"OperationCanceledException")," Throws are common."),(0,r.kt)("p",null,"In the above example we are wrapping the firstResult and secondResult Query in a try-catch. "),(0,r.kt)("p",null,"Another way would be some Middleware to at one single point of contact handle those and for example log them."),(0,r.kt)("h2",{id:"cancellation-token-in-a-console-app"},"Cancellation Token in a Console App"))}u.isMDXComponent=!0}}]);