"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[1058],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7434:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={},o="Generics in csharp",c={unversionedId:"csharp/examples/Generics",id:"csharp/examples/Generics",title:"Generics in csharp",description:"Types as values.",source:"@site/docs/csharp/examples/Generics.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/Generics",permalink:"/md/csharp/examples/Generics",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/Generics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Feature Flag in Csharp",permalink:"/md/csharp/examples/FeatureFlag"},next:{title:"IEnumerator - IEnumerable",permalink:"/md/csharp/examples/IEnumerator"}},l={},s=[],p={toc:s};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generics-in-csharp"},"Generics in csharp"),(0,a.kt)("p",null,"Types as values."),(0,a.kt)("p",null,"As usual a way to branch over Types themselfes instead of Instances/Variables.\nGets all the benefits of compile time type checking etc..."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"syntax to return a instance of one of the Types used")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public static T Do<T>(T i)\n    where T : class, new() // new() is one way to make this return a class instance\n{\n    Console.WriteLine(i);\n    return Activator.CreateInstance<T>();\n    // the other way to return a new instance without the new() in the where clause is with an Activator\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"some basic example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public static void Main(string[] args) {\n    new Pig().Eat(Scraps, Barn);\n}\n\npublic abstract class Animal<F, L>\n    where F : Food\n    where L : Location\n{\n    public void Eat(F food){\n        Console.WriteLine($\"{this.GetType().Name} is eating {typeof(F)} in the {typeof(F)}\");\n    }\n}\n\n// here we 'decide' what our pigs eat and where they live.\npublic class Pig : Animal<Bread, Barn> {}\n\npublic interface Food {}\npublic interface Location {}\n\npublic class Bread  : Food {}\npublic class Scraps : Food {}\npublic class Barn   : Location {}\npublic class Yard   : Location {}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a bit more convoluted:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public static void Main(string[] args) {\n    new AnimalFeedingcontext<Pig, Bread, Barn>(new Pig())\n        .Arrive()\n        .Feed(new Bread());\n}\n\npublic class AnimalFeedingContext<A, F, L>\n    where A : Animal<F, L>\n    where F : Food\n    where L : Location\n{\n    private Animal<F, L> _animal;\n\n    public AnimalFeedingContext(A animal)\n    {\n        _animal = animal;\n    }\n\n    public AnimalFeedingContext<A, F, L> Arrive()\n    {\n        Console.WriteLine($"{typeof(L).Name}");\n        return this;\n    }\n\n    public void Feed(F food)\n    {\n        _animal.Eat(food);\n    }\n}\n')))}u.isMDXComponent=!0}}]);