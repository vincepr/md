"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[7318],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,o(o({ref:n},l),{},{components:t})):r.createElement(f,o({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8805:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={},o="Basic Stack implementation in C",s={unversionedId:"datastructures/stack",id:"datastructures/stack",title:"Basic Stack implementation in C",description:"Implementation",source:"@site/docs/datastructures/stack.md",sourceDirName:"datastructures",slug:"/datastructures/stack",permalink:"/md/datastructures/stack",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/datastructures/stack.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Queue in C",permalink:"/md/datastructures/queue"},next:{title:"fiae - Mitschriften",permalink:"/md/category/fiae---mitschriften"}},c={},u=[{value:"Implementation",id:"implementation",level:2}],l={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"basic-stack-implementation-in-c"},"Basic Stack implementation in C#"),(0,a.kt)("h2",{id:"implementation"},"Implementation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public static class Example{\n    public static void Run() {\n        Console.WriteLine("--- BasicStack Example: ---");\n\n        var st = new BasicStack<string>(1);\n        st.Push("Hello");\n        st.Push("Wrong, so we remove");\n        st.Pop();\n        st.Push("World");\n        st.Push("Whatsup");\n\n        foreach (var item in st){\n            Console.WriteLine(item.ToString());\n        }\n\n        // what happens if we iterate over empty?\n        var st_empty = new BasicStack<string>(2);\n        foreach (var item in st_empty){\n            Console.WriteLine(item.ToString());\n        }\n\n\n    }\n}\n\npublic sealed class BasicStack<T> : IEnumerable<T>\n{\n    private T[] arrayData;\n    private const int defaultSize = 30;\n    private int index;\n    private int version;    /// this version is needed to make the Enumerator throw if accessed after change\n    public BasicStack(int size = defaultSize) \n    {\n        if (size <= 0) throw new ArgumentOutOfRangeException(nameof(size), "Size must be bigger than 0");\n        this.arrayData = new T[size];\n        this.index = 0;\n        this.version = 0;\n    }\n\n    public T Pop() \n    {\n        if (index == 0) throw new InvalidOperationException("Tried to remove from Empty Stack");\n        index--;\n        version++;\n        return arrayData[index];\n    }\n\n    public void Push(T value) \n    {\n        // Dynamic Array doubles in Size when full (but NEVER Shrinks!):\n        if (index == arrayData.Length) {\n            T[] newArr = new T[2*arrayData.Length];\n            Array.Copy(arrayData, newArr, arrayData.Length);\n            arrayData = newArr;\n        }\n        arrayData[index++] = value;\n        version++;\n    }\n\n    public override string ToString(){\n        return "Stack<"+string.Join(", ", arrayData)+">";\n    }\n\n    // To satisfy IEnumerable we have to provide the following 2 Methods to the iterator:\n    public IEnumerator GetEnumerator()\n    {\n        return new Enumerator(this);\n    }\n\n    IEnumerator<T> IEnumerable<T>.GetEnumerator()\n    {\n        return new Enumerator(this);\n    }\n\n    /// Inner class of basic Stack - describes the Enumerator it creates\n    /// that will savely without throwing iterate over it. Will loop/remove from the top first.\n    /// - will throw if Original BasicStack has changed between creation and accessing it.\n    ///     - this can happen in Reset() and MoveNext()\n    public sealed class Enumerator : IEnumerator<T>\n    {\n        private BasicStack<T> stack;\n        private int index;\n        private int usedVersion;\n        public Enumerator(BasicStack<T> stack){\n            this.stack = stack;\n            this.index = stack.index;\n            this.usedVersion = stack.version;\n        }\n\n        /* The Enumerator implementation */\n\n        public T Current => GetCurrent(index);\n\n\n        object IEnumerator.Current => GetCurrent(index)!;\n\n        public void Dispose()\n        {\n            index = -1; // no freeing or anything needed here tbh\n        }\n\n        /// true if the enumerator was successfully advanced to the next element; \n        /// false if the enumerator has passed the end of the collection.\n        public bool MoveNext()\n        {\n            CheckVersion();\n            index--;\n            if (index < 0 ) return false;   // reached end\n            else return true;\n        }\n\n        public void Reset()\n        {\n            CheckVersion();\n            index = stack.index;\n        }\n\n        /* Helpers */\n\n        private T GetCurrent(int index) \n        {\n            if (index < 0) throw new InvalidOperationException("Enumerator already empty.");\n            return stack.arrayData[index];\n        }\n\n        /// As Enumerator demands -> will throw if original Stack was modified and iterator is out of sync.\n        private void CheckVersion(){\n            if (usedVersion != stack.version) throw new InvalidOperationException("Collection modified since created.");\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);