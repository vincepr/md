"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[4899],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=i,f=d["".concat(s,".").concat(u)]||d[u]||p[u]||o;return t?r.createElement(f,a(a({ref:n},m),{},{components:t})):r.createElement(f,a({ref:n},m))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5510:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const o={},a="editor Settings",l={unversionedId:"settings/editorSettings",id:"settings/editorSettings",title:"editor Settings",description:"Settings for Vscode",source:"@site/docs/settings/editorSettings.md",sourceDirName:"settings",slug:"/settings/editorSettings",permalink:"/md/settings/editorSettings",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/settings/editorSettings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"install codeserver",permalink:"/md/settings/codeserver"},next:{title:"nginx",permalink:"/md/settings/nginx"}},s={},c=[{value:"Settings for Vscode",id:"settings-for-vscode",level:2},{value:"Settings for Rider, Settings for Intellij-products",id:"settings-for-rider-settings-for-intellij-products",level:2}],m={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"editor-settings"},"editor Settings"),(0,i.kt)("h2",{id:"settings-for-vscode"},"Settings for Vscode"),(0,i.kt)("p",null,"openvscode-server location for the global settings: ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.vscode-remote/data/Machine/settings.json")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "thunder-client.defaultUrl": "http://127.0.0.1:5555/",\n    /// base settings\n    "workbench.colorTheme": "Default Dark Modern",\n    // "files.autoSave": "afterDelay",  // enable this if hotreloading is killing performance for remote work\n    "files.simpleDialog.enable": true,\n    // "terminal.integrated.allowChords": false,\n    // "window.commandCenter": false,\n    /// git settings\n    "git.enableSmartCommit": true,\n    "git.autofetch": true,\n    /// vim settings\n    "vim.highlightedyank.enable": true,\n    "vim.highlightedyank.duration": 1000,\n    "vim.sneak": true,\n    "vim.handleKeys": {\n        "<C-x>": false,\n        "<C-v>": false,\n        "<C-a>": false,\n        "<C-f>": false,\n        "<C-e>": false,\n        "<C-y>": false,\n        "<C-z>": false, \n        "<C-b>": false,\n    },\n    "editor.emptySelectionClipboard": false,    // stop copy empty line on ctrl+c exit input mode\n    "vim.insertModeKeyBindings": [\n        {\n            "before": ["<C-c>"],\n            "commands": ["editor.action.clipboardCopyAction", "extension.vim_escape"]\n        }\n    ],\n    "editor.codeLens": false,\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ctrl shift P and ",(0,i.kt)("inlineCode",{parentName:"li"},"open keyboard shortcuts (json)"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// Place your key bindings in this file to override the defaults\n[\n    {\n        "key": "tab",\n        "command": "-extension.vim_tab",\n        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != \'Insert\'"\n    },\n    {\n        "key": "shift+tab",\n        "command": "-extension.vim_shift+tab",\n        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != \'Insert\'"\n    }\n]\n\xb4\xb4\xb4\n\n')),(0,i.kt)("h2",{id:"settings-for-rider-settings-for-intellij-products"},"Settings for Rider, Settings for Intellij-products"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"disable auto new line on toggle comment - uncheck: AdvancedSettings/Move caret down after comment "),(0,i.kt)("li",{parentName:"ul"},"choose vim over IDE for the following keys:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// vim specific\nctrl c - vim    // we make this copy and esc in our .ideavim\nctrl d - vim    // move down a half page\nctrl i - vim    // next mouse cursor position\nctrl m - vim    // enables newline in insert mode\nctrl n - vim    // autocomplete next option\nctrl o - vim    // prev mouse cursor position\nctrl p - vim    // autocomplete prev option\nctrl q - vim    // box selection mode\nctrl r - vim    // undo changes gone back with u\nctrl s - vim    // vim sneak\nctrl u - vim    // move up a half page\nctrl [ - vim    // move quickly\nctrl ] - vim    // move quickly\n\nrest use IDE\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"next some added keybindings for my preference:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// non default Keybindings(us keyboard layout)\nctrl+\\      Tool Windows/Terminal (English only)\nctrl+\xf6      Tool Windows/Terminal (german only)\nctrl+#      (GERMAN-ONLY) toggle comment\n\n\nctrl+shift+e    RecentLocation->FileExplorer\nctrl+alt+f      RecentLocatoin\nctrl+shift+g    Git/VCS Group/VCS Operations Popup\nctrl+b          MainMenu/Window/ActiveToolwindow/HideAllToolWindows\n\nf1      Main Menu/Navigate/Goto Error/Bookmark Actions/Next Highlighted Error\nf2      rename\n            MainMenu/Refactor/Rename\n            Version Control Systems/Shelve/Rename\n            Version Control Systems/Shelve/Edit Changelist\n            Datbase Explorer/Rename\n            Datbase Explorer/Sessions/Rename Session\n            Git/EditCommitMessage\n            Other/Bookmaks/Edit\n            Other/TableActions/EditTableCell\n            Other/TreeActions/EditTreeNode\nf5      MainMenu/Run/Run/Debug/Debug (shift+f9 ONE)\nf6       MainMenu/Run/Run/Debug/Run (shift+f10 ONE)\n\nctrl+alt+e  rebind what ctrl+e did before\nctrl+e      Navigate/Goto by Name Actions/Go to File\nctrl+alt+1  rebind alt+1\nctrl+alt+2  rebind alt+2\nctrl+alt+3  rebind alt+3\nctrl+alt+4  rebind alt+4\nctrl+alt+5  rebind alt+5\n\nalt+Enter   -> ALSO ctrl+.          // like in vscode\nctrl+shift+enter -> also ctrl+,     // want this quick complete easy to reach\n\nalt+1       Other/Tabs/select tab #1\n...\nalt+5       Other/Tabs/select tab #5\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"create an ",(0,i.kt)("inlineCode",{parentName:"li"},"C\\Users\\vincepr\\.ideavimrc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'set sneak\n\nset visualbell\nset noerrorbells\n\nnnoremap ge :action ShowErrorDescription<cr>\nnnoremap gh :action QuickJavaDoc<cr>\nnnoremap gf :action QuickImplementations<cr>\n\nnnoremap <C-c> "+y<Esc>\nvnoremap <C-c> "+y<Esc>\nxnoremap <C-c> "+y<Esc>\nsnoremap <C-c> "+y<Esc>\n\nremap <C-n> <Action>(GotoClass)\n')))}d.isMDXComponent=!0}}]);