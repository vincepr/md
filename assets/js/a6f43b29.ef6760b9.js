"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[5684],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),d=r,g=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return t?a.createElement(g,l(l({ref:n},u),{},{components:t})):a.createElement(g,l({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},158:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const o={},l="Context in golang",i={unversionedId:"go/03examples/context",id:"go/03examples/context",title:"Context in golang",description:"- useful solution if we require some timeout, deadline",source:"@site/docs/go/03examples/context.md",sourceDirName:"go/03examples",slug:"/go/03examples/context",permalink:"/md/go/03examples/context",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/go/03examples/context.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Auth using Json-Web-Token",permalink:"/md/go/03auth"},next:{title:"Syncronizing read/write - mutex in a Game example",permalink:"/md/go/03examples/game"}},c={},s=[{value:"3 main parts of the context package",id:"3-main-parts-of-the-context-package",level:2},{value:"Deadlines",id:"deadlines",level:3},{value:"cancellation Signals",id:"cancellation-signals",level:3},{value:"Request scoped values",id:"request-scoped-values",level:2},{value:"Best practices",id:"best-practices",level:2}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"context-in-golang"},"Context in golang"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"useful solution if we require some timeout, deadline"),(0,r.kt)("li",{parentName:"ul"},"or some cleanup after cancellation etc.")),(0,r.kt)("h2",{id:"3-main-parts-of-the-context-package"},"3 main parts of the context package"),(0,r.kt)("h3",{id:"deadlines"},"Deadlines"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WithTimeout(parent context.Context, timeout time.Time) (context.Context, context.CancelFunc)")),(0,r.kt)("li",{parentName:"ul"},"this cancels automatically after a ",(0,r.kt)("strong",{parentName:"li"},"duration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WithDeadline(parent context.Context, timeout time.Time) (context.Context, context.CancelFunc)")),(0,r.kt)("li",{parentName:"ul"},"similar to the above but with an ",(0,r.kt)("strong",{parentName:"li"},"absolute time")," at witch we cancel.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'const shortDuration = 1 * time.Second\nconst longDuration  = 1 * time.Minute\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), longDuration)\n    defer cancel()\n\n    select{\n        case <- time.After(2*time.Second):\n        fmt.Println("finished after 1 second")\n    case <- ctx.Done():\n        fmt.Println(ctx.Err())\n    }\n}\n// short duration -> context deadline exceeded\n// long duration  -> finished after 1 second\n')),(0,r.kt)("h3",{id:"cancellation-signals"},"cancellation Signals"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"WithCancel(parent context.Context)      (context.Context, context.CancelFunc)")),(0,r.kt)("li",{parentName:"ul"},"here we manually have to call the cancel function")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func main(){\n    ch := make(chan struct{})\n    run := func(ctx context.Context){\n        // we just create a channel, where we wait for the context cancel singal, \n        // then we loop n++ and print n every half second\n        n := 1\n        for{\n            select{\n            case <-ctx.Done():\n                fmt.Println("recived graceful shutdown signal, shutting down")\n                close(ch)\n                return\n            default:\n                time.Sleep(time.Millisecond*500)\n                fmt.Println(n)\n                n++\n            }\n        }\n    }\n\n    ctx, cancel := context.WithCancel(context.Background())\n    // after a timer of 3 seconds we cancel our context by hand. By calling our cancel() \n    go func(){\n        time.Sleep(time.Second *3)\n        fmt.Println("goodbye, sending over a shutdown")\n        cancel()\n    }()\n    go run(ctx)\n    fmt.Println("only goroutines and channel left running")\n    <-ch            // this blocks untill our channel is closed\n    fmt.Println("main finished running")\n}\n\n// only goroutines and channel left running\n// 1\n// 2\n// 3\n// 4\n// 5\n// goodbye, sending over a shutdown\n// 6\n// recived graceful shutdown signal, shutting down\n// main finished running\n')),(0,r.kt)("h2",{id:"request-scoped-values"},"Request scoped values"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A request scoped variable is instancinated for a each single (http)request. So a request scoped variable instance does not exist in the context of another request.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type jwt string\nconst auth jwt = "JWT"\n\nfunc main(){\n    ctx := context.WithValue(context.Background(), auth, "Some Data we want to pass down")\n\n    bearer := ctx.Value(auth)\n    str, ok := bearer.(string)\n    if !ok{\n        log.Fatal("not a string")\n    }\n    log.Println("value:", str)\n}\n')),(0,r.kt)("h2",{id:"best-practices"},"Best practices"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"if we need a context in a api, define the ctx context.Context as the first argument."),(0,r.kt)("li",{parentName:"ul"},"MAKE SURE context.CancelFunct is called. Otherwise the application will leak memory/goroutines.")))}p.isMDXComponent=!0}}]);