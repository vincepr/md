"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[2973],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8405:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={},o="Serilog and Elasticsearch / Kibana",l={unversionedId:"csharp/examples/kibanaSerilogElasticSearch",id:"csharp/examples/kibanaSerilogElasticSearch",title:"Serilog and Elasticsearch / Kibana",description:"spinning up kibana/elasticsearch in docker",source:"@site/docs/csharp/examples/kibanaSerilogElasticSearch.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/kibanaSerilogElasticSearch",permalink:"/md/csharp/examples/kibanaSerilogElasticSearch",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/kibanaSerilogElasticSearch.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Yield in csharp",permalink:"/md/csharp/examples/Yield"},next:{title:"Nullchecking in csharp",permalink:"/md/csharp/examples/nullchecking"}},s={},c=[{value:"spinning up kibana/elasticsearch in docker",id:"spinning-up-kibanaelasticsearch-in-docker",level:2},{value:"Getting Net project ready",id:"getting-net-project-ready",level:2},{value:"Programm.cs",id:"programmcs",level:2},{value:"The Controller",id:"the-controller",level:2},{value:"kibana",id:"kibana",level:2}],p={toc:c};function m(e){let{components:n,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"serilog-and-elasticsearch--kibana"},"Serilog and Elasticsearch / Kibana"),(0,a.kt)("h2",{id:"spinning-up-kibanaelasticsearch-in-docker"},"spinning up kibana/elasticsearch in docker"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"create ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose.yaml"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '2.2'\nservices:\n  es01:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.0\n    container_name: es01\n    environment:\n      - node.name=es01\n      - cluster.name=es-docker-cluster\n      - cluster.initial_master_nodes=es01\n      #      - discovery.type=single-node\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - data01:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n    networks:\n      - elastic\n  kib01:\n    image: docker.elastic.co/kibana/kibana:7.9.0\n    container_name: kib01\n    ports:\n      - 5601:5601\n    environment:\n      ELASTICSEARCH_URL: http://es01::9200\n      ELASTICSEARCH_HOSTS: http://es01:9200\n    networks:\n      - elastic\n#    depends_on:\n#      - es01   \n\nvolumes:\n  data01:\n    driver: local\n\nnetworks:\n  elastic:\n    driver: bridge\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"and spin it up with docker-compose up"),(0,a.kt)("li",{parentName:"ul"},"on windows (with docker-desktop) temporarily move vm map count up:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"alt could be to use discovery.type=single-node ")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"wsl -d docker-desktop\nsysctl -w vm.max_map_count=262144\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"now we should see on http://localhost:9200/ a json with info about the elastic\nnow we should see on http://localhost:5601/ the kibana application")),(0,a.kt)("h2",{id:"getting-net-project-ready"},"Getting Net project ready"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"add Serilog.AspNetCore"),(0,a.kt)("li",{parentName:"ul"},"add Serilog.Sinks.Elasticsearch"),(0,a.kt)("li",{parentName:"ul"},"add Serilog.Enrichers.Environment"),(0,a.kt)("li",{parentName:"ul"},"in the ",(0,a.kt)("inlineCode",{parentName:"li"},"appsettings.json")," replace the Logging entries:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Logging": {\n    "LogLevel": {\n      "Default": "Information",\n      "Microsoft.AspNetCore": "Warning"\n    }\n  },\n  "AllowedHosts": "*"\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Serilog": {\n    "MinimumLevel": {\n      "Default": "Information",\n      "Override": {\n        "Microsoft": "Information",\n        "System": "Warning"\n      }\n    }\n  },\n  "AllowedHosts": "*"\n}\n')),(0,a.kt)("h2",{id:"programmcs"},"Programm.cs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'using Serilog;\nusing Serilog.Sinks.Elasticsearch;\n\nvar builder = WebApplication.CreateBuilder(args);\n// setup the logger\nLog.Logger = new LoggerConfiguration()\n    .Enrich.FromLogContext()\n    .WriteTo.Console()\n    .WriteTo.File("logs.txt")\n    .WriteTo.Elasticsearch(new ElasticsearchSinkOptions(new Uri("http://localhost:9200"))\n    {\n        IndexFormat =\n            $"my-elastic-app-logs-{builder.Environment.ToString()!.ToLower().Replace(".", "-")}-{DateTime.UtcNow:yyyy:MM}",\n        AutoRegisterTemplate = true,\n        NumberOfShards = 2,\n        NumberOfReplicas = 1,\n    })\n    .Enrich.WithProperty("Environment", builder.Environment.EnvironmentName)\n    .ReadFrom.Configuration(builder.Configuration)     // use "Serilog" settings from our appsettings\n    .CreateLogger();\n\nbuilder.Host.UseSerilog();                          // <- !!\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();\n\n')),(0,a.kt)("h2",{id:"the-controller"},"The Controller"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'[HttpGet(Name = "GetWeatherForecast")]\npublic ActionResult<IEnumerable<WeatherForecast>> Get()\n{\n    try\n    {\n        if (new Random().Next(0, 5) < 2) \n            throw new Exception("Something broke randomly");\n    }\n    catch (Exception ex)\n    {\n        _logger.LogError(ex, "An Error happened.");\n        return new StatusCodeResult(500);\n    }\n    \n    return Ok(Enumerable.Range(1, 5).Select(index => new WeatherForecast\n        {\n            Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n        })\n        .ToArray());\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"now (while docker is running) just hit the controller a bunch for some data")),(0,a.kt)("h2",{id:"kibana"},"kibana"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"first we need to create an Index that we can filter our data by:\n",(0,a.kt)("img",{alt:"Alt text",src:t(4275).Z,width:"1820",height:"1065"}))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"we can select ",(0,a.kt)("inlineCode",{parentName:"p"},"@timestamp")," if we want to per default sort the data chronologically")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"if we now click discover we should see our data already:"))),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Alt text",src:t(1348).Z,width:"1786",height:"1769"})))}m.isMDXComponent=!0},4275:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/kibana1-5034e27db44032c6437a4e7a1db31d6e.png"},1348:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/kibana2-59f1b1f15a1f6385e13a81dc5904d884.png"}}]);