"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[697],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=r.createContext({}),u=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(m.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(t),g=i,d=c["".concat(m,".").concat(g)]||c[g]||p[g]||a;return t?r.createElement(d,o(o({ref:n},s),{},{components:t})):r.createElement(d,o({ref:n},s))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4614:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(7462),i=(t(7294),t(3905));const a={},o="Algorithmentypen",l={unversionedId:"fiae/Programmierung/Algorithmen",id:"fiae/Programmierung/Algorithmen",title:"Algorithmentypen",description:"Algorithmen k\xf6nnen sequentiell, iterativ oder rekursiv formuliert werden.",source:"@site/docs/fiae/Programmierung/Algorithmen.md",sourceDirName:"fiae/Programmierung",slug:"/fiae/Programmierung/Algorithmen",permalink:"/md/fiae/Programmierung/Algorithmen",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/fiae/Programmierung/Algorithmen.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bedrohungsanalyse - Threat Moddeling",permalink:"/md/fiae/IT-Sicherheit/thread_modeling/threat_modelling"},next:{title:"Projekt ereignisgesteuerte App in C",permalink:"/md/fiae/Programmierung/CSharp/Projekt/day1"}},m={},u=[{value:"IHK-Pr\xfcfungsrelevante Algorithmen Sammlung:",id:"ihk-pr\xfcfungsrelevante-algorithmen-sammlung",level:2},{value:"Divide and Conquer vs Dynamic programming (Memoisation and Tabulation)",id:"divide-and-conquer-vs-dynamic-programming-memoisation-and-tabulation",level:2}],s={toc:u};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"algorithmentypen"},"Algorithmentypen"),(0,i.kt)("p",null,"Algorithmen k\xf6nnen sequentiell, iterativ oder rekursiv formuliert werden."),(0,i.kt)("p",null,"In Bezug auf ihre Implementierung, also die maschinelle Umsetzung im Prozessor, werden Algorithmen praktisch immer sequentiell(oder parallel) ausgef\xfchrt."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sequentiell: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Eine Folge nacheinander auszuf\xfchrender Einzelschritte ohne zentrale Wiederholungen."),(0,i.kt)("li",{parentName:"ul"},"Implementierungssicht: Sequentielle L\xf6sungen entsprechen der nat\xfcrlichen Abarbeitungsfolge von Maschienenbefehlen durch den Prozessor.")))),(0,i.kt)("h2",{id:"ihk-pr\xfcfungsrelevante-algorithmen-sammlung"},"IHK-Pr\xfcfungsrelevante Algorithmen Sammlung:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sortieralgorithmen: Bubble Sort, Selection Sort, Insertion Sort, Merge Sort, Quick Sort"),(0,i.kt)("li",{parentName:"ul"},"Suchalgorithmen: Lineare Suche, Bin\xe4re Suche"),(0,i.kt)("li",{parentName:"ul"},"Rekursive Algorithmen: Faktorielle Funtkion, Fibonacci Folge"),(0,i.kt)("li",{parentName:"ul"},"Dynamische Programmierung: Rucksack-Problem, ")),(0,i.kt)("p",null,"| Algorithmus | Beschreibung | wann angewendet|"),(0,i.kt)("h2",{id:"divide-and-conquer-vs-dynamic-programming-memoisation-and-tabulation"},"Divide and Conquer vs Dynamic programming (Memoisation and Tabulation)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Divide and conquer is just splitting a problem up (ex recursively) into more easier to solve problems. No implication about speed initself.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In the example below",(0,i.kt)("inlineCode",{parentName:"li"},"dacFib(n)")))),(0,i.kt)("li",{parentName:"ul"},"Dynamic Programming extends the devide and conquer principle with memoisation to speed up the problem.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"in the example below ",(0,i.kt)("inlineCode",{parentName:"li"},"memFib(n)")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"tabFib(n)"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n *  divide and conquer implementation:\n */\nfunction dacFib(n){\n    if (n===0 || n===1){\n        return n\n    }\n    return dacFib(n-1)+dacFib(n-2)\n}\n\n/**\n *  dynamic programming implementations: \n */\n\n// with Memoization (top-down cache filling)\n// additionaly we persisted the mem, by moving it out of the function body\nfunction memFib(n){\n    if (mem[n] === undefined){\n        let result= 0;\n        if (n<2) result = n\n        else result =memFib(n-2) + memFib(n-1)\n        mem[n]=result\n    }\n    return mem[n]\n}\n\n// with Tabulation (bottom-up cache filling) \n// since we build every value up to n here it is a bit slower than memFib\nfunction tabFib(n){\n    let tab = [0,1]\n    for (let i=2; i<=n; i++){\n        tab[i] = tab[i-2] + tab[i-1]\n    }\n    return tab[n]\n}\n\n\n/*\n*   testing values\n*/ \nlet max = 38;       // arround after 38*38 the returned numberws get to big for js float to handle.\nlet mem = {}        // our cache. We clear it after every use.\n\n// single high value test:\ntest_single_run(max, dacFib)         // -> took 440ms\ntest_single_run(max*max, memFib)     // -> took <0ms\ntest_single_run(max*max, tabFib)     // -> took <0ms\n\nmem = {}            // clearing the cache\n\n// iterative tests going from 1 ... max\ntest_iterative(max, dacFib)         // -> took 1049ms\ntest_iterative(max*max, memFib)     // -> took <0ms\ntest_iterative(max*max, tabFib)     // -> took 11ms ( since no caching here is shared)\n\n\nfunction test_single_run(n, func){\n    let time = performance.now()\n    let result = func(n)\n    time = performance.now()-time;\n    console.log(func.name+`() took ${time}ms , result is: ${result}`)\n}\n\nfunction test_iterative(max, func){\n    let time = performance.now()\n    let result = []\n    for (let n=0; n<=max; n++){\n        result.push(func(n))\n    }\n    time = performance.now()-time;\n    console.log(func.name+`() took ${time}ms`)\n    console.log(`result: ${result}`)\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an interesting thing we start to see is that for the way we build or test, the memoisation beats the tabulation.")))}c.isMDXComponent=!0}}]);