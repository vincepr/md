"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[7527],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>v});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),p=c(t),u=r,v=p["".concat(l,".").concat(u)]||p[u]||d[u]||i;return t?o.createElement(v,s(s({ref:n},m),{},{components:t})):o.createElement(v,s({ref:n},m))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[p]="string"==typeof e?e:r,s[1]=a;for(var c=2;c<i;c++)s[c]=t[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1664:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=t(7462),r=(t(7294),t(3905));const i={},s="Docker compose",a={unversionedId:"webdev/docker/04compose",id:"webdev/docker/04compose",title:"Docker compose",description:"- https://docs.docker.com/compose/compose-file/",source:"@site/docs/webdev/docker/04compose.md",sourceDirName:"webdev/docker",slug:"/webdev/docker/04compose",permalink:"/md/webdev/docker/04compose",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/webdev/docker/04compose.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Passing Env variables to a docker container",permalink:"/md/webdev/docker/03env"},next:{title:"Express JS",permalink:"/md/webdev/expressjs"}},l={},c=[{value:"basic structures",id:"basic-structures",level:2},{value:"Services",id:"services",level:3},{value:"Networks",id:"networks",level:3},{value:"VOLUMES",id:"volumes",level:3},{value:"Configs",id:"configs",level:3},{value:"Secret",id:"secret",level:3},{value:"Project",id:"project",level:3},{value:"compose file",id:"compose-file",level:2},{value:"example to profiles",id:"example-to-profiles",level:3},{value:"Name top-level element",id:"name-top-level-element",level:4},{value:"some more examples:",id:"some-more-examples",level:2}],m={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"docker-compose"},"Docker compose"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/compose-file/"},"https://docs.docker.com/compose/compose-file/"))),(0,r.kt)("h2",{id:"basic-structures"},"basic structures"),(0,r.kt)("h3",{id:"services"},"Services"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"computing components of an application. Basically our container images"),(0,r.kt)("li",{parentName:"ul"},"services communicate with each other trough Networks")),(0,r.kt)("h3",{id:"networks"},"Networks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in this setting a Network enables IP routes between containers")),(0,r.kt)("h3",{id:"volumes"},"VOLUMES"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"persistent data that services may access if possible."),(0,r.kt)("li",{parentName:"ul"},"basically exist on our actually system and can be accessed from there aswell")),(0,r.kt)("h3",{id:"configs"},"Configs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"configs allow services to adapt their behavior without the need to rebuild the docker image.")),(0,r.kt)("h3",{id:"secret"},"Secret"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"configuration data, that shoud not be exposed without security consideration. "),(0,r.kt)("li",{parentName:"ul"},"Secrets are made available to services as files mounted into their containers, just like configs")),(0,r.kt)("h3",{id:"project"},"Project"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A Project is an individual deployment of an application specification on a platfom."),(0,r.kt)("li",{parentName:"ul"},"it is used to group ressources together and isolate them from other appliactions of the same Compose."),(0,r.kt)("li",{parentName:"ul"},"A Compose implementation creating ressources on a platfrom MUST prefix resource names by project and set the label ",(0,r.kt)("inlineCode",{parentName:"li"},"com.docker.compose.project")),(0,r.kt)("li",{parentName:"ul"},"Project name can be set explicit by top-level ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," attribute. Compose implementation MUST offer a way for users to set a custom project name and override this name. this allows running the same compose.yaml twice on the same infrastructure without changes.")),(0,r.kt)("h2",{id:"compose-file"},"compose file"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"compose.yaml prefered over compose.yml with docker-compose.yaml or docker-compose.yml as the (depr-)old form in the working directory."),(0,r.kt)("li",{parentName:"ul"},"multiple compose files can be combined together to define the application model.")),(0,r.kt)("h3",{id:"example-to-profiles"},"example to profiles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n    base_thing:\n        image: base_thing\n    base_thing_test:\n        image: base_test\n        profiles:\n            - test\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'## expresses startup and shotdown dependencies between services\nservices:\n  init_check:\n    image: test_image\n  web:\n    build: .\n    depends_on:\n      - init_check\n        condition: service_completed_successfully   # expected to run successful to completion before\n      - db\n        condition: service_healthy # a check we can implement to run to indicate if a container is "healthy"\n      - redis\n        # default is condition: service_started after a service is running (sql db might not be fully initialized though! )\n  redis:\n    image: redis\n  db:\n    image: postgres\n            - baste_test\n')),(0,r.kt)("h4",{id:"name-top-level-element"},"Name top-level element"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n    foo:   \n        image: busybox\n        environment:\n            - COMPOSE_PROJECT_NAME\n        command: echo "running project ${COMPOSE_PROJECT_NAME}"\n')),(0,r.kt)("h2",{id:"some-more-examples"},"some more examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'\nservices:\n  foo:\n    image: busybox\n    environment:\n      - COMPOSE_PROJECT_NAME\n    command: echo "running project ${COMPOSE_PROJECT_NAME}"\n  initializer:\n    image: busybox\n    blkio_config:\n      ## weight - modify the proportion of bandwith allocated for this ervice (10-1000 , 500 as default)\n      weight: 300\n      weight_device:\n        - path: /dev/sda\n        - weight: 400\n      ## device_read_bps _write_bps set a limit in bytes per second, must have 2 keys:\n      device_read_bps:    \n        - path: /dev/sdb\n        - rate: \'12mb\' \n      ## cpu_count, cpu_percent ... defines usable CPU usage\n      cpu_count: 0.5\n\n## configs\n  #short syntax:\nservices1:\n  redis:\n    image: redis:latest\n    configs:\n      - my_config\nconfigs:\n  my_config:\n    file: ./my_config.txt\n  myother_config:\n    external: true\n\nservice3:\n  ## device_cgroup_rules , like linux kernel specified\n  some_service:\n    device_cgroup_rules:\n      - \'c 1:3 mr\'\n      - \'a 7:* rmw\'\n    ## dns defines custom DNS servers to set on the container network interface\n    dns:\n      - 8.8.8.8\n      - 9.9.9.9\n    ## defines custom dns search domains can be single value or list (like above)\n    dns_search:\n      - example.com \n      - shop.example.com\n    ## entrypoint OVERRIDES the default entrypoint for the docker image\n    entrypoint:\n      - php\n      - -d\n      - memory_limit=-1\n      - vendor/bin/phpuit\n  \n  ## hosdtname, domainname\n  someservice:\n    hostname: shop\n    domainname: vincepr.com\n  \n  ## env_file\n    env_file: .env\n  nextservice:\n    env_file:\n      - ./a.env\n      - ./b.env\n  # relative path MUST be resloved from the Compose file\'s parent folder.\n  # env variables declared in the environment section MUST override these values\n    environment:\n      RACK_ENV: development\n      SHOW: "true"\n      USER_INPUT:\n  some_other_service:\n    environment:\n      - RACK_ENV=evelopment\n      - SHOW=true\n      - USER_INPUT\n    # when both env_file and environment are set for a service values set by environment have precedence\n  ## expose defines the ports taht Compose implementations MUST exose from container. These ports are accessible to linked services and SHOULD NOT be published to the host machine. \n    expose:\n      - "3000"\n      - "8080"\n  ## ports\n    ports:\n      - "3000" \n      - "3000-30010"\n      - "8000:8000"\n      - "127.0.0.1:8001:8001"\n      - "6060:6060/udp"\n  next_service:\n    ports:\n      - target: 80\n        host_ip: 127.0.0.1\n        published: 8080\n        protocol: tcp\n        mode: host\n  ## read_only configures service container to be created with a read-only filesystem\n\n  ## restart defines restart policy: no | always | on-failure | unless-stopped\n  restart: always\n## secrets\nservies3:\n  frontend:\n    image: some/webapp\n    secrets:\n      - server-certificate\nsecrets:\n  server-certificate:\n    file: ./file-server.cert\n\n## volumes , ACCESS_MODE: rw, ro ...\nservice4:\n  backend:\n    image: some/api\n    volumes:\n      - type: volume\n        source: db-data   #a path on the host for a bind mount\n        target: /data\n        volume:\n          nocopy: true  # disable copying of data from a container when volume is created\n      - type: bind\n        source: /var/run/postgress.sock\n        target: /var/run/postgress.sock\nvolumes:\n  db-data:\n        \n')))}p.isMDXComponent=!0}}]);