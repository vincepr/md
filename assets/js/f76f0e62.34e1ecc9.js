"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[1357],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),h=r,d=u["".concat(o,".").concat(h)]||u[h]||m[h]||s;return a?n.createElement(d,i(i({ref:t},p),{},{components:a})):n.createElement(d,i({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},6370:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const s={},i="Async Await Task in csharp",l={unversionedId:"csharp/examples/AsyncAwaitTask",id:"csharp/examples/AsyncAwaitTask",title:"Async Await Task in csharp",description:"- https general / async",source:"@site/docs/csharp/examples/AsyncAwaitTask.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/AsyncAwaitTask",permalink:"/md/csharp/examples/AsyncAwaitTask",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/AsyncAwaitTask.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"a backlog of videos / tutorials that look promising",permalink:"/md/csharp/backlog"},next:{title:"Asynchronous API example in csharp",permalink:"/md/csharp/examples/AsynchronousApi"}},o={},c=[{value:"ConfigureAwait",id:"configureawait",level:2},{value:"Blocking",id:"blocking",level:2},{value:"Example",id:"example",level:2},{value:"Examples on what to do and avoid",id:"examples-on-what-to-do-and-avoid",level:2}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"async-await-task-in-csharp"},"Async Await Task in csharp"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/davidfowl/AspNetCoreDiagnosticScenarios"},"https://github.com/davidfowl/AspNetCoreDiagnosticScenarios")," more indepth examples on what to do and what not: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AspNetCoreGuidance.md"},"general")," / ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md"},"async"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Task is the Promise/Future equivalent of Csharp."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Something that will take time to finish. Ex. a DB-Query or a API call."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"this will first syntax will consume extra memory/processor")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://medium.com/@ranjeetdotme/how-async-await-works-in-c-eccf16bd3b90"},"https://medium.com/@ranjeetdotme/how-async-await-works-in-c-eccf16bd3b90")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public async Task<string> InputOutput() {\n    var msg = "Hello World";\n    return msg;\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the next 2 examples will wait till completed then return (with and without an result)"),(0,r.kt)("li",{parentName:"ul"},"no extra state-machine will get spawned, just simple sequential execution"),(0,r.kt)("li",{parentName:"ul"},"these just pass down the promise thus no care about blocking/awaiting has to happen in this part, it will all be handled upstream")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public Task<string> IOCompletedWithResult() {\n    var msg = "Hello World";\n    return Task.FromResult(msg);\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public Task<string> IOCompletedNoResult() {\n    var msg = "Hello World";\n    return Task.CompletedTask;\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"so there is (a small) benefit to wait as long as possible to change to async\nand for example propagate the ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public Task<string> InputOutputNetwork {\n    var client = new HttpClient();\n    return client.GetStringAsync("https://some.site");\n    // instead of awaiting it here directly\n    // response = await client.GetStringAsync("https://some.site);\n    // return response;     // especially if we need to validate/transform the response we can only await it here and not upstream\n}\n')),(0,r.kt)("h2",{id:"configureawait"},"ConfigureAwait"),(0,r.kt)("p",null,"ConfigureAwait(false) basically tells that it is ok to return this to any thread. (true the default will always continue on the same thread)"),(0,r.kt)("p",null,"Some rough rules about when to use it."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"for a api/webapp we can basically use .ConfigureAwait(false) for some extra performance without too much worry"),(0,r.kt)("li",{parentName:"ul"},"on some desktop/wpf app on the other hand this will cause big problems.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public async Task<string> InputOutput() {\n    var client = new HttpClient();\n    var content = await client.GetStringAsync("https://some.site")\n        .ConfigureAwait(false);\n    return content;\n} \n')),(0,r.kt)("h2",{id:"blocking"},"Blocking"),(0,r.kt)("p",null,"In most cases we DO NOT want to block. But for those other cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public IActionResult Index() {\n    var task = InputOutput();\n\n    // 3 ways to execute while blocking the whole thread:\n\n    // blocks the whole Thread. USE WITH CARE!\n    var a = task.Result();\n    \n    // blocks the whole Thread. USE WITH CARE!\n    task.Wait();\n\n    // blocks the whole Thread. USE WITH CARE!\n    task.GetAwaiter().GetResult();\n\n    return a;\n}\n")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'static void Main(string[] args){\n    // we block here in the main, waiting for our whole app to finish\n    StartApp().GetAwaiter().GetResult();\n}\npublic static Task StartApp(){\n    // start our Tasks\n    var collect = CollectFromDb();\n    var process = FetchFromApi("some.site.st");\n\n    // We could block and wait on the Task, that completes when everything has finished:\n    //     Task.WaitAll(new[] { collect, process });\n\n    // or we propagate the task upstream and let main handle it:\n    return Task.WhenAll(new[] { collect, process });\n    \n}\npublic static async Task CollectFromDb(){\n    while (true){\n        // reading some data from a slow Drive\n    }\n}\npublic static async Task FetchFromApi(string msg){\n    while (true){\n        // fetching some network responses here\n    }\n}\n')),(0,r.kt)("h2",{id:"examples-on-what-to-do-and-avoid"},"Examples on what to do and avoid"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"prefer ",(0,r.kt)("inlineCode",{parentName:"li"},"await")," over ",(0,r.kt)("inlineCode",{parentName:"li"},"ContinueWith"),". In Short it does not capture SynchronisationContext because it comes from a time before async/await in csharp.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"static async Task Maain(string[] args) {\n    var service = new SomeService();\n    //BAD:\n    var number1 = await service\n        .GetValueAsync()\n        .ContinueWith(task => task.Result + 2);\n    // GOOD:\n    var number2 = await service.GetValueAsync();\n    var finalNr = number2 + 2; \n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"prefer async over Task",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"usually the performance hit for the extra state machine is negligible against benefits like code-readability and ease of use"))),(0,r.kt)("li",{parentName:"ul"},"Don't use async in constructors. make a ",(0,r.kt)("inlineCode",{parentName:"li"},"CreateAsync")," function instead where any neccessary await etc. happens")))}u.isMDXComponent=!0}}]);