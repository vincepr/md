"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[2203],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),h=a,m=d["".concat(o,".").concat(h)]||d[h]||p[h]||i;return t?r.createElement(m,l(l({ref:n},c),{},{components:t})):r.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=h;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},9524:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={},l="Binary Search Tree",s={unversionedId:"datastructures/binary_search_tree",id:"datastructures/binary_search_tree",title:"Binary Search Tree",description:"Usage (all) binary Trees",source:"@site/docs/datastructures/binary_search_tree.md",sourceDirName:"datastructures",slug:"/datastructures/binary_search_tree",permalink:"/md/datastructures/binary_search_tree",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/datastructures/binary_search_tree.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Evaluating Data Structures",permalink:"/md/datastructures/Evaluating"},next:{title:"Union Find - Disjoint Set",permalink:"/md/datastructures/disjoined_set"}},o={},u=[{value:"Usage (all) binary Trees",id:"usage-all-binary-trees",level:2},{value:"Binary Search Trees (BST)",id:"binary-search-trees-bst",level:2},{value:"Usage (Binary Search Tree)",id:"usage-binary-search-tree",level:3},{value:"Complexity (Binary Search Tree)",id:"complexity-binary-search-tree",level:3},{value:"Implementation",id:"implementation",level:2}],c={toc:u};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"binary-search-tree"},"Binary Search Tree"),(0,a.kt)("h2",{id:"usage-all-binary-trees"},"Usage (all) binary Trees"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"implementation of inary heaps"),(0,a.kt)("li",{parentName:"ul"},"Syntax trees (ex used by compiler and calculators)"),(0,a.kt)("li",{parentName:"ul"},"Treap - probabilistic Datastructure")),(0,a.kt)("h2",{id:"binary-search-trees-bst"},"Binary Search Trees (BST)"),(0,a.kt)("p",null,"A Special Tree, that also follows the Search Tree invariant:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"left subtree has smaller elmenets (than current node)"),(0,a.kt)("li",{parentName:"ul"},"right subtree has larger elements (than current node)")),(0,a.kt)("h3",{id:"usage-binary-search-tree"},"Usage (Binary Search Tree)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Implementation for Sets, Maps"),(0,a.kt)("li",{parentName:"ul"},"Red Black Trees"),(0,a.kt)("li",{parentName:"ul"},"AVL Trees"),(0,a.kt)("li",{parentName:"ul"},"Splay Trees")),(0,a.kt)("h3",{id:"complexity-binary-search-tree"},"Complexity (Binary Search Tree)"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Average"),(0,a.kt)("th",{parentName:"tr",align:null},"Worst"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Insert"),(0,a.kt)("td",{parentName:"tr",align:null},"O(log(n))"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Delte"),(0,a.kt)("td",{parentName:"tr",align:null},"O(log(n))"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Remove"),(0,a.kt)("td",{parentName:"tr",align:null},"O(log(n))"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Search"),(0,a.kt)("td",{parentName:"tr",align:null},"O(log(n))"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Average case for statistically distributed values."),(0,a.kt)("li",{parentName:"ul"},"worst case would be ex order data incoming in exactly the inverse way.")),(0,a.kt)("h2",{id:"implementation"},"Implementation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public class Example\n{\n    public static void Run()\n    {\n        var bst = new BST<int>(50);\n        bst.Insert(99,2,234,45,34,5,91,102,46,48,47);\n        //Console.WriteLine(bst.left.right.Value);\n        //bst.SimplePrint();\n        Console.WriteLine("~ pretty print() :");\n        bst.PrettyPrint();\n\n        Console.WriteLine("- Min: " + bst.MinValue());\n        Console.WriteLine("- Max: " + bst.MaxValue());\n        Console.WriteLine("- Depth: " + bst.Depth);\n\n        Console.WriteLine("* bst.Find(101) = " + ((bst.Find(101) is null) ? "null" : bst.Find(101)));\n        Console.WriteLine("* bst.Find(34) = " + ((bst.Find(34) is null) ? "null" : bst.Find(34)));\n\n        bst.Remove(50);\n        bst.Remove(34);\n        bst.Remove(101);\n        bst.PrettyPrint();\n\n        Console.WriteLine("* bst.Find(34) = " + ((bst.Find(34) is null) ? "null" : bst.Find(34)));\n        Console.WriteLine("---- ---- ----");\n\n        Console.WriteLine("TraversePreOrder():");\n        Console.WriteLine(String.Join(", ", bst.TraversePreOrder()));\n\n        Console.WriteLine("TraverseInOrder():");\n        Console.WriteLine(String.Join(", ", bst.TraverseInOrder()));\n\n        Console.WriteLine("TraversePostOrder():");\n        Console.WriteLine(String.Join(", ", bst.TraversePostOrder()));\n    }\n}\n\ninternal class BST<T> where T : IComparable\n{\n    public T Value { get; private set; }\n    public BST<T>? left;\n    public BST<T>? right;\n    public int Depth => GetDepth(this) - 1;\n\n    public BST(T value, BST<T>? left = null, BST<T>? right = null)\n    {\n        this.Value = value;\n        this.left = left;\n        this.right = right;\n    }\n\n    /* Traverse the Tree */\n\n    public IEnumerable<T> TraversePreOrder() => TraversePreOrder(this);\n    private static IEnumerable<T> TraversePreOrder(BST<T>? parent)\n    {\n        if (parent is not null)\n        {\n            yield return parent.Value;\n            foreach (var item in TraversePreOrder(parent.left))\n                yield return item;\n            foreach (var item in TraversePreOrder(parent.right))\n                yield return item;\n        }\n    }\n\n    public IEnumerable<T> TraverseInOrder() => TraverseInOrder(this);\n    private static IEnumerable<T> TraverseInOrder(BST<T>? parent)\n    {\n        if (parent is not null)\n        {\n            foreach (var item in TraverseInOrder(parent.left))\n                yield return item;\n            yield return parent.Value;\n            foreach (var item in TraverseInOrder(parent.right))\n                yield return item;\n        }\n    }\n\n    public IEnumerable<T> TraversePostOrder() => TraversePostOrder(this);\n    private static IEnumerable<T> TraversePostOrder(BST<T>? parent)\n    {\n        if (parent is not null)\n        {\n            foreach (var item in TraversePostOrder(parent.left))\n                yield return item;\n            foreach (var item in TraversePostOrder(parent.right))\n                yield return item;\n            yield return parent.Value;\n        }\n    }\n\n    /* Basic operations: */\n    public void Insert(params T[] values)\n    {\n        foreach (var val in values)\n            Insert(val);\n    }\n\n    public void Insert(T newVal)\n    {\n        // strategy is to ignore duplicates (but some types might require more thought here (ex not every equality might be duplicate)):\n        if (newVal.CompareTo(Value) == 0) { return; }\n        if (newVal.CompareTo(Value) > 0)\n        {\n            if (right is null)\n            {\n                this.right = new BST<T>(newVal);\n                return;\n            }\n            right.Insert(newVal);\n        } else          // newVal < Value\n        {\n            if (left is null)\n            {\n                this.left = new BST<T>(newVal);\n                return;\n            }\n            left.Insert(newVal);\n        }\n    }\n\n    public BST<T>? Find(T value)\n    {\n        if (this.Value.Equals(value)) return this;\n        if (value.CompareTo(this.Value) < 0)\n        {\n            if (left is null) return null;\n            return left.Find(value);\n        }\n        else\n        {\n            if (right is null) return null;\n            return right.Find(value);\n        }\n    }\n\n    public T MinValue(BST<T>? node = null)\n    {\n        if (node is null) return MinValue(this);\n        if (node.left is null) return node.Value;\n        return MinValue(node.left);\n    }\n\n    public T MaxValue(BST<T>? node = null)\n    {\n        if (node is null) return MaxValue(this);\n        if (node.right is null) return node.Value;\n        return MinValue(node.right);\n    }\n    \n    private int GetDepth(BST<T>? parent) {\n        if (parent is null) return 0;\n        return Math.Max( 1+GetDepth(parent.left), 1+GetDepth(parent.right));\n    }\n\n    /// <summary>\n    /// deletion in BST:\n    /// 1) Leaf node -> set to null\n    /// 2) single child -> set child to current\n    /// 3) 2 childs -> need to find inorder successor -> then copy that to current.\n    /// </summary>\n    /// <param name="value"></param>\n    public void Remove(T value)\n    {\n        var res = Remove(this, value);\n    }\n\n    private static BST<T>? Remove(BST<T>? root, T value)\n    {\n        if (root == null) return root;  // not found / empty branch reached\n\n        // We recursively navigate towards the target node\n        if (root.Value.CompareTo(value) > 0)\n        {\n            root.left = Remove(root.left, value);\n            return root;\n        }\n        else if (root.Value.CompareTo(value) < 0)\n        {\n            root.right = Remove(root.right, value);\n            return root;\n        }\n\n        // reached target node (and only one children)\n        if (root.left is null)\n        {\n            BST<T>? newRoot = root.right;\n            root = null;\n            return newRoot;\n        }\n        if (root.right is null)\n        {\n            BST<T>? newRoot = root.left;\n            root = null;\n            return newRoot;\n        }\n        // reached target node (and 2 children)\n        //      find successor:\n        BST<T> succParent = root;\n        var succ = root.right;\n        while (succ.left is not null)\n        {\n            succParent = succ;\n            succ = succ.left;\n        }\n        //      Delete successor:\n        if (succParent != root)\n            succParent.left = succ.right;\n        else\n            succParent.right = succ.right;\n\n        root.Value = succ.Value;\n        succ = null;\n        return root;\n    }\n\n    /* First Tree Print() implementation */\n    public void PrettyPrint()\n    {\n        if (Value == null) return;\n        Console.WriteLine(Value);\n        PrintSubtree(this, "");\n    }\n\n    // helper for printTree() \'+\' for bigger side and \'-\' for smaller side\n    private static void PrintSubtree(BST<T> node, String prefix)\n    {\n        if (node.Value == null) return;\n        bool hasLeft = (node.left != null);\n        bool hasRight = (node.right != null);\n\n        if (!hasLeft && !hasRight) return;\n\n        Console.Write(prefix);\n        Console.Write((hasLeft && hasRight) ? "\u251c\u2500" : "");\n        Console.Write((!hasLeft && hasRight) ? "\u2514\u2500" : "");\n\n        if (hasRight)\n        {\n            bool printStrand = (hasLeft && hasRight && (node.right!.right != null || node.right.left != null));\n            String newPrefix = prefix + (printStrand ? "\u2502 " : "  ");\n            Console.WriteLine("+" + node.right!.Value);\n            PrintSubtree(node.right, newPrefix);\n        }\n\n        if (hasLeft)\n        {\n            Console.WriteLine((hasRight ? prefix : "") + "\u2514\u2500" + "-" + node.left!.Value);\n            PrintSubtree(node.left, prefix + "  ");\n        }\n    }\n\n    /* Alternative Tree Print() - more elegant but cant diff left-right */\n    public IEnumerable<BST<T>> GetChildren()\n    {\n        if (left is not null ) yield return left;\n        if (right is not null) yield return right;\n    }\n\n    public void SimplePrint(string indent="", bool isLast = true) \n    {\n        Console.Write(indent);\n        Console.Write(isLast ? "\u2514\u2500" : "\u251c\u2500");\n        Console.Write(this.Value is null ? "null" : this.Value);\n        Console.WriteLine();\n\n        indent += isLast ? "  " : "\u2502 ";\n        var lastChild = this.GetChildren().LastOrDefault();\n        foreach (var child in this.GetChildren())\n            child.SimplePrint(indent, child == lastChild);\n    }\n}\n\n')))}d.isMDXComponent=!0}}]);