"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[7776],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2230:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},o="Minimal docker images from scratch",l={unversionedId:"webdev/docker/02scrath",id:"webdev/docker/02scrath",title:"Minimal docker images from scratch",description:"Basics",source:"@site/docs/webdev/docker/02scrath.md",sourceDirName:"webdev/docker",slug:"/webdev/docker/02scrath",permalink:"/md/webdev/docker/02scrath",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/webdev/docker/02scrath.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dev and Production Container for a go project",permalink:"/md/webdev/docker/01basics"},next:{title:"Passing Env variables to a docker container",permalink:"/md/webdev/docker/03env"}},s={},c=[{value:"Basics",id:"basics",level:2},{value:"Further optimisation",id:"further-optimisation",level:2},{value:"2. Nonroot user",id:"2-nonroot-user",level:2},{value:"Template for Docker (alpine/debian)creating a non root user",id:"template-for-docker-alpinedebiancreating-a-non-root-user",level:3},{value:"so we change our Dockerfile",id:"so-we-change-our-dockerfile",level:3},{value:"3. name vs name:tag vs name@sha256:digest",id:"3-name-vs-nametag-vs-namesha256digest",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"minimal-docker-images-from-scratch"},"Minimal docker images from scratch"),(0,r.kt)("h2",{id:"basics"},"Basics"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Building with official docker images, ",(0,r.kt)("inlineCode",{parentName:"li"},"FROM golang"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"FROM nginx")," etc. will produce big filesizes. Results in a size of ",(0,r.kt)("strong",{parentName:"li"},"~800MB")),(0,r.kt)("li",{parentName:"ol"},"alpine (small linux distro of just a few MBs) helps reducing the size. ",(0,r.kt)("inlineCode",{parentName:"li"},"FROM golang:alpine"),". Results in size of ",(0,r.kt)("strong",{parentName:"li"},"~350MB")),(0,r.kt)("li",{parentName:"ol"},"Multi-stage builds to build our binary then just image that  binary in a (empty) scratch image.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'# 1.step-build the executable binary\nFROM golang:alpine AS builder\n\n# Git is required for fetching the dependencies, so we install it\nRUN apk update && apk add --no-cache git\n\n# Set a workingdirectory\nWORKDIR $GOPATH/src/mypackage/myapp\nCOPY . .\n\n# Fetch dependencies\nRUN go get -d -v\n\n# Build the binary\nRUN go build -o /go/bin/hello\n\n# ---------------------------------------------------- #\n\n# 2.step build a minimal image\nFROM scratch\n\n# copy our binary, from the build-step, to our new image\nCOPY --from=builder /go/bin/hello /go/bin/hello\n\n# run the binary\nENTRYPOINT ["/go/bin/hello"]\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sudo docker build -t hello .")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sudo docker images")," shows a SIZE of just ",(0,r.kt)("strong",{parentName:"li"},"1.85MB")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sudo docker run -it --rm hello"))),(0,r.kt)("h2",{id:"further-optimisation"},"Further optimisation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -ldflags="-w -s" -o /go/bin/hello')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"CGO_ENABLED=0")," is useful since alpinelinux will not use those C libraries anyway."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"-a")," force rebuilding of packages that are already up-to-date."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"installsuffix suffix"),"\na suffix to use in the name of the package installation directory, in order to keep output separate from default builds.\nIf using the -race flag, the install suffix is automatically set to race or, if set explicitly, has _race appended to it. Likewise for the -msan and -asan flags. Using a - -buildmode option that requires non-default compile flags has a similar effect.\n-",(0,r.kt)("inlineCode",{parentName:"li"},"ldflags [pattern=]arg list")," arguments to pass on each go tool link invocation.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ACTUALLY CGO_ENABLED=0 and INSTALLSUFFIX cgo")," might ",(0,r.kt)("strong",{parentName:"p"},"NOT")," be longer required as of Go 1.10 and onwards, :todo read up on that later"),(0,r.kt)("h1",{id:"guidelines-for-a-more-securecorrect-docker-image"},"Guidelines for a more secure/correct docker image"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Keep your image up to date."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:2},(0,r.kt)("li",{parentName:"ol"},"Never run a process as root in a container."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:3},(0,r.kt)("li",{parentName:"ol"},"Image-Pinning with docker pull image by digest."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:4},(0,r.kt)("li",{parentName:"ol"},"Verify third-party container repositories."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:5},(0,r.kt)("li",{parentName:"ol"},"Don\u2019t install not used packages."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:6},(0,r.kt)("li",{parentName:"ol"},"Run only one process in a container."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:7},(0,r.kt)("li",{parentName:"ol"},"Never store data in a container, do it in a volume."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:8},(0,r.kt)("li",{parentName:"ol"},"Never store credentials in a container, do it in a volume."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:9},(0,r.kt)("li",{parentName:"ol"},"Use tool like docker-security-scanning."))),(0,r.kt)("li",{parentName:"ul"},"10.Use docker scan image"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("ol",{parentName:"li",start:11},(0,r.kt)("li",{parentName:"ol"},"Always export on port > 1024 (smaller needs extra privileges collides with 2.)")))),(0,r.kt)("h2",{id:"2-nonroot-user"},"2. Nonroot user"),(0,r.kt)("h3",{id:"template-for-docker-alpinedebiancreating-a-non-root-user"},"Template for Docker (alpine/debian)creating a non root user"),(0,r.kt)("p",null,"We want a non root user on our image, to run our apps/processes on."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'# See https://stackoverflow.com/a/55757473/12429735RUN\nENV USER=docker\nENV UID=12345\nENV GID=23456\n\nRUN adduser \\\n    --disabled-password \\\n    --gecos "" \\\n    --home "$(pwd)" \\\n    --ingroup "$USER" \\\n    --no-create-home \\\n    --uid "$UID" \\\n    "$USER"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--disabled-password")," prevents promt for a password"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'--gecos ""'),' circumvents the prompt for "full name" etc.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'--home "$(pwd)"')," sets the users home to the workdir ",(0,r.kt)("strong",{parentName:"li"},"we might not want this in cases")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--no-create-home")," prevents cruft getting copied into the directory from ",(0,r.kt)("em",{parentName:"li"},"/etc/skel"))),(0,r.kt)("h3",{id:"so-we-change-our-dockerfile"},"so we change our Dockerfile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'# 1.step-build the executable binary\n\nFROM golang:alpine AS builder\n\n# Git is required for fetching the dependencies, so we install it\nRUN apk update && apk add --no-cache git\n\n# Create a User with Name/PW stored in envs and set him up\nENV USER=appuser\nENV UID=10001\n\nRUN adduser \\\n    --disabled-password \\\n    --gecos "" \\\n    --home "/nonexistent" \\\n    --shell "/sbin/nologin" \\\n    --no-create-home \\\n    --uid "${UID}" \\\n    "${USER}"\n\n# Set a workingdirectory\nWORKDIR $GOPATH/src/mypackage/myapp\nCOPY . .\n\n# Fetch dependencies\nRUN go get -d -v\n\n# Build the binary\nRUN go build -o /go/bin/hello\n\n# ---------------------- #\n\n# 2.step build a minimal image\n\nFROM scratch\n\n# Import the user and group files from the builder\nCOPY --from=builder /etc/passwd /etc/passwd\nCOPY --from=builder /etc/group /etc/group\n\n# copy our binary, from the build-step, to our new image\nCOPY --from=builder /go/bin/hello /go/bin/hello\n\n# use the new unprivileged user from here on\nUSER appuser:appuser\n\n# run the binary\nENTRYPOINT ["/go/bin/hello"]\n')),(0,r.kt)("h2",{id:"3-name-vs-nametag-vs-namesha256digest"},"3. name vs name:tag vs name@sha256:digest"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"when an image is pulled using only the name, the immage with tag ",(0,r.kt)("inlineCode",{parentName:"li"},"latest")," is pulled. If there is no image with the ",(0,r.kt)("inlineCode",{parentName:"li"},"latest")," tag no image will be pulled.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"docker pull golang\ndocker pull vincepr/bestThing\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tags are ",(0,r.kt)("strong",{parentName:"li"},"NOT")," version numbers. There is no guarantee, golang:1.17.1 will be the same in a few months time. "),(0,r.kt)("li",{parentName:"ul"},'It could happen that the architecture: "amd64" and os: "linux" chanes without us noticing')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"docker pull golang:latest\ndocker pull golang:1.17.1\ndocker pull vincepr/bestThing:2.9.0.0-axh\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a solution can be to use the digest, an immutable id that is created during build time."),(0,r.kt)("li",{parentName:"ul"},"this is called image pinning")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'sudo docker manifest inspect golang --verbose\n\n# Example output\n[\n        {\n                "Ref": "docker.io/library/golang:latest@sha256:bd4a3e7eee6d6ea30b2e27d6c1ac3c56809e78e08c7e44ddf91f8c741091f5ad",\n                "Descriptor": {\n                        "mediaType": "application/vnd.docker.distribution.manifest.v2+json",\n                        "digest": "sha256:bd4a3e7eee6d6ea30b2e27d6c1ac3c56809e78e08c7e44ddf91f8c741091f5ad",\n                        "size": 1796,\n                        "platform": {\n                                "architecture": "amd64",\n                                "os": "linux"\n                        }\n                },\n                ...\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"after getting the sha256 we can use that to pin our exact docker image down:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"docker pull golang@sha256:bd4a3e7eee6d6ea30b2e27d6c1ac3c56809e78e08c7e44ddf91f8c741091f5ad\n\ndocker pull vincepr/bestThing@sha256:543368fb39eebb09d53cdd07e735a73a50b9773ad9019a5563e816d88a75e067\n```\n### some example usecases\n- small scale developing/experimenting on a local machine -> just use name:tag\n- building an image for production, use name@sha254:digest to pull your base images. This ensures the same result for building on different machines\n- if the image was build by your team/company use name:tag. If the image comes from elsewhere prefer name@sha256:digest\n- avoid using latest since it makes rollbacks harder\n\n## 4 using trusted image\nUse a trusted docker image like golang:alpine etc.\n```\nexport DOCKER_CONTENT_TRUST=1 && docker pull sha256:1db127655b32aa559e32ed3754ed2ea735204d967a433e4b605aed1dd44c5084\n```\n\n## Add SSL ca certificates\nin our 1st step we get the certs, in our 2nd. Step we can add them in.\n```Dockerfile\n# Git is required for fetching the dependencies, so we install it\nRUN apk update && apk add --no-cache git ca-certificates && update-ca-certificates\n\n#...\n\n# Import the user and group files from the builder\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n```\n\n## Alternative googleContainer distroless\nfor statically compiled binaries, like go etc, that do not require libc we could also use https://github.com/GoogleContainerTools/distroless/tree/main/base\n\nIt provides:\n- ca-certificates\n- /etc/passwd entry for a root user\n- a /tmp directory\n")))}u.isMDXComponent=!0}}]);