"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[5690],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5573:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},l="Yield in csharp",o={unversionedId:"csharp/examples/Yield",id:"csharp/examples/Yield",title:"Yield in csharp",description:'- lets a stateful method be called mutiple times. "pausing" between each call.',source:"@site/docs/csharp/examples/Yield.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/Yield",permalink:"/md/csharp/examples/Yield",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/Yield.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Token Caching ideas",permalink:"/md/csharp/examples/TokenCachingGeneric"},next:{title:"Serilog and Elasticsearch / Kibana",permalink:"/md/csharp/examples/kibanaSerilogElasticSearch"}},s={},u=[{value:"benefits of yield",id:"benefits-of-yield",level:2},{value:"example of the consumer declaring how many to take",id:"example-of-the-consumer-declaring-how-many-to-take",level:3},{value:"underlying enumerator",id:"underlying-enumerator",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"yield-in-csharp"},"Yield in csharp"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"lets a ",(0,a.kt)("strong",{parentName:"li"},"stateful"),' method be called mutiple times. "pausing" between each call.')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'Console.WriteLine("returning a list");\nvar people = DataAccess.GetPeople();\nforeach(var p in people)\n    Console.WriteLine($"Read {p.FirstName} {p.LastName}");\n\n\nConsole.WriteLine("\\nreturning with yield");\nvar ypeople = DataAccess.GetYieldedPeople();\nforeach(var p in ypeople)\n    Console.WriteLine($"Read {p.FirstName} {p.LastName}");\n\npublic static class DataAccess {\n\n    // we first create all objects, then hold them in memory for the whole duration\n    // and pass down a pointer to that whole object\n    public static IEnumerable<PersonModel> GetPeople() {\n        List<PersonModel> output = new();\n        output.Add(new PersonModel("Tim", "Hernandez"));\n        output.Add(new PersonModel("Adam", "Ondra"));\n        output.Add(new PersonModel("James", "Bod"));\n        return output;\n    }\n\n\n    // with yield we are able to only execute till the yield and return that \n    public static IEnumerable<PersonModel> GetYieldedPeople() {\n        yield return new PersonModel("Tim", "Hernandez");   // the program only runs this line on the first .next() call\n        yield return new PersonModel("Adam", "Ondra");      // and only this line on the 2nd call\n        yield return new PersonModel("James", "Bod");       // and only this line on the last call\n    }\n}\n\npublic class PersonModel\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public  PersonModel(string firstName, string lastName)\n    {\n        FirstName = firstName;\n        LastName = lastName;\n        System.Console.WriteLine($"Initialized user {FirstName} {LastName}");\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"in our logs we can see that we really only created the objects before returning in the 2nd case. While in the first example creating all 3 at once, before any return happens.")),(0,a.kt)("h2",{id:"benefits-of-yield"},"benefits of yield"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"yield does add a bit of overhead. (the state of the method/closure it is run in)"),(0,a.kt)("li",{parentName:"ul"},"memory wise it often can be much more efficient. And allocations, especially on the heap or those long lived gc-objects. If those can be avoided it is always a big benefit"),(0,a.kt)("li",{parentName:"ul"},"Calls of ",(0,a.kt)("inlineCode",{parentName:"li"},".Take(2)")," or ",(0,a.kt)("inlineCode",{parentName:"li"},".FirstOrDefault()")," or ",(0,a.kt)("inlineCode",{parentName:"li"},".TakeLast(1)")," can be used, that do not collect the whole Iterator.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Take(2)")," will only try to take 2 of the iterator (and cast it as an IEnumerable again)"),(0,a.kt)("li",{parentName:"ul"},"while ",(0,a.kt)("inlineCode",{parentName:"li"},"Last()"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"First()"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"LastOrDefault()")," will directly return the object (if it exists)"))),(0,a.kt)("li",{parentName:"ul"},"when working with real ",(0,a.kt)("strong",{parentName:"li"},"databases")," this is a great tool to use together with pagination.")),(0,a.kt)("h3",{id:"example-of-the-consumer-declaring-how-many-to-take"},"example of the consumer declaring how many to take"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// nrs 1-50\nvar primeNumbers = Generators.GetPrimes();\nvar firstNumbers = primeNumbers.Take(50);\nConsole.WriteLine(String.Join("\\n", firstNumbers));\n\n// if we want the next 50-100 we must be explicit like this:\nvar secondNubers = primeNumbers.Skip(50).Take(50); \nforeach (var nr in secondNubers) \n    Console.WriteLine(nr);\n\n\n\npublic class Generators\n{\n    public static IEnumerable<int> GetPrimes()\n    {\n        int counter = 0;\n        \n        while (true)\n        {\n            if (IsPrime(counter))\n            {\n                yield return counter;\n            }\n            counter ++;\n        }\n    }\n\n    private static bool IsPrime(int value)\n    {\n        bool output = true;\n\n        for (int i = 2; i <= value / 2; i++)\n        {\n            if (value % i == 0)\n            {\n                output = false;\n                break;\n            }\n        }\n        return output;\n    }\n}\n')),(0,a.kt)("h2",{id:"underlying-enumerator"},"underlying enumerator"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This is the Iterator that gets used."),(0,a.kt)("li",{parentName:"ul"},'this unlike the IEnumerable "saves it\'s state"')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// the underlying Enumerator\nvar iterator = primeNumbers.GetEnumerator();\nfor (int i=0; i<10; i++) {\n    if(iterator.MoveNext()) {\n        Console.WriteLine(iterator.Current);\n    } else {\n        Console.WriteLine(\"no more elements in Iterator\");\n    }\n}\n\n// the iterator unlike the IEnumerable will remember it's state\niterator.MoveNext();\nConsole.WriteLine('the 11th number: ' + iterator.Current);\n")))}p.isMDXComponent=!0}}]);