"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[6864],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>m});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(r),p=i,m=h["".concat(s,".").concat(p)]||h[p]||d[p]||o;return r?t.createElement(m,a(a({ref:n},u),{},{components:r})):t.createElement(m,a({ref:n},u))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[h]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=r[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5379:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=r(7462),i=(r(7294),r(3905));const o={},a="Compare Interfaces in Csharp",l={unversionedId:"fiae/Programmierung/CSharp/compare",id:"fiae/Programmierung/CSharp/compare",title:"Compare Interfaces in Csharp",description:"List",source:"@site/docs/fiae/Programmierung/CSharp/compare.md",sourceDirName:"fiae/Programmierung/CSharp",slug:"/fiae/Programmierung/CSharp/compare",permalink:"/md/fiae/Programmierung/CSharp/compare",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/fiae/Programmierung/CSharp/compare.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Grundlagen in C`#`",permalink:"/md/fiae/Programmierung/CSharp/basics"},next:{title:"Beispiel Tabelle in C`#`",permalink:"/md/fiae/Programmierung/CSharp/examples/BeispielHotel"}},s={},c=[{value:"List",id:"list",level:2},{value:"SortedList",id:"sortedlist",level:3},{value:"ArrayList",id:"arraylist",level:3},{value:"LINQ",id:"linq",level:2},{value:"HashSet",id:"hashset",level:2}],u={toc:c};function h(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"compare-interfaces-in-csharp"},"Compare Interfaces in Csharp"),(0,i.kt)("h2",{id:"list"},"List"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"dynamic size, unlike array.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// Interface IComparable<T> uses CompareTo() to compare > 2 objects.\ninternal class Buch : IComparable<Buch>{\n    public string Titel { get; set; }\n    public double Preis { get; set; }\n    public uint Jahr { get; set; }\n\n    public Buch(string titel, double preis, uint jahr){\n        Titel = titel;\n        Preis = preis;\n        Jahr = jahr;\n    }\n    public override string ToString(){\n        return $"Titel: {Titel}\\nPreis: {Preis}\\nJahr: {Jahr}\\nGenre: {Genre}\\n";\n    }\n    public override bool Equals(object other){\n        if (other is Buch){\n            Buch o = (Buch)other;\n            return Titel == o.Titel && Preis == o.Preis && Jahr == o.Jahr && Genre == o.Genre;\n        }\n        return base.Equals(other);\n    }\n\n    // IComparable<T> Interface erlaubt es direkt 2 Eintr\xe4ge zu vergleichen und damit direkt \'list.Sort()\' aufzurufen.\n    /// -1  -> other vor this\n    /// ==0 -> other same priority as this\n    /// +1  -> this comes first then other\n    public int CompareTo(Buch other){\n        // Gr\xf6\xdfter Preis zuerst:\n        return -this.Preis.CompareTo(other.Preis);\n\n        // Kleinster Preis zuerst:\n        return this.Preis.CompareTo(other.Preis);\n\n        // Alphabetisch sortiert:\n        return this.Titel.CompareTo(other.Titel);\n    }\n}\n\n// IComparer : Diese Klasse ist die zweite M\xf6glichkeit zu vergleichen. Mithilfe einer externen Klasse vom Typ IComparer<T>\n//  - hier k\xf6nnte f\xfcr jedes Sortierfuntkion (nachTitel, nachPreis etc) eine gesonderte Sortierfunktion erstellt werden\n//  - hier wird die SortPreis klasse an die Sort Methode \xfcbergeben: \'list.Sort(new SortPreis())\'\ninternal class SortPreis : IComparer<Buch>{\n    public int Compare(Buch x, Buch y){\n        return x.Preis.CompareTo(y.Preis);  // aufsteigende Sortierung nach Preis\n    }\n}\n\ninternal class Programm{\nstatic void Main(){\n        List<Buch> list = new List<Buch>();\n            list.Add(new Buch("Der rote Luftballon", 49.99, 2020));\n            list.Add(new Buch("Blumen im Sommerwind", 39.99, 2019));\n            list.Add(new Buch("Und der Rabe lacht", 89.99, 2021));\n            list.Add(new Buch("Von G\xe4rtnern und M\xf6rdern", 79.89, 2018));\n            list.Add(new Buch("Blumen im Sommerwind", 39.99, 2019));\n\n        // .Remove(), .BinarySearch() ... benutzt die object.Equals() methode. Um nicht nur die objekt pointer zu vergleichen \xfcberschreiben wir sie in der Klasse Buch\n        Buch vgl = new Buch("Und der Rabe lacht", 89.99, 2021);\n        int idx = list.BinarySearch(vgl);\n        bool succ = list.Remove(vgl);\n\n        // .Sort() ben\xf6tigt das ICompare Interface und damit die CompareTo() Methode direkt in der Klasse Buch\n        list.Sort();\n        foreach (Buch b in list)\n            Console.WriteLine(b);\n\n        // Alternativ \xfcbergeben wir eine Sortierer-Klasse an .Sort(new sortierer):\n        list.Sort(new SortPreis());\n        foreach (Buch b in list)\n            Console.WriteLine(b);\n    }\n}\n')),(0,i.kt)("h3",{id:"sortedlist"},"SortedList"),(0,i.kt)("p",null,"benutzt standard ",(0,i.kt)("inlineCode",{parentName:"p"},"IComparabler")," f\xfcr das sortieren:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"SortedList<Buch> list = new SortedList<Buch>()\n")),(0,i.kt)("p",null,"benutzt die classe Sort Preis als custom ",(0,i.kt)("inlineCode",{parentName:"p"},"IComparabler")," f\xfcr das sortieren:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"SortedList<Buch> list = new SortedList<Buch>(new SortPreis())\n")),(0,i.kt)("h3",{id:"arraylist"},"ArrayList"),(0,i.kt)("p",null,"ist im Gegensatz zur normalen Liste nicht an einen Typ gebunden. Kann also zugleich verschiedene objekte oder primitve-types aufnehmen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'ArrayList list = new ArrayList()\nlist.Add(new Buch("Der rote Luftballon", 49.99, 2020));\nlist.Add(312);\nlist.Add("Hello World");\n')),(0,i.kt)("h2",{id:"linq"},"LINQ"),(0,i.kt)("p",null,"Suchen und Sortieren im Stiel von SQL."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"unter anderem Sortieren ohne die urspr\xfcngliche Liste zu ver\xe4ndern."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".ForEach()")," "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".Where()")," is the filter() function in csharp."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".Select()")," is the  map() function in csharp."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".Aggregate()")," is the  reduce() function in csharp.")),(0,i.kt)("p",null,"Allgemein:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"var r = Enumerable.Range(1, 10);\n// ForEach to loop over:\nr.ForEach(x => Console.WriteLine(x) );\n\n// map() is Select\nr.Select(x => x + 2);\n\n// reduce() is Aggregate\nr.Aggregate(0, (acc, x) => acc + x);\n\n// filter() is Where\nr.Where(x => x % 2 == 0);\n")),(0,i.kt)("p",null,"Oder anschlie\xdfend an das Beispiel von Oben:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'List<Buch> books = new List<Buch>();\nbooks.Add(new Buch("Der rote Luftballon", 49.99, 2020, Kategorie.HORROR));\nbooks.Add(new Buch("Blumen im Sommerwind", 39.99, 2019, Kategorie.ROMAN));\nbooks.Add(new Buch("Und der Rabe lacht", 89.99, 2021, Kategorie.HORROR));\nbooks.Add(new Buch("Von G\xe4rtnern und M\xf6rdern", 79.89, 2018, Kategorie.KRIMI | Kategorie.HORROR));\nbooks.Add(new Buch("Blumen im Sommerwind", 39.99, 2019, Kategorie.ROMAN));\n\nConsole.WriteLine("----- -----");\n// SELECT * FROM liste\n// Action<T> is an Delegate: public delegate void Action<in Buch>Buch(Buch buch){ }\nbooks.ForEach(buch => Console.WriteLine(buch));\n\nConsole.WriteLine("----- -----");\n// SELECT * FROM liste WHERE preis < 70\nbooks\n    .Where(buch => buch.Preis < 70)\n    .ToList()\n    .ForEach(Buch => Console.WriteLine(Buch));\n\nConsole.WriteLine("----- -----");\n// SELECT titel FROM liste\nbooks\n    .Select(b => b.Titel)\n    .ToList()\n    .ForEach(b => Console.WriteLine(b));\n\nConsole.WriteLine("----- -----");\n// SELECT DISTINCT titel FROM liste\nbooks\n    .Select(b => b.Titel)\n    .Distinct()                         // filter out identical books\n    .ToList() \n    .ForEach(b => Console.WriteLine(b));\n\nConsole.WriteLine("----- -----");\n// SELECT DISTINCT titel FROM liste\nbooks\n    .Where(b => b.Preis>50)\n    .Select(b => b.Titel)\n    .Distinct()                         // filter out identical books\n    .ToList()\n    .ForEach(b => Console.WriteLine(b));\n\nConsole.WriteLine("----- -----");\n// SELECT Count(*) FROM liste WHERE genre = "Horror"\nConsole.WriteLine("Anzahl B\xfccher der Kategorie Horror: " + \n    books.Count(b => b.Genre.HasFlag(Kategorie.HORROR)) \n);\n\nConsole.WriteLine("----- -----");\n// SELECT Average(preis) FROM liste WHERE genre = "Horror"\nConsole.WriteLine("Durschnittlicher Preis der Kategorie Horror: " +\n    books\n        .Where(b => b.Genre.HasFlag(Kategorie.HORROR))\n        .Average(book => book.Preis)\n);\n\nConsole.WriteLine("----- -----");\n// SELECT * FROM liste ORDER BY preis DESC\nbooks\n    .OrderByDescending(b => b.Preis)\n    .ToList()\n    .ForEach(b => Console.WriteLine(b));\n\nConsole.WriteLine("----- -----");\n// Finde alle b\xfccher mit Kategorie==Horror -> Ersetze mit Roman\nbooks\n    .FindAll(b => b.Genre == Kategorie.HORROR)\n    .ForEach(b => b.Genre = Kategorie.ROMAN);\n// ver\xe4nderte B\xfccher-Liste ausgeben:\nbooks.ForEach(buch => Console.WriteLine(buch));\n')),(0,i.kt)("h2",{id:"hashset"},"HashSet"),(0,i.kt)("p",null,"HashSet pr\xfcft ",(0,i.kt)("inlineCode",{parentName:"p"},"mit Equals()")," ob zwei Objekte identisch sind."),(0,i.kt)("p",null,"Jedoch ",(0,i.kt)("strong",{parentName:"p"},"NUR WENN")," die Objekte ",(0,i.kt)("strong",{parentName:"p"},"\xe4hnlich")," sind. ",(0,i.kt)("inlineCode",{parentName:"p"},"GetHashCode()")," liefert die grundlage f\xfcr ",(0,i.kt)("strong",{parentName:"p"},"\xe4hnlichkeit")," ."),(0,i.kt)("p",null,"Standard implementierung: Der HashCode ist die Speicheradresse vom Objekt, somit sind alle Objekte un\xe4hnlich."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Damit m\xfcssen wir also ",(0,i.kt)("inlineCode",{parentName:"li"},"GetHashCode()")," f\xfcr das Buch von oben erg\xe4nzen")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'internal class Buch : IComparable<Buch>{\n    // ... snip ...\n    public override int GetHashCode() {\n        return (int)this.Jahr;\n    }\n}\ninternal class Program{\n    static void Main(){\n        books.Add(new Buch("Der rote Luftballon",  49.99, 2020));\n        books.Add(new Buch("Blumen im Sommerwind", 39.99, 2019));\n        books.Add(new Buch("Blumen im Sommerwind", 39.99, 2019));       // das sollte nicht mehr hinzugef\xfcgt werden.\n        Console.WriteLine("Anzahl: " + books.Count);                    // -> Anzahl: 2\n\n        HashSet<Buch> b2 = new HashSet<Buch> {\n            new Buch("Der rote Luftballon", 49.99, 2020),               // schnittmenge\n            new Buch("Blumen im Sommerwind", 39.99, 2019),              // schnittmenge\n            new Buch("Und der Rabe lacht", 189.99, 2021),               // au\xdferhalb\n        };\n        books.Intersect(b2).ToList().ForEach(b => Console.WriteLine(b));\n    }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Auf HashSet, sowie List sind Methoden wie Intersect, Union etc. m\xf6glich.")))}h.isMDXComponent=!0}}]);