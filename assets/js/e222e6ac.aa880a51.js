"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[8938],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>v});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=o,v=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return r?t.createElement(v,i(i({ref:n},p),{},{components:r})):t.createElement(v,i({ref:n},p))}));function v(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1624:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var t=r(7462),o=(r(7294),r(3905));const a={},i="Passing Env variables to a docker container",l={unversionedId:"webdev/docker/03env",id:"webdev/docker/03env",title:"Passing Env variables to a docker container",description:"directly in the shell",source:"@site/docs/webdev/docker/03env.md",sourceDirName:"webdev/docker",slug:"/webdev/docker/03env",permalink:"/md/webdev/docker/03env",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/webdev/docker/03env.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Minimal docker images from scratch",permalink:"/md/webdev/docker/02scrath"},next:{title:"Docker compose",permalink:"/md/webdev/docker/04compose"}},c={},s=[{value:"directly in the shell",id:"directly-in-the-shell",level:2},{value:".env file",id:"env-file",level:2},{value:"docker-compose",id:"docker-compose",level:2}],p={toc:s};function d(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"passing-env-variables-to-a-docker-container"},"Passing Env variables to a docker container"),(0,o.kt)("h2",{id:"directly-in-the-shell"},"directly in the shell"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can pass environment variables direct to the container with the -e flag.")),(0,o.kt)("p",null,"Example of a bash script, note this will print/store in our bash history."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo docker run -i-e POSTGRES_ENV_USER='userfoo' \\\n-e POSTGRES_ENV_PASSWORD='bar' \\\n-e POSTGRES_ENV_DB_NAME='baz' \\\n-e SITEURL='staging.vincepr.de' \\\n-p 80:8080 \\\n-- name container_name dockerhub_id/some_image\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"if we dont want the values in the command line, we could also pull the value from the current (global)environment\n",(0,o.kt)("inlineCode",{parentName:"li"},"sudo PASSWORD='foo' docker run ... -e PASSWORD"))),(0,o.kt)("h2",{id:"env-file"},".env file"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"/.env1")," file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"USERNAME=mike\nPASSWORD=foobar\nAPI_KEY=SOME_KEY\n")),(0,o.kt)("p",null,"and our shell commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker run --env-file ./env1.list some_image\ndocker run --env-file=.env1 --env-file=.env2 some_image\n")),(0,o.kt)("h2",{id:"docker-compose"},"docker-compose"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"version: '3.9'\n\nservices:\n\n    env_printer:\n        image: 'some_image'\n        environment:\n            - SITEURL=staging.vincepr.de\n            - APIKEY: SOME_KEY  # <- we can also pass in our current env variables like so\n        env_file:\n            - .env1\n            - .env2\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose up"),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"we can test our configuration with values like so: "),"docker-compose --env-file=some_folder/.env config`"))}d.isMDXComponent=!0}}]);