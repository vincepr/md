"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[8274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6353:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={},o="ref, in, out keyword in C",i={unversionedId:"csharp/examples/ref_in_out",id:"csharp/examples/ref_in_out",title:"ref, in, out keyword in C",description:"Basically like ref keyword. Instead of copying like normally for stack-values a reference gets passed.",source:"@site/docs/csharp/examples/ref_in_out.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/ref_in_out",permalink:"/md/csharp/examples/ref_in_out",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/ref_in_out.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Records in C",permalink:"/md/csharp/examples/records"},next:{title:"Span and Benchmarking in C",permalink:"/md/csharp/examples/span"}},s={},u=[{value:"ref-keyword",id:"ref-keyword",level:2},{value:"out-keyword",id:"out-keyword",level:2},{value:"in-keyword",id:"in-keyword",level:2},{value:"When to use",id:"when-to-use",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ref-in-out-keyword-in-c"},"ref, in, out keyword in C#"),(0,a.kt)("p",null,"Basically like ",(0,a.kt)("inlineCode",{parentName:"p"},"ref")," keyword. Instead of copying like normally for stack-values a reference gets passed."),(0,a.kt)("h2",{id:"ref-keyword"},"ref-keyword"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ref doesnt enforce any constraints on what to do with ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," in the below example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"int value = 99;\nExample(ref value);\nConsole.WriteLine(value);   // -> 11\n\nvoid Example(ref int x){\n    x = 11;  // mutates dereferenced original 'value'\n}\n")),(0,a.kt)("h2",{id:"out-keyword"},"out-keyword"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'var couldParse = int.TryParse("123", out int parsedValue);\nConsole.WriteLine(parsedValue); // -> 123\nvar value = 100;\nvar couldParse = int.TryParse("asdf", out value);   // original value gets mutated\nConsole.WriteLine(parsedValue); // -> 0 (the default init value)\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"out enforces us to modify/set ",(0,a.kt)("inlineCode",{parentName:"li"},"x = 11;")," or it wont compile"),(0,a.kt)("li",{parentName:"ul"},"every branch has to set the out value on Exit!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"int value = 99;\nExample(ref value);\nConsole.WriteLine(value);   // -> 11\n\nvoid Example(out int x){\n    x = 11;  // this mutation is enfored with the out keyword\n}\n")),(0,a.kt)("h2",{id:"in-keyword"},"in-keyword"),(0,a.kt)("p",null,"Usecase: Passing down valuetypes (especially big structs) as function parameters will copy each time."),(0,a.kt)("p",null,"this causes a huge memory allocation burden."),(0,a.kt)("p",null,"One could use the ref keyword BUT now the function could mutate the original etc."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we can avoid this by using ",(0,a.kt)("inlineCode",{parentName:"li"},"in"),"."),(0,a.kt)("li",{parentName:"ul"},"this effectively makes it a ref but ",(0,a.kt)("strong",{parentName:"li"},"readonly"),"!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"int value = 99;\nExample(in value);\nvoid Example(in int x){\n    // value = 123;         <- NOT ALLOWED\n    Console.WriteLine(x);   // is allowed\n}\n")),(0,a.kt)("h3",{id:"when-to-use"},"When to use"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"if the struct is bigger than pointer size"),(0,a.kt)("li",{parentName:"ul"},"if using ",(0,a.kt)("inlineCode",{parentName:"li"},"in")," with a struct make sure the struct is ",(0,a.kt)("strong",{parentName:"li"},"readonly")," or defensive copies will degrade performance benefits.")))}p.isMDXComponent=!0}}]);