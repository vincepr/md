"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[5975],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),g=a,m=p["".concat(o,".").concat(g)]||p[g]||d[g]||i;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=g;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},s="Testing in Rust",l={unversionedId:"rust/08testing",id:"rust/08testing",title:"Testing in Rust",description:"- run all tests with cargo test",source:"@site/docs/rust/08testing.md",sourceDirName:"rust",slug:"/rust/08testing",permalink:"/md/rust/08testing",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/rust/08testing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Traits and Lifetime in Rust",permalink:"/md/rust/07lifetime_traits"},next:{title:"Closures and Iterators in Rust",permalink:"/md/rust/09functional"}},o={},u=[{value:"Asserts",id:"asserts",level:2},{value:"Checking for panics",id:"checking-for-panics",level:2},{value:"Controlling Testing routine",id:"controlling-testing-routine",level:2},{value:"Organization, Unit Tests vs Integration Tests",id:"organization-unit-tests-vs-integration-tests",level:2},{value:"Unittests",id:"unittests",level:3},{value:"Integrationtests",id:"integrationtests",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing-in-rust"},"Testing in Rust"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"run all tests with ",(0,a.kt)("inlineCode",{parentName:"li"},"cargo test"))),(0,a.kt)("h2",{id:"asserts"},"Asserts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn add(left: usize, right: usize) -> usize {\n    left + right \n}\n\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn addition() {\n        let result = add(2, 2);\n        assert_eq!(result, 4);\n    }\n\n    #[test]\n    fn should_fail() {\n        panic!("Some Fail")\n    }\n\n    #[test]\n    fn bigger_can_hold_small(){\n        let bigger = Rectangle {\n            width: 10,\n            height: 10,\n        };\n        let smaller = Rectangle {\n            width: 9,\n            height: 9,\n        };\n        let is_true = bigger.can_hold(&smaller);\n        assert!(is_true)\n    }\n\n    #[test]\n    fn smaller_fits_not_bigger(){\n         let bigger = Rectangle {\n            width: 10,\n            height: 10,\n        };\n        let smaller = Rectangle {\n            width: 9,\n            height: 9,\n        };\n        let is_true = smaller.can_hold(&bigger);\n        assert!(is_true)\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"since the test module is a regular module, we need to bring the functions to test into scope with ",(0,a.kt)("inlineCode",{parentName:"li"},"use super::*;")," ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// useful assert macros:\nassert!(true);              // must be true to pass\nassert_eq!(5+5,10);         // must be == to pass\nassert_ne!(true, false);    // must be != to pass\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"values beeing compared like this must implement the ",(0,a.kt)("inlineCode",{parentName:"li"},"PartialEq")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"Debug")," traits to be comparable. For structs and enums we can just add ",(0,a.kt)("inlineCode",{parentName:"li"},"#[derive(PartialEq, Debug)]")," to do this the easiest way.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// custom test-error message:\nresult = String::from("Person: James");\nassert!(\n    result.contains("Bond"),\n    "The result must contain the last name with value \'Bond\', but was only: \'{}\'",\n    result\n);\n')),(0,a.kt)("h2",{id:"checking-for-panics"},"Checking for panics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"using ",(0,a.kt)("inlineCode",{parentName:"li"},"should_panic"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'pub struct Guess {\n    value: i32,\n}\nimpl Guess {\n    pub fn new(val: i32)-> Guess {\n        if val<1 || val>100 {\n            panic!("{} must be between 1 and 100",val)\n        }\n        Guess {\n            value: val,\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    #[should_panic]\n    fn greater_than_100(){\n        Guess::new(999);\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we can narrow down the exact panic using expected: ",(0,a.kt)("inlineCode",{parentName:"li"},'#[should_panic(expected = "must be between 1 and 100")]'))),(0,a.kt)("h2",{id:"controlling-testing-routine"},"Controlling Testing routine"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sometimes it might be neccessary to run the tests one after the other (ex if many write to a file or read from the same file). This can be done by only running test on 1 thread: ",(0,a.kt)("inlineCode",{parentName:"li"},"cargo test -- --test-threads=1")),(0,a.kt)("li",{parentName:"ul"},"include standard output of successful tests: `cargo test -- --show-output"),(0,a.kt)("li",{parentName:"ul"},"only running a subset of tests: ",(0,a.kt)("inlineCode",{parentName:"li"},"cargo test smaller_fits_not_bigger")),(0,a.kt)("li",{parentName:"ul"},"filtering tests, that contain the word ",(0,a.kt)("inlineCode",{parentName:"li"},"bigger")," : ",(0,a.kt)("inlineCode",{parentName:"li"},"cargo test bigger"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[test]\n#[ignore]\nfn expensive_test() {\n    // code that takes an hour to run\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the above test will not run with the default cargo test, to include we ",(0,a.kt)("inlineCode",{parentName:"li"},"cargo test -- --ignored")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"cargo test -- --include-ignored")," for everythging.")),(0,a.kt)("h2",{id:"organization-unit-tests-vs-integration-tests"},"Organization, Unit Tests vs Integration Tests"),(0,a.kt)("h3",{id:"unittests"},"Unittests"),(0,a.kt)("p",null,"Convention is  to create a module named tests in each file to contain the test functions and annotate the module with ",(0,a.kt)("inlineCode",{parentName:"p"},"cfg(test)")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"it is possible in rust to unit test private functions directly.")),(0,a.kt)("h3",{id:"integrationtests"},"Integrationtests"),(0,a.kt)("p",null,"In rust those are external to your library. So they can only call public functions as a user of the library would."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"in the root folder (next to src) create a tests folder and in it a ",(0,a.kt)("inlineCode",{parentName:"li"},"tests/integration_test.rs")," file",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"each file in tests directory is a separate crate, so we need to bring our library into scope for each:")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use adder;      // our library\n\n#[test]\nfn it_adds_two() {\n    assert_eq!(4, adder::add_two(2));\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cargo test")," includes those integration tests. ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo test --test integration_test")," if we want to run just it."),(0,a.kt)("p",null,"Only Library ",(0,a.kt)("inlineCode",{parentName:"p"},"src/lib.rs")," projects can integrate integration tests. Project binaries ",(0,a.kt)("inlineCode",{parentName:"p"},"src/main.rs")," can not.\nThis is one good reason to make the main binary simple logic that just calls the src/lib.rs file."))}p.isMDXComponent=!0}}]);