"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[4899],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,f=d["".concat(s,".").concat(u)]||d[u]||p[u]||o;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={},a="editor Settings",l={unversionedId:"settings/editorSettings",id:"settings/editorSettings",title:"editor Settings",description:"Settings for Vscode",source:"@site/docs/settings/editorSettings.md",sourceDirName:"settings",slug:"/settings/editorSettings",permalink:"/md/settings/editorSettings",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/settings/editorSettings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"basic cli in rust",permalink:"/md/rust/examples/02cli"},next:{title:"install codeserver",permalink:"/md/settings/newvps"}},s={},c=[{value:"Settings for Vscode",id:"settings-for-vscode",level:2},{value:"Settings for Rider, Settings for Intellij-products",id:"settings-for-rider-settings-for-intellij-products",level:2}],m={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"editor-settings"},"editor Settings"),(0,i.kt)("h2",{id:"settings-for-vscode"},"Settings for Vscode"),(0,i.kt)("p",null,"openvscode-server location for the global settings: ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.vscode-remote/data/Machine/settings.json")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "files.autoSave": "afterDelay",\n    "files.simpleDialog.enable": true,\n    "thunder-client.defaultUrl": "http://127.0.0.1:3000/",\n    "terminal.integrated.allowChords": false,\n    "git.autofetch": true,\n    "git.enableSmartCommit": true,\n    "workbench.colorTheme": "Default High Contrast",\n    // vim settings\n    "vim.highlightedyank.enable": true,\n    "vim.highlightedyank.duration": 1000,\n    "vim.handleKeys": {\n        "<C-x>": false,\n        "<C-v>": false,\n        "<C-a>": false,\n        "<C-d>": false,\n        "<C-f>": false,\n    },\n    // For visual mode\n    "vim.visualModeKeyBindings": [\n        {\n        "before": ["<C-c>"],\n        "after": ["\\"", "+", "y"]\n        },\n        {\n        "before": ["<C-v>"], \n        "after":  ["\\"", "+", "p"]\n        }\n    ],\n    // For normal mode\n    "vim.normalModeKeyBindings": [\n        {\n        "before": ["<C-c>"],\n        "after": ["\\"", "+", "y"]\n        },\n        {\n        "before": ["<C-v>"], \n        "after":  ["\\"", "+", "p"]\n        }\n    ],\n    "vim.overrideCopy": false,\n    "vim.sneak": true,\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"keyboard shortcuts - disable both ",(0,i.kt)("inlineCode",{parentName:"li"},"extension.vim_shift+tab")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"extension.vim_tab"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"keybindings.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// Place your key bindings in this file to override the defaults\n[\n    {\n        "key": "shift+tab",\n        "command": "-extension.vim_shift+tab",\n        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != \'Insert\'"\n    },\n    {\n        "key": "tab",\n        "command": "-extension.vim_tab",\n        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != \'Insert\'"\n    }\n]\n')),(0,i.kt)("h2",{id:"settings-for-rider-settings-for-intellij-products"},"Settings for Rider, Settings for Intellij-products"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"choose vim over IDE for the following keys:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// vim specific\nctrl c - vim    // we make this copy and esc in our .ideavim\nctrl d - vim    // move down a half page\nctrl i - vim    // next mouse cursor position\nctrl m - vim    // enables enter in insert mode\nctrl n - vim    // autocomplete next option\nctrl o - vim    // prev mouse cursor position\nctrl p - vim    // autocomplete prev option\nctrl q - vim    // box selection mode\nctrl r - vim    // undo changes gone back with u\nctrl s - vim    // vim sneak\nctrl u - vim    // move up a half page\nctrl [ - vim    // move quickly\nctrl ] - vim    // move quickly\n\nrest use IDE\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"next some added keybindings for my preference:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// non default Keybindings(us keyboard layout)\nctrl+\\      Tool Windows/Terminal\nf1      Main Menu/Navigate/Goto Error/Bookmark Actions/Next Highlighted Error\nf2      rename\n            MainMenu/Refactor/Rename\n            Version Control Systems/Shelve/Rename\n            Version Control Systems/Shelve/Edit Changelist\n            Datbase Explorer/Rename\n            Datbase Explorer/Sessions/Rename Session\n            Git/EditCommitMessage\n            Other/Bookmaks/Edit\n            Other/TableActions/EditTableCell\n            Other/TreeActions/EditTreeNode\nf3      Git/VCS Group/VCS Operations Popup\nctrl+alt+e  rebind what ctrl+e did before\nctrl+e      Navigate/Goto by Name Actions/Go to File\nctrl+alt+1  rebind alt+1\nctrl+alt+2  rebind alt+2\nctrl+alt+3  rebind alt+3\nctrl+alt+4  rebind alt+4\nctrl+alt+5  rebind alt+5\n\nalt+Enter   -> ALSO ctrl+.          // like in vscode\nctrl+shift+enter -> also ctrl+,     // want this quick complete easy to reach\n\nalt+1       Other/Tabs/select tab #1\n...\nalt+5       Other/Tabs/select tab #5\n\n// useful but default\nalt `   version controll\n\n\n// create .ideavimrc\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"create an ",(0,i.kt)("inlineCode",{parentName:"li"},"C\\Users\\vincepr\\.ideavimrc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'set sneak\n\nset visualbell\nset noerrorbells\n\nnnoremap ge :action ShowErrorDescription<cr>\nnnoremap gh :action QuickJavaDoc<cr>\nnnoremap gf :action QuickImplementations<cr>\n\nnnoremap <C-c> "+y<Esc>\nvnoremap <C-c> "+y<Esc>\nxnoremap <C-c> "+y<Esc>\nsnoremap <C-c> "+y<Esc>\n\nremap <C-n> <Action>(GotoClass)\n')))}d.isMDXComponent=!0}}]);