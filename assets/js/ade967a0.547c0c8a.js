"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[5098],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(t),f=a,b=p["".concat(o,".").concat(f)]||p[f]||d[f]||s;return t?r.createElement(b,l(l({ref:n},c),{},{components:t})):r.createElement(b,l({ref:n},c))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=f;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<s;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7991:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const s={},l="Design Patterns",i={unversionedId:"webdev/designpatterns",id:"webdev/designpatterns",title:"Design Patterns",description:"with short self explanatory code examples",source:"@site/docs/webdev/designpatterns.md",sourceDirName:"webdev",slug:"/webdev/designpatterns",permalink:"/md/webdev/designpatterns",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/webdev/designpatterns.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"webdev",permalink:"/md/category/webdev"},next:{title:"expressjs",permalink:"/md/webdev/expressjs"}},o={},u=[{value:"Creational Patterns",id:"creational-patterns",level:2},{value:"Factory",id:"factory",level:3},{value:"Builder Patterns",id:"builder-patterns",level:3},{value:"Singleton",id:"singleton",level:3},{value:"Behavioral Patterns",id:"behavioral-patterns",level:2},{value:"Observer",id:"observer",level:3},{value:"Iterator",id:"iterator",level:3},{value:"Strategy Pattern - Open-Closed Principle",id:"strategy-pattern---open-closed-principle",level:3},{value:"Structural Patterns",id:"structural-patterns",level:2},{value:"Adapter",id:"adapter",level:3},{value:"Facade",id:"facade",level:3}],c={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"design-patterns"},"Design Patterns"),(0,a.kt)("p",null,"with short self explanatory code examples"),(0,a.kt)("h2",{id:"creational-patterns"},"Creational Patterns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"")),(0,a.kt)("h3",{id:"factory"},"Factory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Python"},'class Burger:\n    def __init__(self, ingredients):\n        self.ingredients = ingredients\n    def make(self):\n        print(self.ingredients)\n\nclass BurgerFactory:\n    def createcheeseBurger(self):\n        ingredients = ["patty", "cheese", "patty"]\n        return Burger(ingredients)\n\n    def createVeganBurger(self):\n        ingredients = ["patty", "lettuce", "vegan-patty"]\n        return Burger(ingredients)\n\n    def createDeluxeBurger(self):\n        ingredients = ["patty", "cheese", "patty", "secret-sauce"]\n        return Burger(ingredients)\n\nBuFa = BurgerFactory()\nBuFa.createCheeseBurger().make()\nBuFa.createDeluxeBurger().make()\n')),(0,a.kt)("h3",{id:"builder-patterns"},"Builder Patterns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'class Burger:\n    def __init__(self):\n        self.buns = None\n        self.patty = None\n        self.cheese = None\n\n    def setBuns(self, bunStyle):\n        self.buns = bunStyle\n\n    def setPatty(self, pattyStyle):\n        self.buns = pattyStyle\n\n    def setCheese(self, cheeseStyle):\n        self.buns = cheeseStyle\n\nclass BurgerBuilder:\n    def __init__(self):\n        self.burger = Burger()\n    \n    def addBuns(self, bunStyle):\n        self.burger.setBuns(bunStyle)\n        return self\n\n    def addPatty(self, pattyStyle):\n        self.burger.setPatty(pattyStyle)\n        return self\n\n    def addCheese(self, cheeseStyle):\n        self.burger.setCheese(cheeseyStyle)\n        return self\n    \n    def build(self):\n        return self.burger\n\nburger = BurgerBuilder()\n            .addBuns("sesame")\n            .addPatty("vegan-patty")\n            .addCheese("american cheese")\n            .build()\n')),(0,a.kt)("h3",{id:"singleton"},"Singleton"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'ex shared "global space"')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'class ApplicationState:\n    instance = None\n\n    def __init(self):\n        self.isLoggedIn = False\n    \n    @staticmethod\n    def getAppState():\n        # check if there already is another Instance running:\n        if not ApplicationState.instance:\n            # if not we create one\n            ApplicationState.instance = ApplicationState()\n        # then we create the already existing/freshly created Instance\n        return ApplicationState.instance\n\nappState1 = ApplicationState.getAppState()\nprint(appState1.isLoggedIn) # prints False\n\nappState2 = ApplicationState.getAppState()\nappState1.isLoggedIn = True\n\nprint(appState1.isLoggedIn) # prints True\nprint(appState2.isLoggedIn) # prints True \n# since appState 1 and 2 both "share" the one truth of the isLoggedIn state\n')),(0,a.kt)("h2",{id:"behavioral-patterns"},"Behavioral Patterns"),(0,a.kt)("h3",{id:"observer"},"Observer"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"aka Publisher & Subscriber - Pattern"),(0,a.kt)("li",{parentName:"ul"},"example Youtube subscriber notifications")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'# the Publisher\nclass YoutubeChannel:\n    def __init__(self, name):\n        self.name = name\n        self.subscribers = []\n    \n    def subscribe (self, sub):\n        self.subscribers.append(sub)\n    \n    def notify(self, event):\n        for sub in self.subscribers:\n            sub.sendNotification(self.name, event)\n\n# define the Subscriber interface:\nfrom abc import ABC, abstractmethod\nclass YoutubeSubscribers(ABC):\n    @abstractmethod\n    def sendNotification(self, event):\n        pass\n\n# One of the Subscribers using the above interface\nclass YoubeUser(YoutubeSubscriber):\n    def __init__(self, name):\n        self.name = name\n    \n    def sendNotification(self, channel, event):\n        print(f"User {self.name} received notification from {channel}: new {event} is available!")\n\n# example\nchannel = YoutubeChannel("Cats\'nDogs")\n\nchannel.subscribe(YoutubeUser("Paul#123"))\nchannel.subscribe(YoutubeUser("Dan#653"))\nchannel.subscribe(YoutubeUser("Lana#574"))\n\nchannel.notify("A new Cat-Video")\n')),(0,a.kt)("h3",{id:"iterator"},"Iterator"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'example "linked list" or "binary search tree"')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\nclass LinkedList:\n    def __init__(self, head):\n        self.head = head\n        self.cur = None\n    \n    # define Iterator\n    def __iter__(self):\n        self.cur = self.head\n        return self\n    \n    # Iterate to next\n    def __next__(self):\n        if self.cur:\n            val = self.cur.val\n            self.cur = self.cur.next\n            return val\n        else:\n            raise StopIteration\n\n# fill a list\nhead = ListNode(1)\nhead.next = ListNode(2)\nhead.next.next = ListNode(3)\nmyList = LinkedList(head)\n\n# iterate trough said list\nfor n in myList:\n    print(n)\n")),(0,a.kt)("h3",{id:"strategy-pattern---open-closed-principle"},"Strategy Pattern - Open-Closed Principle"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"open for extension"),(0,a.kt)("li",{parentName:"ul"},"closed for modification"),(0,a.kt)("li",{parentName:"ul"},"ex. filter functionality"),(0,a.kt)("li",{parentName:"ul"},"easy to add additional functinaly (ex. filter by isPrime()  etc...)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"for abc import ABC, abstractmethod\n\nclass FilterStrategy(ABC):\n    @abstractmethod\n    def removeValue(self, val):\n        pass\n\nclass RemoveNegativeStrategy(FilterStrategy):\n    def removeValue(self, val):\n        return val < 0\n\nclass RemoveOddStrategy(FilterStrategy):\n    def removeValue(self, val):\n        return abs(val)%2\n\nclass Values:\n    def __init__(self, vals):\n        if not strategy.removeValue(n):\n            res.appen(n)\n        return res\n\nvalues = Values({-7, -4, -1, 0, 2, 6, 9})\n\nprint(values.filter(RemoveNegativeStrategy()))      # [ 0, 2, 6, 9]\nprint(values.filter(RemoveOddStrategy()))           # [-4, 0, 2, 6]\n")),(0,a.kt)("h2",{id:"structural-patterns"},"Structural Patterns"),(0,a.kt)("h3",{id:"adapter"},"Adapter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"class UsbCable:\n    def __init__(self):\n        self.isPlugged = False\n    \n    def plugUsb(self):\n        self.isPlugged = True\n\nclass UsbPort:\n    def __init__(self):\n        self.portAvailable = True\n    \n    def plug(self, usb):\n        if self.portvailable:\n            usb.plugUsb()\n            self.portAvailable = False\n\n# usbcables can plug directly only into usb ports\nusbCable = UsbCable()\nusbPort1 = UsbPort()\nusbPort1.plug(usbCable)\n\nclass MicroUsbCable:\n    def __init__(self):\n        self.isPlugged = False\n    \n    def plugMicroUsb(self):\n        self.isPlugged = True \n\nclass MicroToUsbAdapter(UsbCable):\n    def __init__(self, microUsbCable):\n        self.microUsbCable = microUsbCable\n        self.microUsbCable.plugMicroUsb()\n\n# mow MicroUsb and Usb can connect via an adapter\nmicroToUsbAdapter = MicroToUsbAdapter(MicroUsbCable())\nusbPort2 = UsbPort()\nusbPort2.plug(microToUsbAdapter)\n")),(0,a.kt)("h3",{id:"facade"},"Facade"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"wrapper class to abstract lower level details. "),(0,a.kt)("li",{parentName:"ul"},"ex. API that is exposed over some http requests")))}p.isMDXComponent=!0}}]);