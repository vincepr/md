"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[2379],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3837:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const s={},i="part5 - NGINX Api-Gateway",o={unversionedId:"csharp/examples/Microservices/part5-NGINX-Gateway",id:"csharp/examples/Microservices/part5-NGINX-Gateway",title:"part5 - NGINX Api-Gateway",description:"- from the following repo//github.com/kubernetes/ingress-nginx we get:",source:"@site/docs/csharp/examples/Microservices/part5-NGINX-Gateway.md",sourceDirName:"csharp/examples/Microservices",slug:"/csharp/examples/Microservices/part5-NGINX-Gateway",permalink:"/md/csharp/examples/Microservices/part5-NGINX-Gateway",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/Microservices/part5-NGINX-Gateway.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"part4 - CommandsService",permalink:"/md/csharp/examples/Microservices/part4-commandsService"},next:{title:"part6 - Sql inside Kubernetes",permalink:"/md/csharp/examples/Microservices/part6-sqlKubernetes"}},l={},p=[],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"part5---nginx-api-gateway"},"part5 - NGINX Api-Gateway"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"from the following repo: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/kubernetes/ingress-nginx"},"https://github.com/kubernetes/ingress-nginx")," we get:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"once everything has set up (will take some time), if we ",(0,a.kt)("inlineCode",{parentName:"li"},"kubectl get deployment/pods")," the new ingress pod will not show up.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"this is because of namespaces. We used the ",(0,a.kt)("strong",{parentName:"li"},"default")," one for everything so far. While ",(0,a.kt)("strong",{parentName:"li"},"ingress-nginx")," got just created with the previous apply."))),(0,a.kt)("li",{parentName:"ul"},"the following command will show us the 2 setup steps and the currently-active pod:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl get pods --namespace=ingress-nginx\n# NAME                                        READY   STATUS      RESTARTS   AGE\n# ingress-nginx-admission-create-44pp4        0/1     Completed   0          4m49s \n# ingress-nginx-admission-patch-vff6h         0/1     Completed   0          4m49s \n# ingress-nginx-controller-778d4c6454-s2qv8   1/1     Running     0          4m49s \n\nkubectl get pods --namespace=ingress-nginx\n# NAME                                 TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n# ingress-nginx-controller             LoadBalancer   10.96.167.71    localhost     80:31303/TCP,443:32350/TCP   8m54s\n# ingress-nginx-controller-admission   ClusterIP      10.99.150.154   <none>        443/TCP                      8m54s\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we create ",(0,a.kt)("inlineCode",{parentName:"li"},"K8S/ingress-srv.yaml")," to declare our Api-Gateway routing:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# in this file we basically define the routing\n# that the ingress API-Gateway will use\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-srv\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/use-regex: 'true'\n## we define the rules of our routing\nspec:\n  rules:\n  ## we want to use our loopback adress here, we will make the 'acme.com' point tot that\n  ## - we add \"127.0.0.1 acme.com\" to \n    - host: acme.com\n      http:\n        paths:\n        ## this is the endpoint where we can get/getById/Post platforms\n          - path: /api/platforms\n            pathType: Prefix\n            backend:\n              service:\n                name: platforms-clusterip-srv\n                port:\n                  number: 80\n          ## this is the endpoint where the signal from platforms->commands gets send\n          - path: /api/c/platforms\n            pathType: Prefix\n            backend:\n              service:\n                name: commands-clusterip-srv\n                port:\n                  number: 80\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we add the folowing line to ",(0,a.kt)("inlineCode",{parentName:"li"},"C:\\Windows\\System32\\drivers\\etc\\hosts")),(0,a.kt)("li",{parentName:"ul"},"were basically hardcoding this DNS entry, that should always get priority over a DNS lookup")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"127.0.0.1 acme.com\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"now we apply those settings:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl apply -f K8S/ingress-srv.yaml\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"now we can directly hit our gateway: ",(0,a.kt)("inlineCode",{parentName:"li"},"http://acme.com/api/platforms/")," using postman.")))}m.isMDXComponent=!0}}]);