"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[5676],{3905:(e,n,t)=>{t.d(n,{Zo:()=>E,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},E=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",o={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,E=d(e,["components","mdxType","originalType","parentName"]),m=u(t),g=a,f=m["".concat(s,".").concat(g)]||m[g]||o[g]||i;return t?r.createElement(f,l(l({ref:n},E),{},{components:t})):r.createElement(f,l({ref:n},E))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=g;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d[m]="string"==typeof e?e:a,l[1]=d;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4722:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={},l="Projektarbeit Datenbanken",d={unversionedId:"fiae/sql/proj_db_krankenhaus/README",id:"fiae/sql/proj_db_krankenhaus/README",title:"Projektarbeit Datenbanken",description:"Krankenhaus Anforderungen:",source:"@site/docs/fiae/sql/proj_db_krankenhaus/README.md",sourceDirName:"fiae/sql/proj_db_krankenhaus",slug:"/fiae/sql/proj_db_krankenhaus/",permalink:"/md/fiae/sql/proj_db_krankenhaus/",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/fiae/sql/proj_db_krankenhaus/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"sql",permalink:"/md/fiae/sql/"},next:{title:"Windows Grundlagen",permalink:"/md/fiae/windows/grundlagen"}},s={},u=[{value:"Krankenhaus Anforderungen:",id:"krankenhaus-anforderungen",level:2},{value:"1. Konzeption und Erstellen des ER-Diagrammes",id:"1-konzeption-und-erstellen-des-er-diagrammes",level:2},{value:"2. Erstellung des Relationenmodells",id:"2-erstellung-des-relationenmodells",level:2},{value:"# 3.1 SQL- CREATE DATABASE, CREATE TABLES",id:"-31-sql--create-database-create-tables",level:2},{value:"# 3.2 SQL fill test-data to test queries",id:"-32-sql-fill-test-data-to-test-queries",level:2},{value:"# 3.3 VIEWS of required SELECT queries",id:"-33-views-of-required-select-queries",level:2}],E={toc:u};function m(e){let{components:n,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},E,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"projektarbeit-datenbanken"},"Projektarbeit Datenbanken"),(0,a.kt)("h2",{id:"krankenhaus-anforderungen"},"Krankenhaus Anforderungen:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Krankenhaus Abteilungsverwaltung"),"\nIn einem Krankenhaus soll eine Datenbank zur Abteilungsverwaltung eingerichtet werden. Wichtige\nInformationen \xfcber Patienten, \xc4rtze und Schwestern sollen damit abfragbar sein.\nDie Datenbank soll in der Lage sein, folgende Informationen zu liefern:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Welche \xc4rzte behandeln welche Patienten?"),(0,a.kt)("li",{parentName:"ul"},"Welches Zimmer kann einem neuen Patienten zugeordnet werden?"),(0,a.kt)("li",{parentName:"ul"},"Wie viele freie Zimmer hat die Chirurgie heute?"),(0,a.kt)("li",{parentName:"ul"},"Welche \xc4rzte arbeiten in der HNO-Abteilung?"),(0,a.kt)("li",{parentName:"ul"},'F\xfcr welches Zimmer ist Oberschwester "Hilde" zust\xe4ndig?')),(0,a.kt)("p",null,"Hinweise: Ein Zimmer ist genau zu einer Abteilung zugeordnet. Jeder Arzt und jedes Mitglied des\nPflegepersonals ist genau einer Abteilung zugeordnet.\nEntit\xe4ten aus dem Text: Patient, Arzt, Pflegepersonal, Zimmer, Abteilung"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Erstellen Sie ein entsprechendes ER-Diagramm mit Attributen.  "),(0,a.kt)("li",{parentName:"ul"},"\xdcberf\xfchren Sie das ER-Diagramm in das relationale Modell.  "),(0,a.kt)("li",{parentName:"ul"},"Danach erstellen Sie die Datenbank mit SQL-Anweisungen.",(0,a.kt)("br",{parentName:"li"}),"Speichern Sie die Anweisungen in einer Textdatei.  "),(0,a.kt)("li",{parentName:"ul"},"Formulieren Sie Abfragen und speichern diese als VIEW ab, die die oben genannten Fragen beantworten.  "),(0,a.kt)("li",{parentName:"ul"},"Erstellen Sie ein Dokument (eine Seite) indem Sie Ihre Vorgehensweise beschreiben.  "),(0,a.kt)("li",{parentName:"ul"},"In einer Pr\xe4sentation (maximal 15 Minuten) mit 8-10 Folien beschreiben\nSie Ihr Datenbankmodell, begr\xfcnden Ihre Vorgehensweise,",(0,a.kt)("br",{parentName:"li"}),"beschreiben Ihre Umsetzung in SQL und geben ein Fazit,",(0,a.kt)("br",{parentName:"li"}),"ob die oben genannten Fragen umgesetzt sind.  ")),(0,a.kt)("h1",{id:"pr\xe4sentation"},"Pr\xe4sentation:"),(0,a.kt)("p",null,(0,a.kt)("a",{target:"_blank",href:t(4991).Z},"Powerpoint")),(0,a.kt)("h1",{id:"dokumentation"},"Dokumentation"),(0,a.kt)("p",null,"1) Konzeption und Erstellen des ER-Diagrammes\n2) Erstellung des Relationenmodells\n3) Erstellung der SQL Befehle"),(0,a.kt)("h2",{id:"1-konzeption-und-erstellen-des-er-diagrammes"},"1. Konzeption und Erstellen des ER-Diagrammes"),(0,a.kt)("p",null,"Erstellen eines ersten ER-Entwurfes anhand der Anforderungen."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"ER Erstentwurf",src:t(8370).Z,width:"882",height:"1054"})),(0,a.kt)("p",null,"\xdcberpr\xfcfen ob alle Anforderung von diesem Entwurf abgedeckt werden.",(0,a.kt)("br",{parentName:"p"}),"\n","Anpassung des Modells an die Anforderungen n\xf6tig:  "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"ER Finale Version",src:t(111).Z,width:"2182",height:"927"})),(0,a.kt)("h2",{id:"2-erstellung-des-relationenmodells"},"2. Erstellung des Relationenmodells"),(0,a.kt)("p",null,"Aufl\xf6sen der n-m Beziehungen in gesonderten Tabellen mit passenden attributen.  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"behandlung_arzt zwischen Tabellen aufenthalt und arzt"),(0,a.kt)("li",{parentName:"ul"},"behandlung_pflegekraft zwischen Tabellen aufenthalt und pflegekraft")),(0,a.kt)("p",null,"Festlegen der Prim\xe4r und Fremdschl\xfcssel und ihrer Zugeh\xf6rigkeit.",(0,a.kt)("br",{parentName:"p"}),"\n","erstellen des Relationenmodells. Anschlie\xdfend \xfcberpr\xfcfen ob alle Anforderung von diesem Entwurf abgedeckt werden."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Relationen Modell",src:t(8099).Z,width:"1642",height:"773"})),(0,a.kt)("h2",{id:"-31-sql--create-database-create-tables"},"# 3.1 SQL- CREATE DATABASE, CREATE TABLES"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\n-- Create DATABASE --\nDROP DATABASE IF EXISTS kh_abteilungsverwaltung;                    #delete existing database to start from clean state\nCREATE DATABASE kh_abteilungsverwaltung;\nUSE kh_abteilungsverwaltung;\n\n-- Create Tables --\nCREATE TABLE \n    abteilung(id INT AUTO_INCREMENT PRIMARY KEY, \n        bezeichnung VARCHAR(60)\n);\n\nCREATE TABLE \n    pflegekraft(id INT AUTO_INCREMENT PRIMARY KEY, \n        vorname VARCHAR(60), nachname VARCHAR(60),\n        abteilung_id INT, \n        FOREIGN KEY (abteilung_id) REFERENCES abteilung(id)\n);\n\nCREATE TABLE \n    arzt(id INT AUTO_INCREMENT PRIMARY KEY, \n        vorname VARCHAR(60), nachname VARCHAR(60),\n        abteilung_id INT, \n        FOREIGN KEY (abteilung_id) REFERENCES abteilung(id)\n);\n\nCREATE TABLE \n    zimmer(id INT AUTO_INCREMENT PRIMARY KEY, \n        stockwerk INT,\n        abteilung_id INT, \n        FOREIGN KEY (abteilung_id) REFERENCES abteilung(id)\n);\n\nCREATE TABLE \n    patient(id INT AUTO_INCREMENT PRIMARY KEY, \n        vorname VARCHAR(60), nachname VARCHAR(60), krankenkasse VARCHAR(30)\n);\n\nCREATE TABLE \n    aufenthalt(id INT AUTO_INCREMENT PRIMARY KEY, \n        datum_aufnahme DATE,\n        datum_entlassung DATE,\n        zimmer_id INT,\n        patient_id INT,\n        FOREIGN KEY (zimmer_id) REFERENCES zimmer(id),\n        FOREIGN KEY (patient_id) REFERENCES patient(id)\n);\nCREATE TABLE \n    behandlung_pflegekraft(id INT AUTO_INCREMENT PRIMARY KEY, \n        pflegekraft_id INT,\n        aufenthalt_id INT, \n        FOREIGN KEY (pflegekraft_id) REFERENCES pflegekraft(id),\n        FOREIGN KEY (aufenthalt_id) REFERENCES aufenthalt(id)\n);\n\nCREATE TABLE \n    behandlung_arzt(id INT AUTO_INCREMENT PRIMARY KEY, \n        arzt_id INT,\n        aufenthalt_id INT, \n        FOREIGN KEY (arzt_id) REFERENCES arzt(id),\n        FOREIGN KEY (aufenthalt_id) REFERENCES aufenthalt(id)\n);\n\n\n")),(0,a.kt)("h2",{id:"-32-sql-fill-test-data-to-test-queries"},"# 3.2 SQL fill test-data to test queries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'-- INSERT data into tables. Test data to test for correct behavior --\nINSERT INTO \n    abteilung(bezeichnung)\nVALUES\n    ("HNO"), \n    ("Chirurgie")\n;\n\nINSERT INTO \n    pflegekraft(vorname, nachname, abteilung_id)\nVALUES\n    ("Hilde", "Bingen", 1),\n    ("Gertrude", "Smith", 2),\n    ("Adam", "Sanders", 1)\n;\n\nINSERT INTO \n    arzt(vorname, nachname, abteilung_id)\nVALUES\n    ("Dieter", "Ohrenarzt", 1),\n    ("Dennis", "Knochenbrecher", 2)\n;\n\nINSERT INTO                                 #5 Zimmer im 1OG f\xfcr HNO, 4 Zimmer im 2OG f\xfcr Chirurgie\n    zimmer(stockwerk, abteilung_id)\nVALUES\n    (1, 1),\n    (1, 1),\n    (1, 1),\n    (1, 1),\n    (1, 1),\n    (2, 2),\n    (2, 2),\n    (2, 2),\n    (2, 2)\n;\n\nINSERT INTO \n    patient(vorname, nachname, krankenkasse)\nVALUES\n    ("Paula", "Friedrichs", "AOK-04351-156547"),\n    ("Peter", "Horst", "TK-00503-125125"),\n    ("Tropfende", "Nase", "TK-00503-125125"),\n    ("Taubes", "Ohr", "TK-00503-125125")\n;\n\n-- patienten die schon wieder entlassen wurden\nINSERT INTO \n    aufenthalt(datum_aufnahme, datum_entlassung, zimmer_id, patient_id)\nVALUES\n    ("2021-12-1", "2021-12-20", 3, 1)\n;\n\n-- patienten die noch in behandlung sind\nINSERT INTO \n    aufenthalt(datum_aufnahme, zimmer_id, patient_id)\nVALUES\n    ("2022-1-5", 6, 1),\n    ("2022-1-8", 8, 2),\n    ("2022-1-19", 1, 3),\n    ("2022-2-22", 2, 4)\n;\n\n-- behandlungen die die \xc4rtzte vorgenommen haben. Liefert Ergebnisse f\xfcr erste Anfrage\nINSERT INTO \n    behandlung_arzt(arzt_id, aufenthalt_id)\nVALUES\n    (1, 1),                                     #patient wurde 2 mal von HANO arzt behandelt\n    (1, 1),\n    (2, 2),                                     #chirurgischer Eingriff arzt\n    (2, 3),                                     #chirurgischer Eingriff arzt\n    (1, 4),                                     #hno Eingriff arzt\n    (1, 5),                                     #hno Eingriff arzt\n    (1, 5)                                     #hno  Eingriff arzt\n;\n\n')),(0,a.kt)("h2",{id:"-33-views-of-required-select-queries"},"# 3.3 VIEWS of required SELECT queries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'-- create views for querries --\n-- Welche \xc4rzte behandeln welche Patienten --\nCREATE VIEW v1 AS\nSELECT arzt.id AS ArztID, arzt.nachname AS ArztNachname, arzt.vorname AS ArztVorname, \n        patient.id as PatientID, patient.nachname, patient.vorname\n    from arzt \n    INNER JOIN behandlung_arzt ON arzt.id=arzt_id\n    INNER JOIN aufenthalt ON aufenthalt.id=aufenthalt_id\n    INNER JOIN patient ON patient.id=patient_id\n    WHERE datum_entlassung IS null                          # filter out already released patients\n    GROUP BY arzt.id, patient.id                            # filter out double entries where doc did multiple procedures\n;\n\n-- Welches Zimmer kann einem neuen Patienten zugeordnet werden? --\nCREATE VIEW v2 AS\nSELECT zimmer.id                                                    #Liste aller freien Zimmer gesucht\nfrom zimmer \nLEFT JOIN (\n    SELECT zimmer.id AS id                                  # alle zimmer die momentan belegt sind\n    FROM zimmer\n    INNER JOIN aufenthalt ON zimmer.id=zimmer_id\n    WHERE datum_entlassung IS NULL\n) AS t2 On zimmer.id = t2.id\nWHERE t2.id is null                                         # alle zimmer die momentan frei sind\n;\n\n\n-- Wie viele freie Zimmer hat die Chirurgie heute? --\nCREATE VIEW v3 AS\nSELECT COUNT(*)                                             # modify query from above\nfrom zimmer \nLEFT JOIN (\n    SELECT zimmer.id AS id\n    FROM zimmer\n    INNER JOIN aufenthalt ON zimmer.id=zimmer_id\n    WHERE datum_entlassung IS NULL\n) AS t2 On zimmer.id = t2.id\nINNER JOIN abteilung ON abteilung.id=abteilung_id\nWHERE t2.id is null AND abteilung.bezeichnung="Chirurgie"\n;\n\n-- Welche \xc4rzte arbeiten in der HNO-Abteilung --\nCREATE VIEW v4 AS\nSELECT arzt.*\nFROM arzt\nINNER JOIN abteilung ON abteilung.id= abteilung_id\nWHERE abteilung.bezeichnung="HNO"\n;\n\n-- F\xfcr welche Zimmer ist Oberschwerster "Hilde" zust\xe4ndig--\nCREATE VIEW v5 AS\nselect zimmer.id AS ZimmerNr, zimmer.stockwerk, pflegekraft.vorname\nFROM pflegekraft\nINNER JOIN abteilung ON pflegekraft.abteilung_id=abteilung.id\nRIGHT JOIN zimmer    ON zimmer.abteilung_id     =abteilung.id\nWHERE pflegekraft.vorname = "Hilde"\n;\n\n\n\n-- use querries with test-data --\nSELECT * FROM v1 \n;-- Welche \xc4rzte behandeln welche Patienten:\n\nSELECT * FROM v2\n;-- Welches Zimmer kann einem neuen Patienten zugeordnet werden?:\n\n\nSELECT * FROM v3\n;-- Wie viele freie Zimmer hat die Chirurgie heute?:\n\n\nSELECT * FROM v4\n;-- Welche \xc4rzte arbeiten in der HNO-Abteilung:\n\n\nSELECT * FROM v5\n;-- F\xfcr welche Zimmer ist Oberschwerster "Hilde" zust\xe4ndig:\n\n\n\n-- clear  test-datasets from tables, to get to a clean state--\n#just clear all rows, keep tables, go from indside to outside because of references\n\nDELETE FROM behandlung_arzt;\nDELETE FROM behandlung_pflegekraft;\nDELETE FROM aufenthalt;\nDELETE FROM patient;\nDELETE FROM zimmer;\nDELETE FROM arzt;\nDELETE FROM pflegekraft;\nDELETE FROM abteilung;\n\n\n')))}m.isMDXComponent=!0},4991:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/files/Datenbank_Krankenhaus-2fdb372087469381c3621651be595c40.pptx"},8370:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/ER0-fb2c5439d78b54f703c4100de929e430.png"},111:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/ER1-a73d22cbca71973afc84b438264be51c.png"},8099:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/RM0-59d6f6ccaf709ed0b71b71f118afb599.png"}}]);