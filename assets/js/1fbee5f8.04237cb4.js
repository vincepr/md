"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[2770],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,v=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(v,o(o({ref:t},p),{},{components:n})):a.createElement(v,o({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3257:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={},o="Delegates in Csharp",l={unversionedId:"csharp/examples/Delegate",id:"csharp/examples/Delegate",title:"Delegates in Csharp",description:"- functions as values",source:"@site/docs/csharp/examples/Delegate.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/Delegate",permalink:"/md/csharp/examples/Delegate",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/Delegate.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deconstruction in Csharp",permalink:"/md/csharp/examples/Deconstruction"},next:{title:"Feature Flag in Csharp",permalink:"/md/csharp/examples/FeatureFlag"}},c={},s=[{value:"Special Delegates Func and Action",id:"special-delegates-func-and-action",level:2},{value:"Action",id:"action",level:3},{value:"Func",id:"func",level:3}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"delegates-in-csharp"},"Delegates in Csharp"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"functions as values"),(0,r.kt)("li",{parentName:"ul"},"Reusability of code becomes really easy.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// a bit like an Interface for functions, we first declare the shape (here void with no params)\npublic delegate void MoveAction();\n\n// then we have Functions that can implement (have same signature) than our delegate\npublic void MoveUp() => "Moving upwards".Dump();\npublic void MoveDown() => "Moving upwards".Dump();\npublic void MoveLeft() => "Moving Leftw".Dump();\npublic void MoveRight() => "Moving Right".Dump();\n\n\n// a queue of moves, executed on the next frame or something like that:\npublic void ChainMovements(MoveAction[] moves) {\n    foreach(MoveAction move in moves){\n        if (move is not null) move();   // we can just call it like this \n    }\n    // move.Invoke() // this is just legacy syntax. sames as move() above.\n}\n\npublic static void main(string[] args) {\n    MoveAction[] moves = {MoveUp, MoveDown, MoveUp, MoveLeft, MoveLeft};\n    ChainMovements(moves);\n\n    // we can also create an instance like this:\n    var doMoveUp = new MoveAction(MoveUp);\n    doMoveUp();\n    // - its basically an object wrapping nothing but the function\n\n}\n')),(0,r.kt)("h2",{id:"special-delegates-func-and-action"},"Special Delegates Func and Action"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Again a generic Delegate."),(0,r.kt)("li",{parentName:"ul"},"Has void as return type.")),(0,r.kt)("h3",{id:"action"},"Action"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"Action<int> printNumber = n => n.Dump();\n\n// and here with a tuple\nAction<string, int> printAdress = (adr, nr) => Console.Writeline(addr+nr);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Makes it clearer that our delegate action is void.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"in the above example we could have used just ",(0,r.kt)("inlineCode",{parentName:"li"},"ChainMovements(Action[] moves)")),(0,r.kt)("li",{parentName:"ul"},"this way it is not neccessary to look up exactly what MoveAction's signature is etc...")))),(0,r.kt)("h3",{id:"func"},"Func"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Basically a func is just a generic Delegate."),(0,r.kt)("li",{parentName:"ul"},"Func has a Return type.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"System.Func<int, int, int> add (int x, int y) => x + y;\nadd(1,100).Dump();  // Prints 101\n\n// \nSystem.Func<int, int>\n")))}u.isMDXComponent=!0}}]);