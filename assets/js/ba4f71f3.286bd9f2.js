"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[1210],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=s,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:s,i[1]=o;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9777:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=n(7462),s=(n(7294),n(3905));const a={},i="Api integration testing in Csharp",o={unversionedId:"csharp/examples/refactoring/api_testing_integration_testing",id:"csharp/examples/refactoring/api_testing_integration_testing",title:"Api integration testing in Csharp",description:"first some basic examples",source:"@site/docs/csharp/examples/refactoring/api_testing_integration_testing.md",sourceDirName:"csharp/examples/refactoring",slug:"/csharp/examples/refactoring/api_testing_integration_testing",permalink:"/md/csharp/examples/refactoring/api_testing_integration_testing",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/refactoring/api_testing_integration_testing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ref, in, out keyword in Csharp",permalink:"/md/csharp/examples/ref_in_out"},next:{title:"Part 1 - Refactoring exercise in Csharp",permalink:"/md/csharp/examples/refactoring/example1_refactoring"}},p={},l=[{value:"first some basic examples",id:"first-some-basic-examples",level:2},{value:"An more involved testing scenario",id:"an-more-involved-testing-scenario",level:2}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"api-integration-testing-in-csharp"},"Api integration testing in Csharp"),(0,s.kt)("h2",{id:"first-some-basic-examples"},"first some basic examples"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'var builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\napp.MapGet("/", () => "Hello World!");\napp.MapGet("/sum", (int? n1, int? n2) => n1 + n2);\napp.Run();\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'public class SimpleTesting{\n    [TestMethod]\n    public async Task DefaultRoute_ReturnsHelloWorld(){\n        var webAppFactory = new WebApplicationFactory<Program>();\n        _httpClient = webAppFactory.CreateDefaultClient();\n        var response = await _httpClient.GetAsync("");\n        string result = await response.Content.ReadAsStringAsync();\n        Assert.AreEqual("Hello World!", result);\n    }\n\n    [TestMethod]\n    public async Task Sum_Returns24(){\n        var webAppFactory = new WebApplicationFactory<Program>();\n        _httpClient = webAppFactory.CreateDefaultClient();\n        var response = await _httpClient.GetAsync("/sum?n1=10&n2=14");\n        int result = await response.Content.ReadAsStringAsync();\n        Assert.AreEqual(16, result);\n    }\n}\n')),(0,s.kt)("h2",{id:"an-more-involved-testing-scenario"},"An more involved testing scenario"),(0,s.kt)("p",null,"For a theoretical Api that does some Auth, uses JWT etc..."),(0,s.kt)("p",null,"Packages used:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Microsoft.AspNetCore.Mvc.Testing")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Microsoft.AspNetCore.App"))),(0,s.kt)("p",null,"IntegrationTest.cs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'public class IntegrationTest\n{\n    protected readonly HttpClient TestClient;\n    \n    protected IntegrationTest(){\n        var appFactory = new WebApplicationFactory<Startup>()\n            .WithWebHostBuilder(builder =>\n                {\n                    builder.ConfigureServices(services =>\n                    {\n                        services.RemoveAll(typeof(DataContext));\n                        services.AddDbContext<DataContext>(options => { options.UseInMemoryDatabase("TestDb"); });\n                    });\n                });\n        \n        TestClient = appFactory.CreateClient();\n    }\n\n    protected async Task AutenticateAsync(){\n        TestClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", await GetJwtAsync());\n    }\n\n    protected async Task<PostResponse> CreatePostAsync(CreatePostRequest request){\n        var response = await TestClient.PostAsJsonAsync(ApiRoutes.Posts.Create, request);\n        return await response.Content.ReadAsAsync<PostResponse>();\n    }\n\n    private async Task<string> GetJwtAsync(){\n        var response = await TestClient.PostAsJsonAsync(ApiRoutes.Identity.Register, new UserRegistrationRequest{\n            Email = "test@integration.com",\n            Password = "SomePass1234!"\n        });\n\n        var registrationResponse = await response.Content.ReadAsAsync<AuthSuccessResponse>();\n        return registrationResponse.Token;\n    }\n}\n')),(0,s.kt)("p",null,"PostsControllerTests.cs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cs"},'public class PostsControllerTests : IntegrationTest{\n    [Fact]\n    public async Task GetAll_WithoutAnyPosts_ReturnsEmptyResponse(){\n        // Arrange\n        await AutenticateAsync();\n\n        // Act\n        var response = await TestClient.GetAsync(ApiRoutes.Posts.GetAll);\n\n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\n        (await response.Content.ReadAsAsync<List<Post>>()).Should().BeEmpty();\n    }\n\n    [Fact]\n    public async Task Get_ReturnsPost_WhenPostExistsInTheDatabase(){\n        // Arrange\n        await AutenticateAsync();\n        var createdPost = await CreatePostAsync(new CreatePostRequest {Name = "Test post"});\n\n        // Act\n        var response = await TestClient.GetAsync(ApiRoutes.Posts.Get.Replace("{postId}", createdPost.Id.ToString()));\n        \n        // Assert\n        response.StatusCode.Should().Be(HttpStatusCode.OK);\n        var returnedPost = await response.Content.ReadAsAsync<Post>();\n        returnedPost.Id.Should().Be(createdPost.Id);\n        returnedPost.Name.Should().Be("Test post");\n    }\n}\n')))}u.isMDXComponent=!0}}]);