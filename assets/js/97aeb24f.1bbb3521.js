"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[8149],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,k=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(k,s(s({ref:t},u),{},{components:n})):r.createElement(k,s({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5566:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={},s="part3 - Kubernetes - aka K8S",i={unversionedId:"csharp/examples/Microservices/part3-kubernetes",id:"csharp/examples/Microservices/part3-kubernetes",title:"part3 - Kubernetes - aka K8S",description:"what we want out of kubernetes",source:"@site/docs/csharp/examples/Microservices/part3-kubernetes.md",sourceDirName:"csharp/examples/Microservices",slug:"/csharp/examples/Microservices/part3-kubernetes",permalink:"/md/csharp/examples/Microservices/part3-kubernetes",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/Microservices/part3-kubernetes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"part2 - Platform Service",permalink:"/md/csharp/examples/Microservices/part2-platformservice"},next:{title:"part4 - CommandsService",permalink:"/md/csharp/examples/Microservices/part4-commandsService"}},l={},p=[{value:"what we want out of kubernetes",id:"what-we-want-out-of-kubernetes",level:2},{value:"Notes on Architecture",id:"notes-on-architecture",level:2},{value:"Kubernetes Services",id:"kubernetes-services",level:3},{value:"creating our first deploymend",id:"creating-our-first-deploymend",level:2},{value:"Kubernetes has a desired End State",id:"kubernetes-has-a-desired-end-state",level:2},{value:"Creating the Node Port",id:"creating-the-node-port",level:2}],u={toc:p};function c(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"part3---kubernetes---aka-k8s"},"part3 - Kubernetes - aka K8S"),(0,a.kt)("h2",{id:"what-we-want-out-of-kubernetes"},"what we want out of kubernetes"),(0,a.kt)("p",null,"Kubernetes is our Container-Orchestrator, making sure everything is running as it should"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"containers get spun up in the right order"),(0,a.kt)("li",{parentName:"ul"},"make sure containers continue to run (ex after a crash)"),(0,a.kt)("li",{parentName:"ul"},"scales in the right way")),(0,a.kt)("h2",{id:"notes-on-architecture"},"Notes on Architecture"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Alt text",src:n(2915).Z,width:"1280",height:"960"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Cluster")," - a group of servers/VM's that we run on. In this case we just have our desktop as our one Cluster we run everyhing on."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Node")," - Splits up our Cluster into more parts. Ex. in Azure/Google-Cloud we might end up with different nodes we run our stuff on. In this project we just use one Node."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pod")," - Is used to host and run Containers. A pod can in theory run multiple containers. We will use just one Pod per service. (we only have 2 of those anyways)"),(0,a.kt)("h3",{id:"kubernetes-services"},"Kubernetes Services"),(0,a.kt)("p",null,"Services that Kubernetes provides for us:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Node Port")," - used only for development purpose. Quickly maps a internal port and makes it accessible for us on our dev desktop machine."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Cluster Ip(-Service)")," - Attatches to a Pod and again Maps Ports from inside the container to ones inside our Node/Cluster. Only used for container to container communication."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Ingress Nginx Controller")," - a API Gateway. (the proper way to make our Endpoints accessible, replacing our dev only NodePort). This connects directly with the Pods (not trough the Cluster IPs)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Ingress Nginx Load Balancer")," - Connects our API Gateway to the outside"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Persistent Volume Claim")," - since everything (but the SQL DB) is stateless we must use a persistent volume. This will make our DB persist trough Reboots etc..."),(0,a.kt)("h2",{id:"creating-our-first-deploymend"},"creating our first deploymend"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"platforms-depl.yaml"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: platforms-depl\nspec:\n  # replicas are basically horizontal scaling (ex multiple api containers that run at the same time etc...)\n  replicas: 1\n  # selector and template are defining the template were creating\n  selector:\n    matchLabels:\n      app: platformservice\n  template:\n    metadata:\n      labels:\n        app: platformservice\n    spec:\n      containers:\n        ## we use our previously created docker containers here\n        - name: platformservice\n          image: vincepr/platformservice:latest\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we start DockerDesktop and make sure our Kubernetes is running")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl version\ncd K8s\n\nkubectl apply -f platforms-depl.yaml\nkubectl get deployments\n# NAME             READY   UP-TO-DATE   AVAILABLE   AGE\n# platforms-depl   1/1     1            1           32s\n\nkubectl get pods\n# NAME                              READY   STATUS    RESTARTS   AGE\n# platforms-depl-85677fb59d-nx2zq   1/1     Running   0          77s\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"if we check our running containers in VscodeExtension, ",(0,a.kt)("inlineCode",{parentName:"li"},"docker ps")," or in DockerDesktop now there should up our (by Kubernetes managed running container: ",(0,a.kt)("inlineCode",{parentName:"li"},"vincepr/platformservice@sha236......"),")")),(0,a.kt)("h2",{id:"kubernetes-has-a-desired-end-state"},"Kubernetes has a desired End State"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Alt text",src:n(4968).Z,width:"1748",height:"894"}),"\nWhen we now stop or delete our container. Kubernetes will do it's best to get back to the desired state. In this case coming back to ",(0,a.kt)("inlineCode",{parentName:"p"},"replicas: 1"),". So it will instantly start a new container back up."),(0,a.kt)("p",null,"To shut it down for good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl get deployments\nkubectl delete deployment platforms-depl\n")),(0,a.kt)("h2",{id:"creating-the-node-port"},"Creating the Node Port"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"platforms-np-srv.yaml"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# our NodePort (for devironment only) to quickly connect into our Cluster/Node\napiVersion: v1\nkind: Service\nmetadata:\n  # the name of it when we work at the command line:\n  name: platformnpservice-srv\nspec:\n  type: NodePort\n  # the NodePort needs to know what Pod it is targeting to\n  selector:\n    app: platformservice\n  ports:\n    - name: platformservice\n      protocol: TCP\n      port: 80\n      targetPort: 80\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"then we start it ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl apply -f ./K8S/platforms-np-srv.yaml\n\nkubectl get services\n# NAME                    TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\n# kubernetes              ClusterIP   10.96.0.1      <none>        443/TCP        24h\n# platformnpservice-srv   NodePort    10.103.51.73   <none>        80:30085/TCP   36s\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"now we can Postman http://localhost:30085/api/platforms and it will reach into the container, that is maintained by kubernetes")))}c.isMDXComponent=!0},2915:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/KubernetesArchitecture.excalidraw-0ef99bf1ccd53f5a5b06026272a38ff5.svg"},4968:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/kubernetesDeleteContainer-da512f2bd3ae9d2928273934227ebfa8.png"}}]);