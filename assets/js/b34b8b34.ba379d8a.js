"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[8912],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var u=a.createContext({}),p=function(t){var e=a.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(u.Provider,{value:e},t.children)},c="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,u=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),c=p(n),d=r,g=c["".concat(u,".").concat(d)]||c[d]||s[d]||i;return n?a.createElement(g,l(l({ref:e},m),{},{components:n})):a.createElement(g,l({ref:e},m))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o[c]="string"==typeof t?t:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9834:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},l="Evaluating Data Structures",o={unversionedId:"datastructures/Evaluating",id:"datastructures/Evaluating",title:"Evaluating Data Structures",description:"From good to bad:",source:"@site/docs/datastructures/Evaluating.md",sourceDirName:"datastructures",slug:"/datastructures/Evaluating",permalink:"/md/datastructures/Evaluating",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/datastructures/Evaluating.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PostgreSQL with donet",permalink:"/md/csharp/sql/postgre"},next:{title:"Binary Search Tree",permalink:"/md/datastructures/binary_search_tree"}},u={},p=[{value:"Properties",id:"properties",level:2},{value:"Examples",id:"examples",level:2},{value:"Constant time",id:"constant-time",level:3},{value:"Linear time",id:"linear-time",level:3},{value:"Quadratic time",id:"quadratic-time",level:3}],m={toc:p};function c(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"evaluating-data-structures"},"Evaluating Data Structures"),(0,r.kt)("h1",{id:"big-o-notation"},"Big-O Notation"),(0,r.kt)("p",null,"From good to bad:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"time"),(0,r.kt)("th",{parentName:"tr",align:null},"notation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Constant Time"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Logarithmic Time"),(0,r.kt)("td",{parentName:"tr",align:null},"O(lon(n))")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Linear Time"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Linearithmic Time"),(0,r.kt)("td",{parentName:"tr",align:null},"O(nlog(n))")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Quadratic Time"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n\xb2)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Cubic Time"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n\xb3)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Exponential Time"),(0,r.kt)("td",{parentName:"tr",align:null},"O(b^n)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Factorial Time"),(0,r.kt)("td",{parentName:"tr",align:null},"O(n!)")))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("p",null,"Big O notation only cares about the limit, when n gets really big. So "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"constants get ignored ",(0,r.kt)("inlineCode",{parentName:"li"},"9999 + n\xb3 -> O(n\xb3)")),(0,r.kt)("li",{parentName:"ul"},"factors get ignored ",(0,r.kt)("inlineCode",{parentName:"li"},"9999*n\xb2 -> O(n\xb2)")),(0,r.kt)("li",{parentName:"ul"},"only the fastest growing factor becomes the O-Value ",(0,r.kt)("inlineCode",{parentName:"li"},"log(n)\u2074 + 2n\u2074 + 88n\xb2 -> O(n\u2074)"))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"constant-time"},"Constant time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"c = a + 5*b / 12;\n// since the loop always runs the same ammount of times -> constant (not coupled with n)\nfor (int i=0; i<99999; i++) {\n    //do things here\n}\n")),(0,r.kt)("h3",{id:"linear-time"},"Linear time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"var i = 0;\nwhile (i<n) {\n    i = i+1;\n}\n\ni = 0;\nwhile (i<n) {\n    i + 1000;\n}\n")),(0,r.kt)("p",null,"both blocks are ",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)")),(0,r.kt)("h3",{id:"quadratic-time"},"Quadratic time"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"for (int i=0; i<n; i++) {\n    for (int j=0; j<n; j++){\n        // ...\n    }\n}\n// fn(n) = n*n = n\xb2 -> O(fn(n)) = O(n\xb2)\n\nfor (int i=0; i<n; i++) {\n    for (int j=i; j<n; j++) {    //replaced  =0 with =i\n        // ...\n    }\n}\n// fn(n) = n*n = n\xb2 -> O(fn(n)) = O(n\xb2)\n")))}c.isMDXComponent=!0}}]);