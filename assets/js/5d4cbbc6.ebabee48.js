"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[6037],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||l;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4059:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const l={},o="part 9 - gRPC",i={unversionedId:"csharp/examples/Microservices/part9-gRPC",id:"csharp/examples/Microservices/part9-gRPC",title:"part 9 - gRPC",description:"In our usecase we want to use Grpc on the CommandsService startup to reach out to PlatformService and Sync up their states.",source:"@site/docs/csharp/examples/Microservices/part9-gRPC.md",sourceDirName:"csharp/examples/Microservices",slug:"/csharp/examples/Microservices/part9-gRPC",permalink:"/md/csharp/examples/Microservices/part9-gRPC",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/Microservices/part9-gRPC.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"part 8 - Message Bus with RabbitMQ",permalink:"/md/csharp/examples/Microservices/part8-rabbitMQ"},next:{title:"Pattern Matching in Csharp",permalink:"/md/csharp/examples/PatternMatching"}},p={},s=[{value:"Notes on gRPC",id:"notes-on-grpc",level:2},{value:"Https workarround",id:"https-workarround",level:2},{value:"Add packages",id:"add-packages",level:2},{value:"Create the proto-file",id:"create-the-proto-file",level:2},{value:"Code in PlatformService",id:"code-in-platformservice",level:2},{value:"Code in CommandsService",id:"code-in-commandsservice",level:2},{value:"testing localy",id:"testing-localy",level:2},{value:"rebuilding and rolling out to Kubernetes",id:"rebuilding-and-rolling-out-to-kubernetes",level:2},{value:"Finished State",id:"finished-state",level:2},{value:"Missing from this Project",id:"missing-from-this-project",level:2},{value:"Cleanup",id:"cleanup",level:2}],c={toc:s};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"part-9---grpc"},"part 9 - gRPC"),(0,a.kt)("p",null,"In our usecase we want to use Grpc on the CommandsService startup to reach out to PlatformService and Sync up their states."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PlatformService runs on a InMemoryDb. So while it will get and add new Platforms created while it is running. It has no knowledge on the ",(0,a.kt)("inlineCode",{parentName:"li"},"starting state"),". ")),(0,a.kt)("h2",{id:"notes-on-grpc"},"Notes on gRPC"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"google Rmove Procedure Call"),(0,a.kt)("li",{parentName:"ul"},"uses HTTP2 to transport binary messages. (faster compared to json)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"so it requires TLS - HTTPS! "))),(0,a.kt)("li",{parentName:"ul"},"Relies on ",(0,a.kt)("strong",{parentName:"li"},'"Protocol Buffers"')," (aka Protobuf) - these define the contract between the endpoints",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},".proto")," file has the type information of the data"))),(0,a.kt)("li",{parentName:"ul"},"gRPC is used mostly for Server to Server communication")),(0,a.kt)("h2",{id:"https-workarround"},"Https workarround"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"since setting up https inside our cluster is quite a bit of work we explicitly only use http inside our cluster"),(0,a.kt)("li",{parentName:"ul"},"at the end of our ",(0,a.kt)("inlineCode",{parentName:"li"},"platforms-depl.yaml")," we add another Port to the ClusterIpService")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"    - name: platformgrpc\n        protocol: TCP\n        port: 666\n        targetPort: 666\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"and apply it with ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl apply -f K8S/platforms-depl.yaml"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"we explicitly tell gRPC to only use http (otherwise it would default to https) in ",(0,a.kt)("inlineCode",{parentName:"p"},"appsettings.Production.json")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  "Kestrel": {\n    "Endpoints": {\n      "Grpc": {\n        "Protocols": "Http2",\n        "Url": "http://platforms-clusterip-srv:666"\n      },\n      "webApi": {\n        "Protocols": "Http1",\n        "Url": "http://platforms-clusterip-srv:80"\n      }\n    }\n  }\n')),(0,a.kt)("h2",{id:"add-packages"},"Add packages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"for our PlatformService we add:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"dotnet add package Grpc.AspNetCore\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"for our CommandsService we add:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"dotnet add package Grpc.Tools\ndotnet add package Grpc.Net.Client\ndotnet add package Google.Protobuf\n")),(0,a.kt)("h2",{id:"create-the-proto-file"},"Create the proto-file"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"in ",(0,a.kt)("inlineCode",{parentName:"li"},"PlatformsService/Protos/platforms.proto")," we define the contract and what can get passed on the grpc-connection:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-proto"},"syntax = \"proto3\";\n\n// just the top level namespace of this project, gets used for the autogenerated code:\noption csharp_namespace = \"PlatformService\";\n\n// we define the service/endpoint\nservice GrpcPlatform {\n    rpc GetAllPlatforms(GetAllRequests) returns (PlatformResponse);\n}\n\n// this endpoint's input has no parameters but we still have to name it:\nmessage GetAllRequests {}\n\n// We define the shape of data that gets passed back (we wanna pass an array of those)\nmessage GrpcPlatformModel {\n    int32 platformId = 1;   // the 1 is not the value but the 'index' or position of where in GrpPlatformModel this gets placed\n    string name = 2;\n    string publisher = 3;\n}\n\n// an array of the above 'objects'\nmessage PlatformResponse {\n    repeated GrpcPlatformModel platform = 1;\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PlatformService/PlatformService.csproj")," we add an Item group. This will tell the project the path to the proto-file and what type were running as (server/client)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'  <ItemGroup>\n    <Protobuf Include="Protos/platforms.proto" GrpcServices="Server" />\n  </ItemGroup>\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we dotnet build the Platformservice and if everything worked, we should be able to look into the autogenerated code: ",(0,a.kt)("inlineCode",{parentName:"li"},"PlatformService/obj/Debug/net7.0/Protos/Platforms.cs")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"PlatformService/obj/Debug/net7.0/Protos/PlatformsGrpc.cs"))),(0,a.kt)("h2",{id:"code-in-platformservice"},"Code in PlatformService"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we add grpc for dependency injection in our ",(0,a.kt)("inlineCode",{parentName:"li"},"PlatformService/Program.cs")," and add ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'builder.Services.AddGrpc();\n// ...\napp.MapControllers();   // this maps all our Controllers by default\napp.MapGrpcService<GrpcPlatformService>();  // the grpcService we have to Add manually\n// we (this is optinal) serve the protobuf file to the client, so they could infer everyhing from it:\napp.MapGet(\n    "/protos/platforms.proto",\n    async context => {\n        await context.Response.WriteAsync(File.ReadAllText("Protos/platforms.proto"));\n    }\n);\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we add a mapping to the grpc model in ",(0,a.kt)("inlineCode",{parentName:"li"},"PlatformService/Profiles/PlatformsProfile.cs"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// mapping for gRPC:\nCreateMap<Platform, GrpcPlatformModel>()\n    // even platformId is camelcase in .proto the generated one gets 'csharped' to PlatformId\n    .ForMember(dest => dest.PlatformId, opt => opt.MapFrom(src => src.Id))\n    // the other ForMembers would get inferred (because same name) but we do it just to show it more clear\n    .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))\n    .ForMember(dest => dest.Publisher, opt => opt.MapFrom(src => src.Publisher));\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PlatformService/SyncDataService/Grpc/GrpcPlatformService.cs"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public class GrpcPlatformService : GrpcPlatform.GrpcPlatformBase {\n    private readonly IPlatformRepo _repository;\n    private readonly IMapper _mapper;\n\n    public GrpcPlatformService(IPlatformRepo repository, IMapper mapper) {\n        _repository = repository;\n        _mapper = mapper;\n    }\n\n    public override Task<PlatformResponse> GetAllPlatforms(GetAllRequests request, ServerCallContext context) {\n        var response = new PlatformResponse();\n        var platforms = _repository.GetPlatforms();\n        foreach (var p in platforms) {\n            // map from our.Platform -> grpc.Platfrom and add those to grpc.Response\n            response.Platform.Add(_mapper.Map<GrpcPlatformModel>(p));\n        }\n        return Task.FromResult(response);\n    }\n}\n")),(0,a.kt)("h2",{id:"code-in-commandsservice"},"Code in CommandsService"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"appsettings.Development.json")," we take the adress from our ",(0,a.kt)("inlineCode",{parentName:"li"},"PlatformService/Properties/launchSettings.json -> https.url"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  "GrpcPlatform": "https://localhost:5001"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"appsettings.Production.json"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  "GrpcPlatform": "http://platforms-clusterip-srv:666"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we copy over ",(0,a.kt)("inlineCode",{parentName:"li"},"cp PatformService/Protos/platforms.proto CommandsService/Proto/platforms.proto")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CommandsService/CommandsService.csproj")," we also add (this time with Yype Client)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'  <ItemGroup>\n    <Protobuf Include="Protos/platforms.proto" GrpcServices="Client" />\n  </ItemGroup>\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we add Mappings to ",(0,a.kt)("inlineCode",{parentName:"li"},"CommandsService/Profiles/CommandsProfile.cs"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// gRPC-Mappings:\nCreateMap<GrpcPlatformModel, Platform>()\n    .ForMember(dest => dest.ExternalId, opt => opt.MapFrom(src => src.PlatformId))\n    .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))\n    // we explicitly tell that we want noting to map to our.Platform.Commands\n    .ForMember(dest => dest.Commands, opt => opt.Ignore());\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we create ",(0,a.kt)("inlineCode",{parentName:"li"},"CommandsService/SyncDataServices/Grpc/IPlatformDataClient.cs"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface IPlatformDataClient {\n    IEnumerable<Platform> ReturnAllPlatforms();\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we add the Scoped dependency injection:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"builder.Services.AddScoped<IPlatformDataClient, PlatformDataClient>();\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"and implement the above",(0,a.kt)("inlineCode",{parentName:"li"},"CommandsService/SyncDataServices/Grpc/PlatformDataClient.cs")," ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public class PlatformDataClient : IPlatformDataClient\n{\n    private readonly IConfiguration _config;\n    private readonly IMapper _mapper;\n\n    public PlatformDataClient(IConfiguration config, IMapper mapper)\n    {\n        _config = config;\n        _mapper = mapper;\n    }\n    public IEnumerable<Platform> ReturnAllPlatforms()\n    {\n        Console.WriteLine($"--\x3e Calling gRPC Service {_config["GrpcPlatform"]}");\n        var channel = GrpcChannel.ForAddress(_config["GrpcPlatform"]!);\n        var client = new GrpcPlatform.GrpcPlatformClient(channel);\n        var request = new GetAllRequests(); // even though this is empty we still have to build it and send it over\n\n        try\n        {\n            var reply = client.GetAllPlatforms(request);\n            return _mapper.Map<IEnumerable<Platform>>(reply.Platform);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine($"--\x3e Could not call gRPC Server! {e.Message}");\n            return Enumerable.Empty<Platform>();\n        }\n    }\n}\n')),(0,a.kt)("h2",{id:"testing-localy"},"testing localy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'because of grpc we need to use https now. So we use the "https"-Profile from ',(0,a.kt)("inlineCode",{parentName:"li"},"Properties/launchSettings.json")),(0,a.kt)("li",{parentName:"ul"},"we pass down the ",(0,a.kt)("inlineCode",{parentName:"li"},"-lp https")," flag to dotnet   ",(0,a.kt)("inlineCode",{parentName:"li"},"dotnet run --project ./CommandsService --launch-profile https")),(0,a.kt)("li",{parentName:"ul"},"we spin first the Platform- then the CommandsServer up. We should get a log of:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--\x3e Seeding new platforms\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"indicating that CommandsService connected via gRPC, got it's data and used that to seed itself. Thus synchronizing the state of the two services."),(0,a.kt)("li",{parentName:"ul"},"we hit ",(0,a.kt)("inlineCode",{parentName:"li"},"http://localhost:6000/api/c/platforms")," with a GET request resulting in all those Platforms.")),(0,a.kt)("h2",{id:"rebuilding-and-rolling-out-to-kubernetes"},"rebuilding and rolling out to Kubernetes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker build -t vincepr/platformservice ./PlatformService\ndocker push vincepr/platformservice \nkubectl rollout restart deployment platforms-depl\n\ndocker build -t vincepr/commandservice ./CommandsService\ndocker push vincepr/commandservice\nkubectl rollout restart deployment commands-depl\n")),(0,a.kt)("h2",{id:"finished-state"},"Finished State"),(0,a.kt)("p",null,"So both servers are now totally in Sync. (assuming the PlatformService is up when the Commands one starts up and on startup connects via gRPC trying to sync the data up)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Afterwards the Message Bus keeps the Services synced up"),(0,a.kt)("li",{parentName:"ul"},"We dont handle the case gracefully of the CommandsService starting first. But a simple retry policy should solve this.")),(0,a.kt)("h2",{id:"missing-from-this-project"},"Missing from this Project"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"HTTPS/TLS inside the Kubernetes-Cluster"),(0,a.kt)("li",{parentName:"ul"},"Service Discovery. Without having to hardcode the Adresses in config files, making the Services connect automatic."),(0,a.kt)("li",{parentName:"ul"},"In CommandsService Error Recovery for SeedingData, when PlatformService is initially unresponsive. Atm we would just do nothing then only fill the ones we get later from MessageBus. Better would be to reattempt Syncing of data.")),(0,a.kt)("h2",{id:"cleanup"},"Cleanup"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"following command removes all Kubernetes containers etc:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"make clean\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"then we just delete the DockerContainers with for example DockerDesktop")))}m.isMDXComponent=!0}}]);