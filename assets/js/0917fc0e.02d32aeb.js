"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[9462],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={},o="IEnumerator - IEnumerable",l={unversionedId:"csharp/examples/IEnumerator",id:"csharp/examples/IEnumerator",title:"IEnumerator - IEnumerable",description:"- A really basic Stack implementation.",source:"@site/docs/csharp/examples/IEnumerator.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/IEnumerator",permalink:"/md/csharp/examples/IEnumerator",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/IEnumerator.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Minimal Api compared to MVC",permalink:"/md/csharp/api_basics"},next:{title:"Dapper",permalink:"/md/csharp/examples/dapper"}},s={},c=[{value:"IEnumerable",id:"ienumerable",level:2},{value:"IEnumerator",id:"ienumerator",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ienumerator---ienumerable"},"IEnumerator - IEnumerable"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A really basic Stack implementation.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public sealed class BasicStack<T>\n{\n    private T[] arrayData;\n    private const int defaultSize = 30;\n    private int index;\n    public BasicStack(int size = defaultSize) \n    {\n        if (size <= 0) throw new ArgumentOutOfRangeException(nameof(size), "Size must be bigger than 0");\n        this.arrayData = new T[size];\n        this.index = 0;\n    }\n    public T Pop() \n    {\n        if (index == 0) throw new InvalidOperationException("Tried to remove from Empty Stack");\n        index--;\n        return arrayData[index];\n    }\n    public void Push(T value) \n    {\n        // Dynamic Array doubles in Size when full (but NEVER Shrinks!):\n        if (index == arrayData.Length) {\n            T[] newArr = new T[2*arrayData.Length];\n            Array.Copy(arrayData, newArr, arrayData.Length);\n            arrayData = newArr;\n        }\n        arrayData[index++] = value;\n    }\n    public override string ToString(){\n        return "Stack<"+string.Join(", ", arrayData)+">";\n    }\n}\n')),(0,a.kt)("h2",{id:"ienumerable"},"IEnumerable"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"To be able to ",(0,a.kt)("inlineCode",{parentName:"li"},"foreach(var value in stack)")," we need the IEnumerable"),(0,a.kt)("li",{parentName:"ul"},"This Interface needs 2 methods: ",(0,a.kt)("inlineCode",{parentName:"li"},"IEnumerator GetEnumerator()")," ",(0,a.kt)("inlineCode",{parentName:"li"},"IEnumerator IEnumerable.GetEnumerator()"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The 2nd method would be enought for a non-generic class. But since this is a generic we need both Implementations")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"public sealed class BasicStack<T>\n{\n    /// ...\n    // To satisfy IEnumerable we have to provide the following 2 Methods to the iterator:\n    public IEnumerator GetEnumerator()\n    {\n    return new  Enumerator<T>(this);\n    }\n\n    IEnumerator<T> IEnumerable<T>.GetEnumerator()\n    {\n    return n    ew Enumerator<T>(this);\n    }\n}\n")),(0,a.kt)("h2",{id:"ienumerator"},"IEnumerator"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This is the iterator that gets created and used under the hood for ",(0,a.kt)("inlineCode",{parentName:"li"},"foreach")," etc."),(0,a.kt)("li",{parentName:"ul"},"We had to add a version to the BasicStack and increment it whenever the original Stack changes. To Keep track of when the iterator and the Stack are out of sync.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'namespace RS_DATASTRUCTURES.Stack;\nusing System.Collections;\n\npublic sealed class BasicStack<T> : IEnumerable<T>\n{\n    private T[] arrayData;\n    private const int defaultSize = 30;\n    private int index;\n    private int version;    /// this version is needed to make the Enumerator throw if accessed after change\n    public BasicStack(int size = defaultSize) \n    {\n        if (size <= 0) throw new ArgumentOutOfRangeException(nameof(size), "Size must be bigger than 0");\n        this.arrayData = new T[size];\n        this.index = 0;\n        this.version = 0;\n    }\n    public T Pop() \n    {\n        if (index == 0) throw new InvalidOperationException("Tried to remove from Empty Stack");\n        index--;\n        version++;\n        return arrayData[index];\n    }\n    public void Push(T value) \n    {\n        // Dynamic Array doubles in Size when full (but NEVER Shrinks!):\n        if (index == arrayData.Length) {\n            T[] newArr = new T[2*arrayData.Length];\n            Array.Copy(arrayData, newArr, arrayData.Length);\n            arrayData = newArr;\n        }\n        arrayData[index++] = value;\n        version++;\n    }\n    public override string ToString(){\n        return "Stack<"+string.Join(", ", arrayData)+">";\n    }\n    // To satisfy IEnumerable we have to provide the following 2 Methods to the iterator:\n    public IEnumerator GetEnumerator()\n    {\n        return new Enumerator<T>(this);\n    }\n\n    IEnumerator<T> IEnumerable<T>.GetEnumerator()\n    {\n        return new Enumerator<T>(this);\n    }\n\n    /// Inner class of basic Stack - describes the Enumerator it creates\n    /// that will savely without throwing iterate over it. Will loop/remove from the top first.\n    /// - will throw if Original BasicStack has changed between creation and accessing it.\n    ///     - this can happen in Reset() and MoveNext()\n    public sealed class Enumerator<T> : IEnumerator<T>\n    {\n        private BasicStack<T> stack;\n        private int index;\n        private int usedVersion;\n        public Enumerator(BasicStack<T> stack){\n            this.stack = stack;\n            this.index = stack.index;\n            this.usedVersion = stack.version;\n        }\n\n        /* The Enumerator implementation */\n\n        public T Current => GetCurrent(index);\n\n        object IEnumerator.Current => GetCurrent(index);\n\n        public void Dispose()\n        {\n            index = -1; // no freeing or anything needed here tbh\n        }\n\n        /// true if the enumerator was successfully advanced to the next element; \n        /// false if the enumerator has passed the end of the collection.\n        public bool MoveNext()\n        {\n            CheckVersion();\n            index--;\n            if (index < 0 ) return false;   // reached end\n            else return true;\n        }\n\n        public void Reset()\n        {\n            CheckVersion();\n            index = stack.index;\n        }\n\n        /* Helpers */\n\n        private T GetCurrent(int index) \n        {\n            if (index < 0) throw new InvalidOperationException("Enumerator already empty.");\n            return stack.arrayData[index];\n        }\n\n        /// As Enumerator demands -> will throw if original Stack was modified and iterator is out of sync.\n        private void CheckVersion(){\n            if (usedVersion != stack.version) throw new InvalidOperationException("Collection modified.");\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);