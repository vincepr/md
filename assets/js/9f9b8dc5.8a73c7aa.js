"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[873],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(t),c=a,g=u["".concat(l,".").concat(c)]||u[c]||d[c]||i;return t?r.createElement(g,s(s({ref:n},p),{},{components:t})):r.createElement(g,s({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=c;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var m=2;m<i;m++)s[m]=t[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5021:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=t(7462),a=(t(7294),t(3905));const i={},s="Union Find - Disjoint Set",o={unversionedId:"datastructures/disjoined_set",id:"datastructures/disjoined_set",title:"Union Find - Disjoint Set",description:"Data structure that keeps track of elements which are split into one or more disjoint sets.",source:"@site/docs/datastructures/disjoined_set.md",sourceDirName:"datastructures",slug:"/datastructures/disjoined_set",permalink:"/md/datastructures/disjoined_set",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/datastructures/disjoined_set.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Binary Search Tree",permalink:"/md/datastructures/binary_search_tree"},next:{title:"Basic structures",permalink:"/md/datastructures/dynamic_array"}},l={},m=[{value:"Usage",id:"usage",level:2},{value:"Complexity",id:"complexity",level:2},{value:"Algorithm Kruskal&#39;s Minimum Spanning Tree",id:"algorithm-kruskals-minimum-spanning-tree",level:3},{value:"Implementation",id:"implementation",level:2}],p={toc:m};function u(e){let{components:n,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"union-find---disjoint-set"},"Union Find - Disjoint Set"),(0,a.kt)("p",null,"Data structure that keeps track of elements which are split into one or more disjoint sets."),(0,a.kt)("p",null,"has 2 primary operations "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"find() - For given element, tells what union that data belongs to."),(0,a.kt)("li",{parentName:"ul"},"union() - merges 2 groups together.")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"image processing"),(0,a.kt)("li",{parentName:"ul"},"network connectivity"),(0,a.kt)("li",{parentName:"ul"},"least common ancestor in trees"),(0,a.kt)("li",{parentName:"ul"},"grid percolation - for given dots on a x/y grid, is there a path from top to bottom"),(0,a.kt)("li",{parentName:"ul"},"Kruskal's minimum spanning tree algorithm")),(0,a.kt)("h2",{id:"complexity"},"Complexity"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Construction"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Union"),(0,a.kt)("td",{parentName:"tr",align:null},"\u03b1(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Find"),(0,a.kt)("td",{parentName:"tr",align:null},"\u03b1(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"get component size"),(0,a.kt)("td",{parentName:"tr",align:null},"\u03b1(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"check if connected"),(0,a.kt)("td",{parentName:"tr",align:null},"\u03b1(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"count components"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"\u03b1(n)")," in amorthized constant time (almost constant, but not mathematically)")),(0,a.kt)("h3",{id:"algorithm-kruskals-minimum-spanning-tree"},"Algorithm Kruskal's Minimum Spanning Tree"),(0,a.kt)("p",null,"Given a graph we want to find a minimum Spanning Tree in the graph."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A minimum spanning tree is a subset of the edges which connect all vertices in the graph with the minimal total edge cost.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Kruskals minimum spanning tree",src:t(9286).Z,width:"2798",height:"2068"})),(0,a.kt)("h2",{id:"implementation"},"Implementation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public static class Example\n{\n    public static void Run()\n    {\n        Console.WriteLine("--- (Naive)DisjoinedSet Example: ---");\n        {\n            // creating an example graph (with cycle):\n            //  0\n            //  | \\\n            //  1--2\n            NaiveGraph g = new NaiveGraph(3, 3);\n            g.AddEdge(0, 1);\n            g.AddEdge(1, 2);\n            g.AddEdge(2, 0);\n            Console.WriteLine(g.ToString());\n            var maybe = NaiveGraph.isCycle(g) ? "a" : "no";\n            Console.WriteLine($"Graph contains {maybe} cycle.");\n\n            // creating an example grap without cycle\n            var gr = new NaiveGraph(3, 3);\n            gr.AddEdge(0, 1);\n            gr.AddEdge(1, 2);\n            Console.WriteLine(gr.ToString());\n            var maybe2 = NaiveGraph.isCycle(gr) ? "a" : "no";\n            Console.WriteLine($"Graph contains {maybe2} cycle.");\n        }\n        {\n            // creating an example graph (with cycle):\n            //  0\n            //  | \\\n            //  1--2\n            CompressedGraph g = new CompressedGraph(3, 3);\n            g.AddEdge(0, 1);\n            g.AddEdge(1, 2);\n            g.AddEdge(2, 0);\n            Console.WriteLine(g.ToString());\n            var maybe = g.isCycle() ? "a" : "no";\n            Console.WriteLine($"Graph contains {maybe} cycle.");\n\n            // creating an example grap without cycle\n            var gr = new CompressedGraph(5, 4);\n            gr.AddEdge(4, 3);\n            gr.AddEdge(3, 2);\n            gr.AddEdge(2, 1);\n            gr.AddEdge(1, 0);\n            Console.WriteLine(gr.ToString());\n            var maybe2 = gr.isCycle() ? "a" : "no";\n            Console.WriteLine($"Graph contains {maybe2} cycle.");\n        }\n    }\n}\n\npublic sealed class NaiveGraph\n{\n    private int nrVertices, nrEdges;\n    private Edge[] edges;\n\n    public NaiveGraph(int nrVertices, int nrEdges)\n    {\n        this.nrVertices = nrVertices;\n        this.nrEdges = 0;\n        this.edges = new Edge[nrEdges];\n\n        for (int i = 0; i < nrEdges; i++)\n        {\n            edges[i] = new Edge();\n        }\n    }\n\n    public void AddEdge(int from, int to)\n    {\n        if (from < 0 || to < 0 || from >= nrVertices || to >= nrVertices || nrEdges >= edges.Length)\n            throw new InvalidOperationException("Not allowed to add to Graph");\n        edges[nrEdges] = new Edge() { from=from, to=to };\n        nrEdges++;\n    }\n\n    public override string ToString() => "{ " + String.Join(", ", edges) + " }";\n\n    /// <summary>\n    /// connections between the Vertices(=Nodes)\n    /// </summary>\n    private struct Edge\n    {\n        public int from, to;\n        public override string ToString() => String.Join("",this.from, "->", this.to);\n    }\n\n    /// <summary>\n    /// utility - find the subset element is a part of.\n    /// </summary>\n    /// <param name="parent"></param>\n    /// <param name="elem"></param>\n    /// <returns></returns>\n    private int Find(int[] parent, int elem)\n    {\n        if (parent[elem] == elem)\n            return elem;\n        return Find(parent, parent[elem]);\n    }\n\n    /// <summary>\n    /// utility - merges 2 subsets \n    /// </summary>\n    /// <param name="parent"></param>\n    /// <param name="x"></param>\n    /// <param name="y"></param>\n    private void Union(int[] parent, int x, int y)\n    {\n        parent[x] = y;\n    }\n\n    /// <summary>\n    /// main function - to check if given Graph contains a cycle or not\n    /// </summary>\n    /// <param name="grap"></param>\n    /// <returns></returns>\n    public static bool isCycle(NaiveGraph graph)\n    {\n        // allocate memory for nrV subsets:\n        int[] parent = new int[graph.nrVertices];\n        // allocate all subsets as single element sets\n        for (int i=0; i<graph.nrVertices; ++i)\n            parent[i] = i;\n\n        for (int i=0; i<graph.nrEdges; ++i)\n        {\n            int x = graph.Find(parent, graph.edges[i].from);\n            int y = graph.Find(parent, graph.edges[i].to);\n\n            if (x == y) return true;\n\n            graph.Union(parent, x, y);\n        }\n        return false;\n    }\n}\n\n/// <summary>\n/// Optimisations over the Naive Implementation.\n/// we use **path compression** - we flatten the tree when find() is called.\n/// we use **union by rank** - always attatch the smaller depth tree under the root of the deeper tree.\n/// </summary>\npublic sealed class CompressedGraph\n{\n    private int nrVertices, nrEdges;\n    private Edge[] edges;\n\n    public CompressedGraph(int nrVertices, int nrEdges)\n    {\n        this.nrVertices = nrVertices;\n        this.nrEdges = 0;\n        this.edges = new Edge[nrEdges];\n\n        for (int i = 0; i < nrEdges; i++)\n        {\n            edges[i] = new Edge();\n        }\n    }\n\n    public void AddEdge(int from, int to)\n    {\n        if (from < 0 || to < 0 || from >= nrVertices || to >= nrVertices || nrEdges >= edges.Length)\n            throw new InvalidOperationException("Not allowed to add to Graph");\n        edges[nrEdges] = new Edge() { from = from, to = to };\n        nrEdges++;\n    }\n\n    public override string ToString() => "{ " + String.Join(", ", edges) + " }";\n\n    /// <summary>\n    /// connections between the Vertices(=Nodes)\n    /// </summary>\n    private struct Edge\n    {\n        public int from, to;\n        public override string ToString() => String.Join("", this.from, "->", this.to);\n    }\n\n    /// <summary>\n    /// A connected Subset of Vertices(=nodes)\n    /// - Rank describes\n    /// </summary>\n    private struct Subset\n    {\n        public int parent, rank;\n    }\n\n    /// <summary>\n    /// utility - find what set \'elem\' belongs to.\n    /// </summary>\n    /// <param name="parent"></param>\n    /// <param name="el"></param>\n    /// <returns></returns>\n    private int Find(Subset[] subsets, int el)\n    {\n        if (subsets[el].parent != el)\n            subsets[el].parent = Find(subsets, subsets[el].parent);\n        return subsets[el].parent;\n    }\n\n    /// <summary>\n    /// utility - merges 2 subsets (uses union by rank)\n    /// </summary>\n    /// <param name="parent"></param>\n    /// <param name="x"></param>\n    /// <param name="y"></param>\n    private void Union(Subset[] subsets, int x, int y)\n    {\n        int xroot = Find(subsets, x);\n        int yroot = Find(subsets, y);\n\n        if (subsets[xroot].rank < subsets[yroot].rank)\n            subsets[xroot].parent = yroot;\n        else if (subsets[yroot].rank < subsets[xroot].rank)\n            subsets[yroot].parent = xroot;\n        else\n        {\n            subsets[xroot].parent = yroot;\n            subsets[yroot].rank++;\n        }\n    }\n\n    /// <summary>\n    /// main function - to check if given Graph contains a cycle or not\n    /// </summary>\n    /// <param name="grap"></param>\n    /// <returns></returns>\n    public bool isCycle()\n    {\n        // allocate memory for nrV subsets:\n        Subset[] subsets = new Subset[nrVertices];\n        // allocate all subsets as single element sets\n        for (int v = 0; v < nrVertices; v++)\n            subsets[v] = new Subset(){ parent = v, rank = 0 };\n        // Keep looking for a cycle\n        for (int e =0; e < nrEdges; e++){\n            int x = Find(subsets, edges[e].from);\n            int y = Find(subsets, edges[e].to);\n            if (x == y) \n                return true;\n            Union(subsets, x, y);\n        }\n        return false;\n    }\n}\n')))}u.isMDXComponent=!0},9286:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/Untitled-2023-07-25-2354.excalidraw-8954465ef6daa952072bcaf30b11965f.svg"}}]);