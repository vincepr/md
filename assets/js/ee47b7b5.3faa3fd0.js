"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[7575],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=o,h=m["".concat(p,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8823:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const i={},r="Minimal Api compared to MVC",l={unversionedId:"csharp/microservices/api_basics",id:"csharp/microservices/api_basics",title:"Minimal Api compared to MVC",description:"- https://github.com/vincepr/CS_SixMinApi",source:"@site/docs/csharp/microservices/api_basics.md",sourceDirName:"csharp/microservices",slug:"/csharp/microservices/api_basics",permalink:"/md/csharp/microservices/api_basics",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/microservices/api_basics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Span and Benchmarking in Csharp",permalink:"/md/csharp/examples/span"},next:{title:"MinimalAPI example project in csharp",permalink:"/md/csharp/microservices/minimal_api"}},p={},s=[{value:"MVC",id:"mvc",level:2},{value:"Minimal Api",id:"minimal-api",level:2},{value:"Setup (no VS, only vscode)",id:"setup-no-vs-only-vscode",level:2},{value:"Csharp Code",id:"csharp-code",level:2},{value:"Creating the Model",id:"creating-the-model",level:3},{value:"Dtos",id:"dtos",level:3},{value:"Data layer",id:"data-layer",level:3},{value:"The public config part",id:"the-public-config-part",level:4},{value:"The local(hidden) config part",id:"the-localhidden-config-part",level:4},{value:"code part",id:"code-part",level:4},{value:"entity framework setup db",id:"entity-framework-setup-db",level:4},{value:"Auto Mapper",id:"auto-mapper",level:3},{value:"vs MVC - Controller",id:"vs-mvc---controller",level:2},{value:"(minimal) API endpoints",id:"minimal-api-endpoints",level:2},{value:"example extruded into separate file:",id:"example-extruded-into-separate-file",level:3},{value:"examples inline",id:"examples-inline",level:3},{value:"What are Filters",id:"what-are-filters",level:2},{value:"Custom Model Binding - IModelBinder",id:"custom-model-binding---imodelbinder",level:2},{value:"Model Validation",id:"model-validation",level:2},{value:"Patch endpoint",id:"patch-endpoint",level:2}],d={toc:s};function m(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"minimal-api-compared-to-mvc"},"Minimal Api compared to MVC"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/vincepr/CS_SixMinApi"},"https://github.com/vincepr/CS_SixMinApi"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"MVC")," - model-view-controller pattern. Is the old way of implementing apis in dotnet. Uses the controller model."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Minimal APIs")," - are architected to create HTTP apis with minimal dependencies. Ideal for microservices and apps that only include minimal files, features etc."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"mvs_vs_minimal_API",src:n(8155).Z,width:"1020",height:"629"})),(0,o.kt)("h2",{id:"mvc"},"MVC"),(0,o.kt)("p",null,"splits program logic into three interconected elements."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Model")," - Defines data structure (ex. the Class that shapes the JSON the users consume)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"View")," - Display of data (UI)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Controller"),' - maps requests to actions (handles routes like "/api" and what logic to call when it gets hit)')),(0,o.kt)("h2",{id:"minimal-api"},"Minimal Api"),(0,o.kt)("p",null,"Leightweight, so some features are not supported out of the box (compared to mvc)."),(0,o.kt)("p",null,"like:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"no model validation"),(0,o.kt)("li",{parentName:"ul"},"no support for JSONPatch"),(0,o.kt)("li",{parentName:"ul"},"no support filters"),(0,o.kt)("li",{parentName:"ul"},"no support for custom model binding(IModelBinder)")),(0,o.kt)("h1",{id:"project"},"Project"),(0,o.kt)("h2",{id:"setup-no-vs-only-vscode"},"Setup (no VS, only vscode)"),(0,o.kt)("p",null,"Add libraries"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dotnet new webapi -minimal -n SixMinApi\ncode -r SixMinApi                               //-r to open in same instance\n\ndotnet dev-certs https --trust                  // generate self signed certs for \n\ndotnet add package Microsoft.EntityFrameworkCore\ndotnet add package Microsoft.EntityFrameworkCore.Design\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\ndotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection\n")),(0,o.kt)("p",null,"For our server we create a ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: \'3.8\'\nservices:\n  sqlserver:\n    image: "mcr.microsoft.com/mssql/server:2019-latest"\n    environment:\n      ACCEPT_EULA: "Y"\n      SA_PASSWORD: "pa55word!"\n      MSSQL_PID: "Express"\n    ports:\n      - "1433:1433"\n')),(0,o.kt)("h2",{id:"csharp-code"},"Csharp Code"),(0,o.kt)("h3",{id:"creating-the-model"},"Creating the Model"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"/Models/Command.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using System.ComponentModel.DataAnnotations;\nnamespace SixMinApi.Models\n{\n    public class Command\n    {\n        [Key]\n        public int Id { get; set; }\n\n        [Required]\n        public string? HowTo { get; set; }\n\n        [Required]\n        [MaxLength(5)]\n        public string? Platfrom { get; set; }\n        \n        [Required]\n        public string? CommandLine { get; set; } \n    }\n}\n")),(0,o.kt)("h3",{id:"dtos"},"Dtos"),(0,o.kt)("p",null,"Dtos (Data-Transfer Object) decouples the Data-Shape of our Http-(Json)-Requests and Http-(Json)-Respones of our Api from the underlying Models that are stored in the databse."),(0,o.kt)("p",null,"add the neccessary Dtos (for any operations supported). Ex. the ",(0,o.kt)("inlineCode",{parentName:"p"},"/Dtos/CommandCreateDto.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using System.ComponentModel.DataAnnotations;\n\nnamespace SixMinApi.Dtos\n{\n    public class CommandCreateDto\n    {\n        [Required]\n        public string? HowTo { get; set; }\n\n        [Required]\n        [MaxLength(5)]\n        public string? Platfrom { get; set; }\n        \n        [Required]\n        public string? CommandLine { get; set; } \n    }\n}\n")),(0,o.kt)("h3",{id:"data-layer"},"Data layer"),(0,o.kt)("h4",{id:"the-public-config-part"},"The public config part"),(0,o.kt)("p",null,"in ",(0,o.kt)("inlineCode",{parentName:"p"},"appsettings.Development.json")," we do public configuration of our sql database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // ... ,\n  "ConnectionStrings": {\n    "SQLDbConnection" : "Server=localhost,1433;Initial Catalog=CommandDb"\n  }\n}\n')),(0,o.kt)("h4",{id:"the-localhidden-config-part"},"The local(hidden) config part"),(0,o.kt)("p",null,"setup dotnet user-secrets, this part stays in the local environment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'dotnet user-secrets init\ndotnet user-secrets set "UserId" "sa"\ndotnet user-secrets set "Password" "pa55sword!"\n')),(0,o.kt)("h4",{id:"code-part"},"code part"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"/Data/AppDbContext.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using Microsoft.EntityFrameworkCore;\nusing SixMinApi.Models;\n\nnamespace SixMinApi.Data\n{\n    public class AppDbContext : DbContext \n    {\n        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)\n        {\n            \n        }\n        public DbSet<Command> Commands => Set<Command>();\n    }\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"dependency inject the db context into the api-app")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'/* dependency inject our Db context into the app: */\nvar sqlConBuilder = new SqlConnectionStringBuilder();\n\n// add the public infro from the appsettings.Development.json to the builder.ConnectionString\nsqlConBuilder.ConnectionString = builder.Configuration.GetConnectionString("ConnectionStrings");\n// add missing info (hidden in our dotnet user-secrets) to the builder.ConnectionString\nsqlConBuilder.UserId = builder.Configuration["UserId"];\nsqlConBuilder.Passowrd = builder.Configuration["Password"];\n\n// dependency inject this info into our builder -> app\nbuilder.Services.AddDbContext<AppDbContext>(options => options.UseSqlServer(sqlConBuilder.ConnectionString));\n')),(0,o.kt)("h4",{id:"entity-framework-setup-db"},"entity framework setup db"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dotnet ef migrations add initialmigration\n// only if dotnet-ef cant be found we install it with: dotnet tool install \n--global dotnet-ef\n")),(0,o.kt)("p",null,"If successful, Migrations folder will get created. Filled with code for sql commands fitting for the Dtos"),(0,o.kt)("p",null,"Next we create the tables in our db:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dotnet ef database update\n")),(0,o.kt)("h3",{id:"auto-mapper"},"Auto Mapper"),(0,o.kt)("p",null,"library that allows mapping from one object source to another object target. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"From Model-> "),(0,o.kt)("li",{parentName:"ul"},"like below or (From Dto -> Model)")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"/Profiles/CommandsProfile.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using AutoMapper;\nusing SixMinApi.Dtos;\nusing SixMinApi.Models;\n\nnamespace SixMinApi.Profiles\n{\n    // were implementing Profile from Automapper\n    // to setupt quick mapping from Dtos <-> Models.Command\n    public class CommandsProfile : Profile\n    {\n        public CommandsProfile()\n        {\n            // Source(Model) -> Target(Dtos.CommandReadDto)\n            CreateMap<Command, CommandReadDto>();\n            CreateMap<CommandCreateDto, Command>();\n            CreateMap<CommandUpdateDto, Command>();\n        }\n    }\n}\n")),(0,o.kt)("p",null,"Not to forget to inject it into our main app. We add to our ",(0,o.kt)("inlineCode",{parentName:"p"},"Program.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"// dependency inject our AutoMapping (mapping Models -> Dtos ) to the builder\nbuilder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n")),(0,o.kt)("h2",{id:"vs-mvc---controller"},"vs MVC - Controller"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1:30:00")),(0,o.kt)("h2",{id:"minimal-api-endpoints"},"(minimal) API endpoints"),(0,o.kt)("h3",{id:"example-extruded-into-separate-file"},"example extruded into separate file:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"/Api/Handlers.cs"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"using AutoMapper;\nusing SixMinApi.Data;\nusing SixMinApi.Dtos;\nusing System.Windows.Input;\n\nnamespace SixMinApi.Api\n{\n    public static class Handle\n    {\n        public async static Task<IResult> GetAllCommands(ICommandRepo repo, IMapper mapper)\n        {\n            try\n            {\n                var commands = await repo.GetAllCommands();\n                return Results.Ok(mapper.Map<IEnumerable<CommandReadDto>>(commands));\n            } catch (Exception ex)\n            {\n                return Results.Problem(ex.Message);\n            }\n            \n        }\n    }\n}\n")),(0,o.kt)("h3",{id:"examples-inline"},"examples inline"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We just add the rest inline to our ",(0,o.kt)("inlineCode",{parentName:"li"},"Program.cs"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'// example of a Handler Function separated out to a extra file\napp.MapGet("/api/v1/commands", Handle.GetAllCommands);\n\n// example of a inline Handler Function\napp.MapGet("/api/v1/{id}", async(ICommandRepo repo, IMapper mapper, int id) => {\n    var command = await repo.GetCommandbyId(id);\n    if (command != null) return Results.Ok(mapper.Map<CommandReadDto>(command));\n    return Results.NotFound();\n});\n\napp.MapPost("api/v1/commands", async(ICommandRepo repo, IMapper mapper, CommandCreateDto cmdCreateDto) =>{\n    var commandModel = mapper.Map<Command>(cmdCreateDto);\n    await repo.CreateCommand(commandModel);     // this will ONLY create the command-context but not flush it down/persist it to the db\n    await repo.SaveChanges();                   // this will flush all gathered changes down to our db\n    // now we want to pass down the (new) id of the freshly generated entry:\n    var cmdReadDto = mapper.Map<CommandReadDto>(commandModel);\n    return Results.Created($"api/v1/commands/{cmdReadDto.Id}", cmdReadDto);\n    // this will return a \'link\' to our newly generated Command, like: api/v1/commands/12\n});\n\napp.MapPut("api/v1/commands/{id}", async (ICommandRepo repo, IMapper mapper, int id, CommandUpdateDto cmdUpdateDto) =>{\n    var command = await repo.GetCommandbyId(id);\n    if (command == null ) return Results.NotFound();\n    mapper.Map(cmdUpdateDto, command);\n    await repo.SaveChanges();\n    return Results.Ok();\n});\n\napp.MapDelete("api/v1/commands/{id}", async (ICommandRepo repo, IMapper mapper, int id) => {\n    var command = await repo.GetCommandbyId(id);\n    if (command == null) return Results.NotFound();\n    repo.DeleteCommand(command);\n    await repo.SaveChanges();\n    return Results.Ok();\n});\n')),(0,o.kt)("h1",{id:"the-differences"},"The Differences"),(0,o.kt)("h2",{id:"what-are-filters"},"What are Filters"),(0,o.kt)("p",null,"Filters are not supported for Minimal Apis. (though could probably be created yourself with middleware?)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Allow to run code before or after stages in the Filter Pipeline")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"each Filter Type is executed at different times in the pipeline:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Auth"),(0,o.kt)("li",{parentName:"ul"},"Resource"),(0,o.kt)("li",{parentName:"ul"},"Action"),(0,o.kt)("li",{parentName:"ul"},"Exception"),(0,o.kt)("li",{parentName:"ul"},"Result"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Filters Can be scoped to:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Globally (all Controllers, all Actions etc.)"),(0,o.kt)("li",{parentName:"ul"},"to a Controller"),(0,o.kt)("li",{parentName:"ul"},"to an Action"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Filters can be synchronous or async."))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"piplines",src:n(3395).Z,width:"960",height:"560"})),(0,o.kt)("h2",{id:"custom-model-binding---imodelbinder"},"Custom Model Binding - IModelBinder"),(0,o.kt)("p",null,"Allows Controller Actions to work directly with Model Types. (rather than http requests)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"doesnt seem terribly neccessary/useful to learn atm")),(0,o.kt)("h2",{id:"model-validation"},"Model Validation"),(0,o.kt)("p",null,"reports business rule errors. Ex. Input string length < min allowed length."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Out of the box with Controllers. But can be added to minimal APIs.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CommandCreateDto.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"namespace SixApi.Dtos{\n    public class CommandCreateDto{\n        [Required]\n        public string? HowTo { get; set; }\n\n        [Required]\n        [MaxLength(7)]  // this is the part we can validate against\n        public string? Platform { get; set; }\n\n        [Required]\n        public string? CommandLine { get; set; }\n    }\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"in a MVC we get a good concise error (no request will be made to sql-db) if we try to pass in a Create Request with a Platform string that is to long"),(0,o.kt)("li",{parentName:"ul"},"in the minimal-api a request will be made against the db, it will fail and a huge sql-error will come back to the client.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"a simple way to catch those could be with a try catch to check for those errors ")))),(0,o.kt)("h2",{id:"patch-endpoint"},"Patch endpoint"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a way to only update parts for an entry in our sql db. Like the HowTo-string without chaning the others.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'[HttpPatch("{id}")]\npublic async Task<ActionResult> PartialCommandUpdate(int id, JsonPatchDocument<CommandUpdateDto>)\n{\n    var commandModelFromRepo = await _repo.GetCommandById(id);\n    if (commandModelFromRepo == null) return NotFound();\n\n    var commandToPatch = _mapper.Map<CommandUpdateDto>(commandModelFromRepo\n    patchDoc.ApplyTo(commandToPatch);\n\n    if (!TryValidateModel(commandtoPatch))\n    {\n        return ValidationProblem(ModelState);\n    }\n}\n')))}m.isMDXComponent=!0},8155:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/mvc-441cdb8b757b4b49a59d5739743c82b0.svg"},3395:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/pipelines.excalidraw-da0c514ef906333325552996a524769d.svg"}}]);