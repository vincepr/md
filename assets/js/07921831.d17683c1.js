"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[849],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var i=a.createContext({}),u=function(n){var e=a.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},c=function(n){var e=u(n.components);return a.createElement(i.Provider,{value:e},n.children)},p="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,i=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),p=u(t),m=r,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(h,s(s({ref:e},c),{},{components:t})):a.createElement(h,s({ref:e},c))}));function h(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var i in e)hasOwnProperty.call(e,i)&&(l[i]=e[i]);l.originalType=n,l[p]="string"==typeof n?n:r,s[1]=l;for(var u=2;u<o;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3655:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const o={},s="PHP - notes",l={unversionedId:"webdev/php",id:"webdev/php",title:"PHP - notes",description:"implementing with html, css",source:"@site/docs/webdev/php.md",sourceDirName:"webdev",slug:"/webdev/php",permalink:"/md/webdev/php",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/webdev/php.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Js Concepts",permalink:"/md/webdev/js_concepts"},next:{title:"React - random notes",permalink:"/md/webdev/react"}},i={},u=[{value:"implementing with html, css",id:"implementing-with-html-css",level:2},{value:"Code snippets",id:"code-snippets",level:2},{value:"Basics",id:"basics",level:3},{value:"Classes",id:"classes",level:3},{value:"pseudo Main()",id:"pseudo-main",level:3}],c={toc:u};function p(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"php---notes"},"PHP - notes"),(0,r.kt)("h2",{id:"implementing-with-html-css"},"implementing with html, css"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n    /* Styles Go Here, or import css file normally*/\n    </style>\n  </head>\n  <body>\n    <h4>Some Table grabbing data from a SQL db</h4>\n    <table>\n        <tr>\n            <td><?php\n                while($row = mysql_fetch_row($result)){\n                    echo 'Data...'; ?></td>\n                }\n        </tr>\n    </table>\n  </body>\n</html>\n")),(0,r.kt)("h2",{id:"code-snippets"},"Code snippets"),(0,r.kt)("h3",{id:"basics"},"Basics"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Variables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'// Variablen\n$v1 = "Welcome";\n$v2 = \'Smith\';\n$v3 = 012;\necho $v1." Mr $v2 your id is: ".$v3."\\n"\n// careful with booleans:\necho true;      // returns 1\necho false;     // returns NOTHING!\n// number systems:\n$num = 0123;  // is considered an octal number (that equals 83 decimal)\n$num = 0x123; // is considered a hexadecimal number (that equals 291 decimal)\n$num = 0b111; // is considered a binary number (that equals 7 decimal)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"note take care of leading zeros before converting or some octal-number shenanigans will happen!"),(0,r.kt)("li",{parentName:"ul"},'careful with using booleans in error msg etc, since false -> "" without casting to string first')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function isMonth($inMonths){\n        $months = ["Januar", "Februar", "M\xe4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"];\n        \n        $i = 0;\n        while($i < count($months) ){\n            if ($inMonths === $months[$i]) - "true";\n            $i++;\n        }\n        \n        return "false";\n    }\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function summeGeraden(){\n        [$sumEven, $sumOdd] = [0,0];\n        for ($i=0; $i<10; $i++){\n            $rng = rand(2,49);\n            if ($rng % 2) $sumOdd += $rng;\n            else $sumEven += $rng;\n        }\n        echo "summe gerade: ".$sumEven." summe ungerade: ".$sumOdd;\n    }\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Arrays")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'// like in js\n$prices = [["Cola", 1000],["Wasser",450],["Bier",800]];\n$samePricesArray [] = ["Cola", 1000]\n$samePricesArray [] = ["Wasser",450]\n$samePricesArray [] = ["Bier",800]\n\n// but we can also use them like a  Map/Dictonary:\n$users[\'vorname\'] = "Hans";\n$users[\'nachname\'] = "Wurst";\n$users[\'adresse\'] = "Stuttgarterweg 15";\n$users[\'nachname\'] = "Herbinger";\n$adr[0][\'vorname\'] = "Dieter";\n$adr[0][\'nachname\'] = "Dietberg";\n$adr[1][\'vorname\'] = "Jorg";\n$adr[1][\'nachname\'] = "Joergenson";\n\nforeach($adr as $row){\n    var_dump($row)\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sorting Arrays:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"//simple sorts:\nsort()          //sort ascending\nrsort()         //sort descending\nasort()         //sort ascending but keep original indexes\narsort()        // sort descending but keep original indexes\n\n// Multisort example (ex data from a sql db)\n$data=[];\n$data[] = array('Datum' => 99, 'ort' => \"Amberg\");\n$data[] = array('Datum' => 86, 'Ort' => \"Bielefeld\");\n$data[] = array('Datum' => 75, 'Ort' => \"Cambridge\");\n$data[] = array('Datum' => 68, 'Ort' => \"Duesburg\");\n$data[] = array('Datum' => 56, 'Ort' => \"Enn\");\n$data[] = array('Datum' => 47, 'Ort' => \"Frankfurt\");\n\n$datum  = array_column($data, 'Datum');\n$ort = array_column($data, 'Ort');\n// Sort the data with Datum descending, ort ascending\n// Add $data as the last parameter, to sort by the common key\narray_multisort($datum, SORT_ASC, $data);\n")),(0,r.kt)("h3",{id:"classes"},"Classes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class User{\n    //property declaration\n    public $name = "default name";\n\n    //method declaration\n    public function displayName(){\n        echo $this->name;           //no $\n    }\n}\n\n$instance1 = new User();\n$instance1 ->displayName();\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"calling attribute vs function (with same name)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Foo\n{\n    public $bar = "!property!";\n    \n    public function bar() {\n        return "!method!";\n    }\n}\n\n$obj = new Foo();\necho $obj->bar."<br>". $obj->bar()."<br>";\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"inheritance")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class AdminUser extends User\n{\n    // Redefine the parent method\n    function displayName()\n    {\n        echo "IS Admin: \\n";\n        parent::displayName();\n    }\n}\n\n$extended = new ExtendClass();\n$extended->displayName();\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Base{\n    public function foo(int $a) {\n        echo "Valid\\n";\n    }\n}\n\nclass ExtBase1 extends Base{\n    function foo(int $a = 5)\n    {\n        parent::foo($a);\n    }\n}\n\nclass ExtBase2 extends Base{\n    function foo(int $a, $b = 5)\n    {\n        parent::foo($a);\n    }\n}\n\n$extended1 = new ExtBase1();\n$extended1->foo();              //echo Valid\n$extended2 = new ExtBase2();\n$extended2->foo(1);             //echo Valid\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Constructor example with some data encapsulation:"),(0,r.kt)("li",{parentName:"ul"},"note how here we use the concept of encapsulation here to only allow setting of typ on creation.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Konto {\n    // attributes\n    private float $kontostand;      // holds money in bank\n    private string $typ;     // can only be defined on creation\n\n    //constructor\n    public function __construct(float $kontostand=0, string $typ="normal"){\n        $this -> kontostand = $kontostand;\n        $this -> setKontoTyp($typ);\n    }\n\n    // functions\n    private function setKontoTyp(string $typ){\n        $this -> typ= $typ;\n    }\n    public function getKontoTyp(){\n        return $this -> typ;\n    }\n    public function einzahlen($input){\n        return $this -> kontostand += $input;\n    }\n    public function auszahlen($input){\n        return $this -> kontostand -= $input;\n    }\n}\n\necho "<pre>";\n$defaultKonto = new Konto();\nvar_dump($defaultKonto);\n$paulsKonto = new Konto(1000, "enterprise");\nvar_dump($paulsKonto);\necho $paulsKonto-> einzahlen(999)."\\n";\necho $paulsKonto-> auszahlen(99)."\\n";\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"another example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'class Kunde{\n    // --Attribute--\n    private $vorname = "";\n    private $nachname = "";\n    private int $alter = 0;\n    private $geschlecht = "";\n\n    //Konstruktor\n    public function __construct(string $vor, string $nach, int $al, string $gesch){\n        $this -> vorname = $vor;\n        $this -> nachname = $nach;\n        $this -> alter = $al;\n        $this -> geschlecht = $gesch;\n    }\n    \n    // --Methoden--\n    // bei Hochzeit ect kann sich Nachname \xe4ndern\n    public function setNachname(string $neuerName){\n        $this->nachname = $neuerName;\n    }\n    // Jedes Jahr unvermeidbar\n    public function hatteGeburtstag(){\n        $this->alter +=1;\n    }\n\n    // Gibt alle Kundendaten aus \n    public function printInfo(){\n        $isVolljaehrig = false;\n        if ($this->alter >17){\n            $isVolljaehrig = true;\n        }\n        echo "Kunde ".$this->vorname\n            ." ".$this->nachname\n            ." ist ".$this->alter." Jahre alt, "\n            .$this->geschlecht." und "\n            .($isVolljaehrig ? "vollj\xe4hrig" : "minderj\xe4hrig")\n            .". <br>";\n    }\n}\n\n$alleKunden = [];\n$alleKunden[] = new Kunde("Susanne","Schmidt",19,"weiblich");\n$alleKunden[] = new Kunde("Aron","Griebler",17,"m\xe4nnlich");\n$alleKunden[] = new Kunde("Dieter","Griebler",33,"m\xe4nnlich");\n$alleKunden[] = new Kunde("Johanna","F\xfcrst",22,"weiblich");\n\necho "<h4>Urspr\xfcngliche Kunden</h4>";\nforeach ($alleKunden as $kunde){\n    $kunde->printInfo();\n}\n\n$alleKunden[1]->hatteGeburtstag();\n\necho "<h4>Kunden nach Geburtstag</h4>";\nforeach ($alleKunden as $kunde){\n    $kunde->printInfo();\n}\n')),(0,r.kt)("h3",{id:"pseudo-main"},"pseudo Main()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'require_once("Kunde.class.php");\nclass Programm{\n    public function __construct(){\n        $this -> main();\n    }\n    public function __destruct(){\n        echo "<br> Programm ist beendet <br>";\n    }\n\n    private function main(){\n        // run our Programm here\n    }\n}\nnew Programm();\n')))}p.isMDXComponent=!0}}]);