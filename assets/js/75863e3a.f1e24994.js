"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[5713],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),c=a,h=d["".concat(p,".").concat(c)]||d[c]||m[c]||i;return n?r.createElement(h,o(o({ref:t},s),{},{components:n})):r.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},o="Priority Queue - (often implemented with a Heap)",l={unversionedId:"datastructures/priority_queue",id:"datastructures/priority_queue",title:"Priority Queue - (often implemented with a Heap)",description:"Similar to normal queue BUT items of higher priority come out first.",source:"@site/docs/datastructures/priority_queue.md",sourceDirName:"datastructures",slug:"/datastructures/priority_queue",permalink:"/md/datastructures/priority_queue",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/datastructures/priority_queue.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Linked List (Singly Linked List)",permalink:"/md/datastructures/linked_list"},next:{title:"Queue in C",permalink:"/md/datastructures/queue"}},p={},u=[{value:"Heap (often used for priority queue)",id:"heap-often-used-for-priority-queue",level:2},{value:"Usage",id:"usage",level:2},{value:"Complexity",id:"complexity",level:2},{value:"Implementation (in go)",id:"implementation-in-go",level:2}],s={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"priority-queue---often-implemented-with-a-heap"},"Priority Queue - (often implemented with a Heap)"),(0,a.kt)("p",null,"Similar to normal queue BUT items of higher priority come out first."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"items need to be comparable for this. So the comparable data must be able to be sorted in some way.")),(0,a.kt)("h2",{id:"heap-often-used-for-priority-queue"},"Heap (often used for priority queue)"),(0,a.kt)("p",null,"a tree that satisfies the heap property. ",(0,a.kt)("inlineCode",{parentName:"p"},"If A is a parent of node B, then A is ordered with respect to B for all nodes A,B in the heap")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Ex. if A the parent then all children and it's children are smaller.")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"can be used to implement Dijkstra's Shortest Path Algorithm"),(0,a.kt)("li",{parentName:"ul"},"if we for example always want to the next best (or next worst) node",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Best First Search (BFS) often grab the next most promising node like this"))),(0,a.kt)("li",{parentName:"ul"},"used in Huffman coding (lossless data compression)"),(0,a.kt)("li",{parentName:"ul"},"Minimum Spaning Tree algorithms (MST)")),(0,a.kt)("h2",{id:"complexity"},"Complexity"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Construction"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Polling"),(0,a.kt)("td",{parentName:"tr",align:null},"O(log(n))")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Peeking"),(0,a.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Adding"),(0,a.kt)("td",{parentName:"tr",align:null},"O(log(n))")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Naive Removing"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"hash-table removing"),(0,a.kt)("td",{parentName:"tr",align:null},"O(log(n))")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Naive contains"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"hash-table contains"),(0,a.kt)("td",{parentName:"tr",align:null},"O(1)")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A hashtable ontop of the Heap adds overhead but makes remove() and contains() faster")),(0,a.kt)("h2",{id:"implementation-in-go"},"Implementation (in go)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// our processes we want to queue (bigger prio -> do first)\ntype Process struct{\n    prio int\n}\n\n// our heap structure (max heap in this case)\ntype Heap struct{\n    arr []Process\n}\n\n\n// public function to add a element to the heap\nfunc (h *Heap) Insert(proc Process){\n    h.arr =  append(h.arr, proc)\n    h.heapifyUp(len(h.arr)-1)\n}\n// bring heap back into heap-state after a Input()\n// does so by swapping with parent till uptop or not bigger anymore\nfunc (h *Heap)heapifyUp(idx int){\n    for h.arr[idx].prio > h.arr[parent(idx)].prio {         // while( node>parent )\n        h.swap(parent(idx), idx)\n        idx = parent(idx)\n    }\n}\n\n\n// public function to "pop()" the largest/root node\nfunc (h *Heap) Extract() (Process, error) {\n    length := len(h.arr) -1\n    if length < 0 {\n        return Process{}, fmt.Errorf("Heap is Empty, can not remove anything")\n    }\n    popElement := h.arr[0]\n    h.arr[0] = h.arr[length]    // swap last element to first\n    h.arr = h.arr[:length]      // remove last slice element (but does not reallocate in go if i understand correctly)\n\n    h.heapifyDown(0)            // start our sort-shuffle from index 0\n    return popElement, nil\n}\n// bring heap back into heap-state after a Extract()\n// does so by potentially swapping with bigger child, moving down till bottom/no more swap\nfunc (h *Heap)heapifyDown(idx int){\n    current := idx\n    last    := len(h.arr)-1\n    l, r    := left(idx), right(idx)\n    for l <= last {\n        if l == last {\n            current = l\n        } else if h.arr[l].prio > h.arr[r].prio{\n            current = l\n        } else {\n            current = r\n        }\n        if h.arr[idx].prio < h.arr[current].prio{\n            h.swap(idx, current)\n            idx = current\n            l, r = left(idx) , right(idx)\n        } else { return }\n    }\n}\n\n\n/*\n*   helpers\n*/\n\n// returns the equivalent parent/left/right node of our "thought off binary-tree"\nfunc parent(idx int) int {\n    return (idx -1) / 2\n}\n\nfunc left(idx int) int {\n    return 2*idx +1\n}\n\nfunc right(idx int) int {\n    return 2*idx +2\n}\n\nfunc (h *Heap)swap(i1 int, i2 int){\n    h.arr[i1], h.arr[i2] = h.arr[i2], h.arr[i1]\n}\n')))}d.isMDXComponent=!0}}]);