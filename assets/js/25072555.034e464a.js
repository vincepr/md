"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[8274],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(r),m=a,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6353:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const o={},l="ref, in, out keyword in Csharp",i={unversionedId:"csharp/examples/ref_in_out",id:"csharp/examples/ref_in_out",title:"ref, in, out keyword in Csharp",description:"Basically like ref keyword. Instead of copying like normally for stack-values a reference gets passed.",source:"@site/docs/csharp/examples/ref_in_out.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/ref_in_out",permalink:"/md/csharp/examples/ref_in_out",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/ref_in_out.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Records in C",permalink:"/md/csharp/examples/records"},next:{title:"Refactoring exercise in Csharp part 1",permalink:"/md/csharp/examples/refactoring/refactoring1"}},s={},u=[{value:"ref-keyword",id:"ref-keyword",level:2},{value:"out-keyword",id:"out-keyword",level:2},{value:"in-keyword",id:"in-keyword",level:2},{value:"When to use",id:"when-to-use",level:3}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ref-in-out-keyword-in-csharp"},"ref, in, out keyword in Csharp"),(0,a.kt)("p",null,"Basically like ",(0,a.kt)("inlineCode",{parentName:"p"},"ref")," keyword. Instead of copying like normally for stack-values a reference gets passed."),(0,a.kt)("h2",{id:"ref-keyword"},"ref-keyword"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ref doesnt enforce any constraints on what to do with ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," in the below example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"int value = 99;\nExample(ref value);\nConsole.WriteLine(value);   // -> 11\n\nvoid Example(ref int x){\n    x = 11;  // mutates dereferenced original 'value'\n}\n")),(0,a.kt)("h2",{id:"out-keyword"},"out-keyword"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'var couldParse = int.TryParse("123", out int parsedValue);\nConsole.WriteLine(parsedValue); // -> 123\nvar value = 100;\nvar couldParse = int.TryParse("asdf", out value);   // original value gets mutated\nConsole.WriteLine(parsedValue); // -> 0 (the default init value)\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"out enforces us to modify/set ",(0,a.kt)("inlineCode",{parentName:"li"},"x = 11;")," or it wont compile"),(0,a.kt)("li",{parentName:"ul"},"every branch has to set the out value on Exit!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"int value = 99;\nExample(ref value);\nConsole.WriteLine(value);   // -> 11\n\nvoid Example(out int x){\n    x = 11;  // this mutation is enfored with the out keyword\n}\n")),(0,a.kt)("h2",{id:"in-keyword"},"in-keyword"),(0,a.kt)("p",null,"Usecase: Passing down valuetypes (especially big structs) as function parameters will copy each time."),(0,a.kt)("p",null,"this causes a huge memory allocation burden."),(0,a.kt)("p",null,"One could use the ref keyword BUT now the function could mutate the original etc."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we can avoid this by using ",(0,a.kt)("inlineCode",{parentName:"li"},"in"),"."),(0,a.kt)("li",{parentName:"ul"},"this effectively makes it a ref but ",(0,a.kt)("strong",{parentName:"li"},"readonly"),"!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"int value = 99;\nExample(in value);\nvoid Example(in int x){\n    // value = 123;         <- NOT ALLOWED\n    Console.WriteLine(x);   // is allowed\n}\n")),(0,a.kt)("h3",{id:"when-to-use"},"When to use"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"if the struct is bigger than pointer size"),(0,a.kt)("li",{parentName:"ul"},"if using ",(0,a.kt)("inlineCode",{parentName:"li"},"in")," with a struct make sure the struct is ",(0,a.kt)("strong",{parentName:"li"},"readonly")," or defensive copies will degrade performance benefits.")))}c.isMDXComponent=!0}}]);