"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[4899],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=i,g=m["".concat(l,".").concat(u)]||m[u]||p[u]||a;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5510:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={},o="editor Settings",s={unversionedId:"settings/editorSettings",id:"settings/editorSettings",title:"editor Settings",description:"Settings for Vscode",source:"@site/docs/settings/editorSettings.md",sourceDirName:"settings",slug:"/settings/editorSettings",permalink:"/md/settings/editorSettings",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/settings/editorSettings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"install codeserver",permalink:"/md/settings/codeserver"},next:{title:"nginx",permalink:"/md/settings/nginx"}},l={},c=[{value:"Settings for Vscode",id:"settings-for-vscode",level:2},{value:"Settings for Rider, Settings for Intellij-products",id:"settings-for-rider-settings-for-intellij-products",level:2}],d={toc:c};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"editor-settings"},"editor Settings"),(0,i.kt)("h2",{id:"settings-for-vscode"},"Settings for Vscode"),(0,i.kt)("p",null,"openvscode-server location for the global settings: ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.vscode-remote/data/Machine/settings.json")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "thunder-client.defaultUrl": "http://127.0.0.1:5555/",\n    /// base settings\n    "workbench.colorTheme": "Default Dark Modern",\n    // "files.autoSave": "afterDelay",  // enable this if hotreloading is killing performance for remote work\n    "files.simpleDialog.enable": true,\n    // "terminal.integrated.allowChords": false,\n    // "window.commandCenter": false,\n    /// git settings\n    "git.enableSmartCommit": true,\n    "git.autofetch": true,\n    /// vim settings\n    "vim.highlightedyank.enable": true,\n    "vim.highlightedyank.duration": 1000,\n    "vim.sneak": true,\n    "vim.handleKeys": {\n        "<C-x>": false,\n        "<C-v>": false,\n        "<C-a>": false,\n        "<C-f>": false,\n        "<C-e>": false,\n        "<C-y>": false,\n        "<C-z>": false, \n        "<C-b>": false,\n    },\n    "editor.emptySelectionClipboard": false,    // stop copy empty line on ctrl+c exit input mode\n    "vim.insertModeKeyBindings": [\n        {\n            "before": ["<C-c>"],\n            "commands": ["editor.action.clipboardCopyAction", "extension.vim_escape"]\n        }\n    ],\n    "editor.codeLens": false,\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ctrl shift P and ",(0,i.kt)("inlineCode",{parentName:"li"},"open keyboard shortcuts (json)"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// Place your key bindings in this file to override the defaults\n[\n    {\n        "key": "tab",\n        "command": "-extension.vim_tab",\n        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != \'Insert\'"\n    },\n    {\n        "key": "shift+tab",\n        "command": "-extension.vim_shift+tab",\n        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != \'Insert\'"\n    }\n]\n\xb4\xb4\xb4\n\n')),(0,i.kt)("h2",{id:"settings-for-rider-settings-for-intellij-products"},"Settings for Rider, Settings for Intellij-products"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"disable auto new line on toggle comment - uncheck: AdvancedSettings/Move caret down after comment "),(0,i.kt)("li",{parentName:"ul"},"next some added keybindings for my preference:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// non default Keybindings(us keyboard layout)\nctrl+\xf6      Tool Windows/Terminal (german only)\nctrl+#      (GERMAN-ONLY) toggle comment\nctrl+shift+enter ->   also ctrl+\xe4     // want this quick complete easy to reach\n\nshift+f6         ->   f2        rename\nf1                  -> next error\n\nctrl+h left\nctrl+j down\nctrl+k up\nctrl+l right\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"create an ",(0,i.kt)("inlineCode",{parentName:"li"},"C\\Users\\vincepr\\.ideavimrc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"set relativenumber\n"set number\nset visualbell\nset noerrorbells\n\n" ! manually install sneak extension from marketplace\nset sneak\n\nPlug \'tpope/vim-surround\'\nset surround\n\nPlug \'tpope/vim-commentary\'\nset commentary\n\nPlug \'terryma/vim-multiple-cursors\'\nset multiple-cursors\n\n" ! manually rebind keybinding in rider:\n" map <C-d> <Action>(ActivateTerminalToolWindow)\n" map <C-\xe4> <Action>(CompleteCurrentStatement)\n" map <C-h> <Action>(Left)\n" map <C-j> <Action>(Down)\n" map <C-k> <Action>(Up)\n" map <C-l> <Action>(Right)\n" map <C-h> QuickJavaDoc - REBIND IN VIM DOESNT OPEN 2ndWINDOW - just overwrite all of ctrl+q\n" map f2 <Action>(Refactor-Rename)\n\nsethandler <C-.> a:vim\nsethandler <C-2> a:ide\nsethandler <C-6> a:ide\nsethandler <C-a> a:ide\nsethandler <C-b> a:vim\nsethandler <C-c> a:vim\nsethandler <C-d> a:vim\nsethandler <C-e> a:ide\nsethandler <C-f> a:ide\nsethandler <C-g> a:vim\nsethandler <C-h> a:ide\nsethandler <C-i> a:vim\nsethandler <C-j> a:ide\nsethandler <C-k> a:ide\nsethandler <C-l> a:ide\nsethandler <C-m> a:vim\nsethandler <C-n> i:vim\nsethandler <C-o> a:vim\nsethandler <C-p> i:vim\nsethandler <C-q> a:vim\nsethandler <C-r> a:vim\nsethandler <C-s> a:vim\nsethandler <C-t> a:ide\nsethandler <C-u> a:vim\nsethandler <C-v> a:ide\nsethandler <C-w> a:vim\nsethandler <C-x> a:ide\nsethandler <C-y> a:ide\nsethandler <C-z> a:ide\nsethandler <C-[> a:ide\nsethandler <C-]> a:ide\nsethandler <C-\\> a:ide\n\nmap <C-.> :action ShowIntentionActions<cr>\n\n" using idea history over vim (seems dodgy)\nmap <C-o> <Action>(Back)\nmap <C-i> <Action>(Forward)\n\n" move lines up/down\nmap <A-j> <Action>(MoveLineDown)\nmap <A-k> <Action>(MoveLineUp)\nmap <Tab> <Action>(EditorIndentSelection)\nmap <S-Tab> <Action>(EditorUnindentSelection)\n\n" Tab homerow navigation\nmap <A-l> <Action>(NextTab)\nmap <A-h> <Action>(PreviousTab)\nmap <A-g> <Action>(CloseEditor)\n\n" cycling autocomplete (might remove)\nimap <C-n> <ESC>:action HippieCompletion<CR>a\nimap <C-p> <ESC>:action HippieBackwardCompletion<CR>a\n\n" is this ever useful (might remove)\nmap <Leader>k <Action>(EditorCodeBlockStart)\nmap <Leader>j <Action>(EditorCodeBlockEnd)\n\n" want vim-window-splitting but replace old ctrl-q, ctrl-b is available with gd\nmap <A-w> <Action>(EditorSelectWord)\nmap <C-b> <Action>(HideAllWindows)\n\n" copy behavior + exit mode\nnnoremap <C-c> "+y<Esc>\nvnoremap <C-c> "+y<Esc>\nxnoremap <C-c> "+y<Esc>\nsnoremap <C-c> "+y<Esc>\n\nnnoremap ge :action ShowErrorDescription<cr>\nnnoremap gE :action GotoPreviousError<cr>\nnnoremap gh :action QuickJavaDoc<cr>\nnnoremap gH :action QuickImplementations<cr>\nnnoremap gr :action Refactorings.QuickListPopupAction<cr>\n\n" map g; <Action>(JumpToLastChange)\n" map g, <Action>(JumpToNextChange)\n\nlet mapleader = ","\n\nmap gs <Action>(SelectIn)\nmap gk <Action>(Vcs.QuickListPopupAction)\n\nmap <Leader>s <Action>(FileStructurePopup)\nmap <Leader>S <Action>(GotoRelated)\n\nmap <Leader>e <Action>(GotoNextError)\nmap <Leader>E <Action>(GotoPreviousError)\n\nmap <Leader>f <Action>(FindUsages)\nmap <Leader>F <Action>(HighlightUsagesInFile)\n\nmap <Leader>g <Action>(Generate)\nmap <Leader>G <Action>(GotoSymbol)\n\nmap <Leader>w <Action>(HideAllWindows)\nmap <Leader>W <Action>(JumpToLastWindow)\n\nmap <Leader>r <Action>(ChooseRunConfiguration)\nmap <Leader>R <Action>(Refactorings.QuickListPopupAction)\n\nmap <Leader>a <Action>(AnalyzeActionsPopup)\n\n" incase we need backspace: map <BS> <Action>(GotoRelated)\n')))}m.isMDXComponent=!0}}]);