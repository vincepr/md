"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[7310],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),i=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=i(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=m(e,["components","mdxType","originalType","parentName"]),s=i(n),u=r,f=s["".concat(p,".").concat(u)]||s[u]||c[u]||o;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[s]="string"==typeof e?e:r,l[1]=m;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>m,toc:()=>i});var a=n(7462),r=(n(7294),n(3905));const o={},l="part 7 - multi resource api",m={unversionedId:"csharp/examples/Microservices/part7-multiResourceApi",id:"csharp/examples/Microservices/part7-multiResourceApi",title:"part 7 - multi resource api",description:"In this step we extend the CommandsService to do some actual work. (while using information it gathered from the PlatformService)",source:"@site/docs/csharp/examples/Microservices/part7-multiResourceApi.md",sourceDirName:"csharp/examples/Microservices",slug:"/csharp/examples/Microservices/part7-multiResourceApi",permalink:"/md/csharp/examples/Microservices/part7-multiResourceApi",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/Microservices/part7-multiResourceApi.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"part6 - Sql inside Kubernetes",permalink:"/md/csharp/examples/Microservices/part6-sqlKubernetes"},next:{title:"part 8 - Message Bus with RabbitMQ",permalink:"/md/csharp/examples/Microservices/part8-rabbitMQ"}},p={},i=[{value:"Code",id:"code",level:2},{value:"And we create the Controllers",id:"and-we-create-the-controllers",level:3}],d={toc:i};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"part-7---multi-resource-api"},"part 7 - multi resource api"),(0,r.kt)("p",null,"In this step we extend the CommandsService to do some actual work. (while using information it gathered from the PlatformService)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Action"),(0,r.kt)("th",{parentName:"tr",align:null},"Verb"),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Controller"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetAllPlaforms"),(0,r.kt)("td",{parentName:"tr",align:null},"GET"),(0,r.kt)("td",{parentName:"tr",align:null},"/api/c/platforms"),(0,r.kt)("td",{parentName:"tr",align:null},"Platform")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetAllCommands ForPlatform"),(0,r.kt)("td",{parentName:"tr",align:null},"GET"),(0,r.kt)("td",{parentName:"tr",align:null},"/api/c/platf1orms/{platformId}/commands"),(0,r.kt)("td",{parentName:"tr",align:null},"Command")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GetOneCommand ForPlatform"),(0,r.kt)("td",{parentName:"tr",align:null},"GET"),(0,r.kt)("td",{parentName:"tr",align:null},"/api/c/platf1orms/{platformId}/commands/{commandId}"),(0,r.kt)("td",{parentName:"tr",align:null},"Command")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CreateOneCommand ForPlaform"),(0,r.kt)("td",{parentName:"tr",align:null},"POST/api/c/platf1orms/{platformId}/commands/"),(0,r.kt)("td",{parentName:"tr",align:null},"Command"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in ",(0,r.kt)("inlineCode",{parentName:"li"},"Models/")," we add our 2 Models")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Command {\n    [Key, Required]\n    public int Id { get; set; }\n    public required string HowTo { get; set; }\n    public required string CommandLine { get; set; }\n    public required int PlatformId { get; set; }\n    public required Platform Platform { get; set; }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Platform {\n    public int Id { get; set; }\n    public int ExternalId { get; set; }\n    public required string Name { get; set; }\n    public ICollection<Command> Commands { get; set; } = new List<Command>();\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in ",(0,r.kt)("inlineCode",{parentName:"li"},"Data/")," we add our DbContext")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class AppDbContext : DbContext {\n    public AppDbContext(DbContextOptions<AppDbContext> opts) : base(opts){}\n    public DbSet<Platform> Platforms { get; set; }\n    public DbSet<Command> Commands { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // usually EF does a decent job infering relationships between Models\n        // - but we are explicit here just to make sure (and show how to)\n        // - were basically declaring the 1:n relationship between the tables etc...\n        modelBuilder\n            .Entity<Platform>()\n            .HasMany(p => p.Commands)\n            .WithOne(p => p.Platform!)\n            .HasForeignKey(p => p.PlatformId);\n        \n        modelBuilder\n            .Entity<Command>()\n            .HasOne(p => p.Platform)\n            .WithMany(p => p.Commands)\n            .HasForeignKey(p => p.PlatformId);\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in ",(0,r.kt)("inlineCode",{parentName:"li"},"Data/")," we add our Repository Pattern")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class CommandRepo : ICommandRepo {\n    private readonly AppDbContext _ctx;\n\n    public CommandRepo(AppDbContext ctx) {\n        _ctx = ctx;\n    }\n    public void CreateCommand(int platId, Command command) {\n        if(command is null) throw new ArgumentNullException(nameof(command));\n        command.PlatformId = platId;\n        _ctx.Commands.Add(command);\n    }\n\n    public void CreatePlatform(Platform plat) {\n        if(plat is null) throw new ArgumentNullException(nameof(plat));\n        _ctx.Platforms.Add(plat);\n    }\n\n    public IEnumerable<Platform> GetAllPlatforms() {\n        return _ctx.Platforms.ToList();\n    }\n\n    public Command GetCommand(int platId, int commandId) {\n        return _ctx.Commands.Where(c => c.PlatformId == platId && c.Id == commandId).FirstOrDefault();\n    }\n\n    public IEnumerable<Command> GetCommandsForPlatform(int platId) {\n        return _ctx.Commands\n        .Where(c => c.PlatformId == platId)\n        .OrderBy(c => c.Platform.Name);\n    }\n\n    public bool PlatformExists(int platId) {\n        return _ctx.Platforms.Any(p => p.Id == platId);\n    }\n\n    public bool SaveChanges() {\n        return _ctx.SaveChanges() >= 0;\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface ICommandRepo {\n    bool SaveChanges();\n\n    // Platforms\n    IEnumerable<Platform> GetAllPlatforms();\n    void CreatePlatform(Platform plat);\n    bool PlatformExists(int platId);      \n    \n    // Commands\n    IEnumerable<Command> GetCommandsForPlatform(int platId);\n    Command GetCommand(int platId, int commandId);\n    void CreateCommand(int platId, Command command);\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"we inject those to our ",(0,r.kt)("inlineCode",{parentName:"li"},"Programm.cs"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// we dependenyc inject:\nbuilder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\nbuilder.Services.AddDbContext<AppDbContext>(opts => opts.UseInMemoryDatabase("InMem") );\nbuilder.Services.AddScoped<ICommandRepo, CommandRepo>();\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"we add Automapper Mappings")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class CommandsProfile : AutoMapper.Profile {\n    public CommandsProfile() {\n        // <Source> -> <Target>\n        CreateMap<Platform, PlatformReadDto>();\n        CreateMap<CommandCreateDto, Command>();\n        CreateMap<Command, CommandReadDto>();\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"we add Dtos for all needed uscases(3 atm)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class CommandCreateDto {\n    public required string HowTo { get; set; }\n    public required string CommandLine { get; set; }\n    // public required int PlatformId { get; set; }  <- this we get internally!\n}\n")),(0,r.kt)("h3",{id:"and-we-create-the-controllers"},"And we create the Controllers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Controllers/CommandsController"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[ApiController]\n[Route("api/c/platforms/{platformId}/[controller]")]\npublic class CommandsController : ControllerBase\n{\n    private readonly ICommandRepo _repository;\n    private readonly IMapper _mapper;\n\n    public CommandsController(ICommandRepo repo, IMapper mapper)\n    {\n       _repository = repo;\n       _mapper = mapper; \n    }\n\n    [HttpGet]\n    public ActionResult<IEnumerable<CommandReadDto>> GetAllCommandsByPlatformId(int platformId) {\n        Console.WriteLine($"--\x3e Hit GetAllCommandsByPlatformId with platformId={platformId}");\n        if (!_repository.PlatformExists(platformId)) return NotFound();\n        var commandItems = _repository.GetCommandsForPlatform(platformId);\n        return Ok(_mapper.Map<IEnumerable<CommandReadDto>>(commandItems));\n    }\n\n    [HttpGet("{commandId}", Name = "GetCommandForPlatform")] // again we give this a Name to be able to reference it later. CreatingNew -> pointing to new createdID@this\n    public ActionResult<CommandReadDto> GetCommandForPlatform(int platformId, int commandId) {\n        Console.WriteLine($"--\x3e Hit GetCommandForPlatform with platformId={platformId} commandId={commandId}");\n        if (!_repository.PlatformExists(platformId)) return NotFound();\n        var command = _repository.GetCommand(platformId, commandId);\n        if (command is null) return NotFound();\n        return Ok(_mapper.Map<CommandReadDto>(command));\n    }\n\n    [HttpPost]\n    public ActionResult<CommandReadDto> CreateCommandForPlatform(int platformId, CommandCreateDto commandDto) {\n        Console.WriteLine($"--\x3e Hit CreateCommandForPlatform with platformId={platformId}");\n        if (!_repository.PlatformExists(platformId)) return NotFound();\n        var command = _mapper.Map<Command>(commandDto);\n        _repository.CreateCommand(platformId, command);\n        _repository.SaveChanges();\n        var responseDto = _mapper.Map<CommandReadDto>(command);\n        return CreatedAtRoute(nameof(GetCommandForPlatform),\n            new {platformId=platformId, commandId=responseDto.Id}, responseDto);\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"and we extend the already existing: ",(0,r.kt)("inlineCode",{parentName:"li"},"Constrollers/PlatformsController"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace CommandsService.Controllers\n{\n    [Route("api/c/[controller]")]   // the c is just so we can differentiate our two services for now\n    [ApiController]\n    public class PlatformsController : ControllerBase\n    {\n        private readonly ICommandRepo _repository;\n        private readonly IMapper _mapper;\n\n        public PlatformsController(ICommandRepo repo, IMapper mapper)\n        {\n           _repository = repo;\n           _mapper = mapper; \n        }\n\n        [HttpPost]\n        public ActionResult TestInboundConnection() {\n            Console.WriteLine("--\x3e Inbound POST # Command Service");\n            return Ok("Inbound test of from Platforms Controller");\n        }\n\n        [HttpGet]\n        public ActionResult<IEnumerable<PlatformReadDto>> GetAllPlatforms() {\n            Console.WriteLine("--\x3e Platforms-data from CommandsService was requested");\n            var platformItems = _repository.GetAllPlatforms();\n            return Ok(_mapper.Map<IEnumerable<PlatformReadDto>>(platformItems));\n        }\n    }\n}\n')))}s.isMDXComponent=!0}}]);