"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[2346],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,d=c["".concat(p,".").concat(m)]||c[m]||h[m]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7236:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={},o="Heap - Priority queque in go",l={unversionedId:"go/03examples/heap",id:"go/03examples/heap",title:"Heap - Priority queque in go",description:"basics",source:"@site/docs/go/03examples/heap.md",sourceDirName:"go/03examples",slug:"/go/03examples/heap",permalink:"/md/go/03examples/heap",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/go/03examples/heap.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Syncronizing read/write - mutex in a Game example",permalink:"/md/go/03examples/game"},next:{title:"Reverse Proxy with Login",permalink:"/md/go/03examples/reverseProxy"}},p={},s=[{value:"basics",id:"basics",level:2},{value:"using an array actually (for maxheap)",id:"using-an-array-actually-for-maxheap",level:2},{value:"inserting into our heap (for maxheap)",id:"inserting-into-our-heap-for-maxheap",level:2},{value:"extract keys (for maxheap)",id:"extract-keys-for-maxheap",level:2}],u={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"heap---priority-queque-in-go"},"Heap - Priority queque in go"),(0,a.kt)("h2",{id:"basics"},"basics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"heaps are a basic data structure vs heapsort a sorting algorithm that basically creates a heap once finished ( and thus sorting our input array/list)"),(0,a.kt)("li",{parentName:"ul"},"useful for ex. priority queues, selection algorithms and graph algorithms ..."),(0,a.kt)("li",{parentName:"ul"},"can be thought of as a binary tree, all but the lowest levels full and last row fills from left to right. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Max heap"),' largest key on top -> quickly able to "pop" that element'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Min Heap")," as expected smallest is on the root. "),(0,a.kt)("li",{parentName:"ul"},"insert and extract from the heap are really heap: O(log n)")),(0,a.kt)("h2",{id:"using-an-array-actually-for-maxheap"},"using an array actually (for maxheap)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"instead of going building an actual binary-tree we can just store our heap in an array.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"a[0]")," -> root, ",(0,a.kt)("inlineCode",{parentName:"li"},"a[1-2]")," -> one Level lower, ",(0,a.kt)("inlineCode",{parentName:"li"},"a[3-6]")," -> one level lower again, ",(0,a.kt)("inlineCode",{parentName:"li"},"a[7-14]")," etc..."),(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("strong",{parentName:"li"},"left node"),"  of any point is: ",(0,a.kt)("inlineCode",{parentName:"li"},"(2*index +1)")),(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("strong",{parentName:"li"},"right node")," of any point is: ",(0,a.kt)("inlineCode",{parentName:"li"},"(2*index +2)"))))),(0,a.kt)("h2",{id:"inserting-into-our-heap-for-maxheap"},"inserting into our heap (for maxheap)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"element gets inserted into as last place."),(0,a.kt)("li",{parentName:"ul"},"if bigger than its parent-node we swap em."),(0,a.kt)("li",{parentName:"ul"},"rinse and repeat till done. (till that element doesnt swap up or reached top)")),(0,a.kt)("h2",{id:"extract-keys-for-maxheap"},"extract keys (for maxheap)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"we get the root, our target biggest value and extract it"),(0,a.kt)("li",{parentName:"ul"},"afterwards we put the LAST (lowest row, last element) node on the empty top"),(0,a.kt)("li",{parentName:"ul"},"now we compare the next row, if bigger node is bigger than our inserted Element we swap."),(0,a.kt)("li",{parentName:"ul"},"rinse and repeat going down for that new element.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'\n// our processes we want to queue (bigger prio -> do first)\ntype Process struct{\n    prio int\n}\n\n// our heap structure (max heap in this case)\ntype Heap struct{\n    arr []Process\n}\n\n\n// public function to add a element to the heap\nfunc (h *Heap) Insert(proc Process){\n    h.arr =  append(h.arr, proc)\n    h.heapifyUp(len(h.arr)-1)\n}\n// bring heap back into heap-state after a Input()\n// does so by swapping with parent till uptop or not bigger anymore\nfunc (h *Heap)heapifyUp(idx int){\n    for h.arr[idx].prio > h.arr[parent(idx)].prio {         // while( node>parent )\n        h.swap(parent(idx), idx)\n        idx = parent(idx)\n    }\n}\n\n\n// public function to "pop()" the largest/root node\nfunc (h *Heap) Extract() (Process, error) {\n    length := len(h.arr) -1\n    if length < 0 {\n        return Process{}, fmt.Errorf("Heap is Empty, can not remove anything")\n    }\n    popElement := h.arr[0]\n    h.arr[0] = h.arr[length]    // swap last element to first\n    h.arr = h.arr[:length]      // remove last slice element (but does not reallocate in go if i understand correctly)\n\n    h.heapifyDown(0)            // start our sort-shuffle from index 0\n    return popElement, nil\n}\n// bring heap back into heap-state after a Extract()\n// does so by potentially swapping with bigger child, moving down till bottom/no more swap\nfunc (h *Heap)heapifyDown(idx int){\n    current := idx\n    last    := len(h.arr)-1\n    l, r    := left(idx), right(idx)\n    for l <= last {\n        if l == last {\n            current = l\n        } else if h.arr[l].prio > h.arr[r].prio{\n            current = l\n        } else {\n            current = r\n        }\n        if h.arr[idx].prio < h.arr[current].prio{\n            h.swap(idx, current)\n            idx = current\n            l, r = left(idx) , right(idx)\n        } else { return }\n    }\n}\n\n\n/*\n*   helpers\n*/\n\n// returns the equivalent parent/left/right node of our "thought off binary-tree"\nfunc parent(idx int) int {\n    return (idx -1) / 2\n}\n\nfunc left(idx int) int {\n    return 2*idx +1\n}\n\nfunc right(idx int) int {\n    return 2*idx +2\n}\n\nfunc (h *Heap)swap(i1 int, i2 int){\n    h.arr[i1], h.arr[i2] = h.arr[i2], h.arr[i1]\n}\n')))}c.isMDXComponent=!0}}]);