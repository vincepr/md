"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[9727],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),g=o,d=u["".concat(i,".").concat(g)]||u[g]||m[g]||l;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,a=new Array(l);a[0]=g;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<l;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4328:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const l={},a="Websockets in go",s={unversionedId:"go/03examples/websocket",id:"go/03examples/websocket",title:"Websockets in go",description:"- using the std lib extension for websockets: golang.org/x/net/websocket",source:"@site/docs/go/03examples/websocket.md",sourceDirName:"go/03examples",slug:"/go/03examples/websocket",permalink:"/md/go/03examples/websocket",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/go/03examples/websocket.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Timeout - Context package",permalink:"/md/go/03examples/timeoutFetch"},next:{title:"Gotchas",permalink:"/md/go/04gotchas"}},i={},c=[{value:"Server",id:"server",level:2},{value:"Client",id:"client",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"websockets-in-go"},"Websockets in go"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"using the std lib extension for websockets: ",(0,o.kt)("inlineCode",{parentName:"li"},"golang.org/x/net/websocket")),(0,o.kt)("li",{parentName:"ul"},"the mux/websocket library is archived, so no clear best library currently found, so the default one is probably worth a shot till that one is not good enough for the project.")),(0,o.kt)("h2",{id:"server"},"Server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "log"\n    "net/http"\n\n    "golang.org/x/net/websocket"\n)\n\nfunc Echo(ws *websocket.Conn) {\n    var err error\n    for {\n        var reply string\n        if err = websocket.Message.Receive(ws, &reply); err != nil{\n            log.Println("WS-Error Receive() :", err)\n            break\n        }\n        fmt.Println("Incoming -> " + reply)\n\n        msg := "Answer back for client" + reply +" have fun !"\n        fmt.Println("Sending -> ", msg)\n\n        if err = websocket.Message.Send(ws, msg); err != nil{\n            log.Println("WS-Error Send()", err)\n            break\n        }\n    }\n}\n\nfunc main() {\n    filePath := "./public/"\n    listenPort := ":"+"5555"\n    fmt.Println("Serving on", listenPort)\n    mux := http.NewServeMux()\n    mux.Handle("/", http.FileServer(http.Dir(filePath)))\n    mux.Handle("/ws", websocket.Handler(Echo))\n    if err := http.ListenAndServe(listenPort, mux); err != nil{\n        log.Fatal("unable to serve: ", listenPort, err)\n    }\n}\n')),(0,o.kt)("h2",{id:"client"},"Client"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"./public/index.html"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Websocket-Test</title>\n</head>\n<body>\n    <script defer type="text/javascript" src="./client.js"><\/script> \n</body>\n    <h3> Websocket Echo Test</h3>\n    <form>\n        <p>\n            Message: <input id="message" type="test" value="send a msg...">\n        </p>\n    </form>\n    <button onclick="send();">Send Message</button>\n</html>\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"./public/client.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'var url = "ws://vprobst.de:5555/ws"\nws = new WebSocket(url);\n\n// gets triggered after connection gets accepted by the server\nws.onopen = () => {\n    console.log("connected to: "+ url);\n}\n\n// gets triggered after the connection has closed\nws.onclose = (ev) => {\n    console.log("connection close with: " + ev.code);\n}\n\n// gets triggered after receiving a message von the server\nws.onmessage = (ev) => {\n    console.log("message received: " + ev.data);\n}\n\n// gets triggered on errors\nws.onerror = (ev) => {\n    console.log("error with the websocket: "+ ev)\n}\n\n// onclick callback to send data to our server\nfunction send() {\n    var msg = document.getElementById("message").value;\n    ws.send(msg);\n}\n')))}u.isMDXComponent=!0}}]);