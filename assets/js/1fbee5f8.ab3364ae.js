"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[2770],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),g=l,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||i;return t?a.createElement(d,r(r({ref:n},p),{},{components:t})):a.createElement(d,r({ref:n},p))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:l,r[1]=o;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3257:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(7462),l=(t(7294),t(3905));const i={},r="Delegates in Csharp",o={unversionedId:"csharp/examples/Delegate",id:"csharp/examples/Delegate",title:"Delegates in Csharp",description:"- functions as values",source:"@site/docs/csharp/examples/Delegate.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/Delegate",permalink:"/md/csharp/examples/Delegate",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/Delegate.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deconstruction in Csharp",permalink:"/md/csharp/examples/Deconstruction"},next:{title:"Writing EntityFramework Linq-Queries",permalink:"/md/csharp/examples/EFLinqQueries"}},s={},c=[{value:"Special Delegates Func and Action",id:"special-delegates-func-and-action",level:2},{value:"Action",id:"action",level:3},{value:"Func",id:"func",level:3},{value:"Example",id:"example",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"delegates-in-csharp"},"Delegates in Csharp"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"functions as values"),(0,l.kt)("li",{parentName:"ul"},"Reusability of code becomes really easy.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'// a bit like an Interface for functions, we first declare the shape (here void with no params)\npublic delegate void MoveAction();\n\n// then we have Functions that can implement (have same signature) than our delegate\npublic void MoveUp() => "Moving upwards".Dump();\npublic void MoveDown() => "Moving upwards".Dump();\npublic void MoveLeft() => "Moving Leftw".Dump();\npublic void MoveRight() => "Moving Right".Dump();\n\n\n// a queue of moves, executed on the next frame or something like that:\npublic void ChainMovements(MoveAction[] moves) {\n    foreach(MoveAction move in moves){\n        if (move is not null) move();   // we can just call it like this \n    }\n    // move.Invoke() // this is just legacy syntax. sames as move() above.\n}\n\npublic static void main(string[] args) {\n    MoveAction[] moves = {MoveUp, MoveDown, MoveUp, MoveLeft, MoveLeft};\n    ChainMovements(moves);\n\n    // we can also create an instance like this:\n    var doMoveUp = new MoveAction(MoveUp);\n    doMoveUp();\n    // - its basically an object wrapping nothing but the function\n\n}\n')),(0,l.kt)("h2",{id:"special-delegates-func-and-action"},"Special Delegates Func and Action"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Again a generic Delegate."),(0,l.kt)("li",{parentName:"ul"},"Has void as return type.")),(0,l.kt)("h3",{id:"action"},"Action"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"Action<int> printNumber = n => n.Dump();\n\n// and here with a tuple\nAction<string, int> printAdress = (adr, nr) => Console.Writeline(addr+nr);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Makes it clearer that our delegate action is void.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"in the above example we could have used just ",(0,l.kt)("inlineCode",{parentName:"li"},"ChainMovements(Action[] moves)")),(0,l.kt)("li",{parentName:"ul"},"this way it is not neccessary to look up exactly what MoveAction's signature is etc...")))),(0,l.kt)("h3",{id:"func"},"Func"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Basically a func is just a generic Delegate."),(0,l.kt)("li",{parentName:"ul"},"Func has a Return type.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},"System.Func<int, int, int> add (int x, int y) => x + y;\nadd(1,100).Dump();  // Prints 101\n")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csharp"},'# Delegates in Csharp\n- Can reference both static methods and instance methods\n## Basic Examples\n\n```csharp\nnamespace Delegates1;\n\ninternal class Program {\n    // We describe our Logger-Delegate \'blueprint\', a bit like an interface\n    public delegate void LogDel(string text);\n    \n    public static void Main(string[] args) {\n        Example1();\n        Example2();\n        Example3();\n        Example4();\n    }\n\n    public static void Example1() {\n        LogDel logDel = new LogDel(TextToScreen);\n        logDel("Hello World.");\n        logDel.Invoke("Same as line above, in this case.");\n    }\n\n    public static void Example2() {\n        Logger logger = new Logger();\n        LogDel logDel = new LogDel(logger.TextToFile);\n        logDel("Hello World.");\n        logDel.Invoke("Same as line above, in this case.");\n    }\n\n    public static void Example3() {\n        // muticasting combines multiple delegates\n        LogDel logDelScreen = new LogDel(TextToScreen);\n        Logger logger = new Logger();\n        LogDel logDelFile = new LogDel(logger.TextToFile);\n        LogDel multiLogDel = logDelScreen + logDelFile;\n        // we can now call both TextToScreen and TextToFile in one call.\n        multiLogDel("We log it all.");\n    }\n    \n    public static void Example4() {\n        LogDel logDel = new LogDel(TextToScreen);\n        Wrapper(logDel, "We pass in a delegate at runtime. A bit like dependency injection");\n    }\n    \n    // passing an delegate at runtime:\n    public static void Wrapper(LogDel logDel, string txt) {\n        logDel(txt);\n    }\n    \n    // static reference used by our delegate\n    static void TextToScreen(string text) {\n        Console.WriteLine($"{DateTime.Now.ToString()}: {text}");\n    }\n    \n    // instanced methods (also work with delegates)\n    public class Logger {\n         public void TextToFile(string text) {\n            using (StreamWriter sw = new StreamWriter(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Log.txt"),\n                       true))\n                sw.WriteLine($"{DateTime.Now.ToString()}: {text}");\n        }\n    }\n}\n')))}u.isMDXComponent=!0}}]);