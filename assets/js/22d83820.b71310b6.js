"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[1194],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>b});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),m=i,b=p["".concat(l,".").concat(m)]||p[m]||g[m]||a;return r?t.createElement(b,o(o({ref:n},c),{},{components:r})):t.createElement(b,o({ref:n},c))}));function b(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4371:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var t=r(7462),i=(r(7294),r(3905));const a={},o="Beispiel Vererbung",s={unversionedId:"fiae/Programmierung/CSharp/examples/BeispielVererbung",id:"fiae/Programmierung/CSharp/examples/BeispielVererbung",title:"Beispiel Vererbung",description:"Alt text",source:"@site/docs/fiae/Programmierung/CSharp/examples/BeispielVererbung.md",sourceDirName:"fiae/Programmierung/CSharp/examples",slug:"/fiae/Programmierung/CSharp/examples/BeispielVererbung",permalink:"/md/fiae/Programmierung/CSharp/examples/BeispielVererbung",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/fiae/Programmierung/CSharp/examples/BeispielVererbung.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Beispiel Tabelle in C`#`",permalink:"/md/fiae/Programmierung/CSharp/examples/BeispielHotel"},next:{title:"Abstract Class - Interface",permalink:"/md/fiae/Programmierung/CSharp/examples/abstractC_interface"}},l={},u=[],c={toc:u};function p(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"beispiel-vererbung"},"Beispiel Vererbung"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Alt text",src:r(5412).Z,width:"980",height:"1134"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'internal class Produkt {\n    public string Bezeichnung { get; set; }\n    public double Preis{ get; set; }\n    public uint Menge { get; set; }\n    public double Warenwert => Preis * Menge;\n    public Produkt(string bezeichnung, double preis, uint menge) {\n        Bezeichnung = bezeichnung;\n        Preis = preis;\n        Menge = menge;\n    }\n    public override String ToString() => \n        Bezeichnung + " " + Preis + "Euro x " + Menge + "Stueck => " + Warenwert +"Euro";\n    public virtual bool Verkaufen(uint anzahl) {\n        if (Menge >= anzahl) {\n            Menge -= anzahl;\n            return true;\n        }\n        return false;\n    }\n}\n\ninternal class Technik : Produkt {\n    public string EEK { get; set; }\n    // die Unterklasse Technik ruft den Konstruktor der Oberklasse mit base() auf\n    public Technik(string bezeichnung, double preis, uint menge, string eek) : base(bezeichnung, preis, menge) {\n        EEK = eek;\n    }\n    public override string ToString() => base.ToString() + " EEK:" + EEK;\n}\n\ninternal class Nahrung : Produkt {\n    public DateTime MHD { get; set; }   // Verbleibendes Mindest-Haltbarkeits-Datum in Tagen\n    public Nahrung(string bezeichnung, double preis, uint menge, DateTime mhd) : base(bezeichnung, preis, menge) {\n        MHD = mhd;\n    }\n    public override bool Verkaufen(uint anzahl) {\n        TimeSpan days_left = MHD - DateTime.Today;\n        if (days_left.Days <= 3) return false;\n        return base.Verkaufen(anzahl);\n    }\n    public override string ToString() => base.ToString() + " MHD:" + MHD.ToShortDateString();\n}\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        TestingProducts();\n\n        Produkt[] tabelle = new Produkt[4];\n        tabelle[0] = new Nahrung("Schinken", 3.99, 7, new DateTime(2023, 5, 10));\n        tabelle[1] = new Technik("K\xfchlschrank", 199.99, 10, "AAA");\n        tabelle[2] = new Nahrung("Jogurt", 1.99, 15, DateTime.Parse("13.5.23"));\n        tabelle[3] = new Technik("Lampe", 24.99, 22, "B");\n\n        foreach (Produkt p in tabelle){\n            Console.WriteLine(p);\n            Console.WriteLine("p.GetType() => \\t" + p.GetType());\n            if (p is Nahrung){\n                Nahrung cast = p as Nahrung;\n                Console.WriteLine("MHD reachable with cast: " + cast.MHD);\n            }\n            if (p is Technik)\n            {\n                Technik cast = p as Technik;\n                Console.WriteLine("EEK reachable with cast: " + cast.EEK);\n            }\n            Console.WriteLine();\n        }\n    }\n\n    static void TestingProducts() {\n        Console.WriteLine("\\n***************----***************");\n        Console.WriteLine("***************----***************");\n        Produkt p1 = new Produkt("Default", 3.29, 50);\n        Console.WriteLine("\\n" + p1);\n        Console.WriteLine("Verkauf erfolgreich: " + p1.Verkaufen(50));\n        Console.WriteLine(p1 + "\\n\\n");\n\n        Technik t1 = new Technik("K\xfchlschrank", 199.99, 10, "AAA");\n        Console.WriteLine(t1);\n        Console.WriteLine("Verkauf erfolgreich: " + t1.Verkaufen(2));\n        Console.WriteLine(t1 + "\\n\\n");\n\n        Nahrung n1 = new Nahrung("Schinken", 3.99, 7, new DateTime(2023, 5, 10));\n        Console.WriteLine(n1);\n        Console.WriteLine("Verkauf erfolgreich: " + n1.Verkaufen(2));\n        Console.WriteLine(n1 + "\\n\\n");\n\n        Nahrung n2 = new Nahrung("Jogurt", 1.99, 15, DateTime.Parse("13.5.23"));\n        Console.WriteLine(n2);\n        Console.WriteLine("Verkauf erfolgreich: " + n2.Verkaufen(2));\n        Console.WriteLine(n2 + "\\n\\n");\n\n        // Typ eines Objekts ist der verwendete Konstruktor:\n        Console.WriteLine("n2 is Nahrung: " + (n2 is Nahrung));    // -> true\n        Console.WriteLine("n2 is Technik: " + (n2 is Technik));    // -> false\n        Console.WriteLine("n2 is Produkt: " + (n2 is Produkt));    // -> true\n\n        // typeof operator\n        Console.WriteLine("typeof: " + (n2.GetType() == typeof(Nahrung))); // -> true\n\n        // Durch casten gehen keine in formationen verloren.\n        var cast1 = (Produkt)n2;\n        Console.WriteLine(cast1);\n        var cast2 = (Nahrung)cast1;\n        Console.WriteLine(cast2);\n\n        PrintTypes();\n        // wenn casting fehlschl\xe4gt  => null !\n\n        Console.WriteLine("\\n***************----***************");\n        Console.WriteLine("***************----***************\\n\\n");\n\n    }\n\n    static void PrintTypes() {\n        Produkt p = new Nahrung("Schinken", 3.99, 7, new DateTime(2023, 5, 10));\n        Console.WriteLine(p.GetType() == typeof(Nahrung)); // false \n        Console.WriteLine(p is Produkt);                   // true \n        Console.WriteLine(p.GetType() == typeof(Nahrung));    // true\n        Console.WriteLine(p is Nahrung);                      // true \n    }\n}\n')))}p.isMDXComponent=!0},5412:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/Beispiel_Vererbung-a4fb1089493355173bfd6ab58b7f88ce.png"}}]);