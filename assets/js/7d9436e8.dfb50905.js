"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[2623],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return t?a.createElement(g,l(l({ref:n},u),{},{components:t})):a.createElement(g,l({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3189:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={},l="Feature Flag in Csharp",o={unversionedId:"csharp/examples/FeatureFlag",id:"csharp/examples/FeatureFlag",title:"Feature Flag in Csharp",description:"This provides a way to toggle Features without re-compiling or even restarting the service.",source:"@site/docs/csharp/examples/FeatureFlag.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/FeatureFlag",permalink:"/md/csharp/examples/FeatureFlag",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/FeatureFlag.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EntityFramework - best practices",permalink:"/md/csharp/examples/EntityFramework"},next:{title:"Generics in csharp",permalink:"/md/csharp/examples/Generics"}},s={},p=[{value:"Add the package",id:"add-the-package",level:2},{value:"The base min-api-template:",id:"the-base-min-api-template",level:2},{value:"More Examples",id:"more-examples",level:3},{value:"Example for MVC Controllers",id:"example-for-mvc-controllers",level:3},{value:"Endpoint Filter Example",id:"endpoint-filter-example",level:3},{value:"More Advanced Filtering techniques",id:"more-advanced-filtering-techniques",level:2},{value:"Canary with a Percantagefilter",id:"canary-with-a-percantagefilter",level:3},{value:"TargetingFilter",id:"targetingfilter",level:3},{value:"TimeWindowFilter",id:"timewindowfilter",level:3}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"feature-flag-in-csharp"},"Feature Flag in Csharp"),(0,r.kt)("p",null,"This provides a way to toggle Features without re-compiling or even ",(0,r.kt)("strong",{parentName:"p"},"restarting")," the service."),(0,r.kt)("h2",{id:"add-the-package"},"Add the package"),(0,r.kt)("p",null,"Install ",(0,r.kt)("inlineCode",{parentName:"p"},"Microsoft.FeatureManagement.AspNetCore")),(0,r.kt)("h2",{id:"the-base-min-api-template"},"The base min-api-template:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'using Microsoft.FeatureManagement;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\n// inject our FeatureManager\nbuilder.Services.AddFeatureManagement();\n\nvar app = builder.Build();\nif (app.Environment.IsDevelopment()) {\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\napp.UseHttpsRedirection();\nvar summaries = new[] {\n    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"\n};\n\n// we pass the injected featureManager to the handler:\napp.MapGet("/weatherforecast", async (IFeatureManager featureManager) =>\n    {\n        // first we check for the current state of our flag:\n        var isFlag10Weathers = await featureManager.IsEnabledAsync(FeatureFlags.TenWeathers);\n        \n        // if isFlag we return 10 weathers, otherwise the default 5\n        var forecast = Enumerable.Range(1, isFlag10Weathers ? 10 : 5).Select(index =>\n                new WeatherForecast\n                (\n                    DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n                    Random.Shared.Next(-20, 55),\n                    summaries[Random.Shared.Next(summaries.Length)]\n                ))\n            .ToArray();\n        return forecast;\n    })\n    .WithName("GetWeatherForecast")\n    .WithOpenApi();\n\napp.Run();\ninternal record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary) {\n    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n}\n\n// we could pass plain strings into .IsEnabledAsync("TenWeathers")\n// - but cleaner to have them all in one Class:\npublic class FeatureFlags {\n    public const string TenWeathers = "Tenweathers";\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"appsettings.json"))),(0,r.kt)("p",null,"The default configuration provider is ",(0,r.kt)("inlineCode",{parentName:"p"},"appsettings.json"),". We just add the current value for the flag: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "FeatureManagement": {\n    "TenWeathers": false\n  },\n  "Logging": {\n    "LogLevel": {\n      "Default": "Information",\n      "Microsoft.AspNetCore": "Warning"\n    }\n  },\n  "AllowedHosts": "*"\n}\n')),(0,r.kt)("h3",{id:"more-examples"},"More Examples"),(0,r.kt)("p",null,"We can toggle certain middleware with those 2 methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"app.UseForFeature()")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"app.UseMiddleWareForFeature<>"))),(0,r.kt)("p",null,"Minimal Apis can also use toggleable EndpointFilters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"")),(0,r.kt)("h3",{id:"example-for-mvc-controllers"},"Example for MVC Controllers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'// you can toggle Existence of whole Controllers\n[FeatureGate("isThisControllerActive")]\n[ApiController]\npublic class ExampleController: ControllerBase\n{\n    // but also for single Actions\n    [FeatureGate("isThisActionActive")]\n    public IActionResult Action()\n    {\n        return Ok();\n    }\n}\n')),(0,r.kt)("h3",{id:"endpoint-filter-example"},"Endpoint Filter Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FeatureFlagEndpointFilters.cs"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'using Microsoft.FeatureManagement;\n\nnamespace minApiFeatureFlags;\n\n// Extension to make registration of Filters easier:\npublic static class FeatureFlagEndpointFilterExtensions\n{\n    public static TBuilder WithFeatureFlag<TBuilder>(\n        this TBuilder builder, string endpointName) \n        where TBuilder : IEndpointConventionBuilder\n    {\n        builder.AddEndpointFilter(new FeatureFlagEndpointFilters(endpointName));\n        return builder;\n    }\n}\n\n// Container for all our EndpointFilters:\npublic class FeatureFlagEndpointFilters : IEndpointFilter\n{\n    // to differentiate between endpoint-filters we pass down a identifier string:\n    private readonly string _endpointName;\n\n    public FeatureFlagEndpointFilters(string endpointName)\n    {\n        _endpointName = endpointName;\n    }\n\n    // if Flags are set we will pass context down the Pipeline\n    // otherwise we return a generic 404\n    public async ValueTask<object?> InvokeAsync(\n        EndpointFilterInvocationContext context, \n        EndpointFilterDelegate next)\n    {\n\n        var featureManager = context.HttpContext\n            .RequestServices.GetRequiredService<IFeatureManager>();\n        \n        var isEnabled = await featureManager\n            .IsEnabledAsync($"Endpoints_{_endpointName}");\n\n        if (!isEnabled)\n        {\n            return Results.NotFound();\n        }\n\n        return await next(context);\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"we create a new endpoint we want to hide with our filter implementation:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'app.MapGet("/weatherforecastslim", (IFeatureManager featureManager) =>\n    {\n        return  Enumerable.Range(1, 5).Select(index =>\n                new WeatherForecastSlim\n                (\n                    DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n                    Random.Shared.Next(-20, 55)\n                ))\n            .ToArray();\n    })\n    .WithFeatureFlag("GetWeatherForecastSlim")\n    .WithName("GetWeatherForecastSlim")\n    .WithOpenApi();\n\ninternal record WeatherForecastSlim(DateOnly Date, int TemperatureC) {\n    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"and now we can toggle the flag in our appsettings:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'  "FeatureManagement": {\n    "Endpoints_GetWeatherForecastSlim": false\n  },\n')),(0,r.kt)("h2",{id:"more-advanced-filtering-techniques"},"More Advanced Filtering techniques"),(0,r.kt)("h3",{id:"canary-with-a-percantagefilter"},"Canary with a Percantagefilter"),(0,r.kt)("p",null,"Canary ish functionality. Immagine we want to test a feature on only a percantage of requests. While monitoring closely if we break something (or if performance improves etc.)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"builder.Services.AddFeatureManagement()\n    .AddFeatureFilter<Percantagefilter>();\n//    .AddSessionManager<>              // for more features\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"now we could specify to only enable the new slim variant for 50% of all requests:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'  "FeatureManagement": {\n    "Endpoints_GetWeatherForecastSlim": {\n        "EnabledFor": [\n            {\n                "Name": "Percantage",\n                "Parameters":{\n                    "Value": 50\n                }\n            }\n        ]\n    }\n  },\n')),(0,r.kt)("h3",{id:"targetingfilter"},"TargetingFilter"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"example only target non subscription users. Or Only users that are in the platform for over 2 years. To access those features.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"builder.Services.AddFeatureManagement().AddFeatureFilter<TargetingFilter>();\n")),(0,r.kt)("h3",{id:"timewindowfilter"},"TimeWindowFilter"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Feature is only available for a limited time period.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"builder.Services.AddFeatureManagement().AddFeatureFilter<TimeWindowFilter>();\n")))}c.isMDXComponent=!0}}]);