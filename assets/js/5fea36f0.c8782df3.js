"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[4838],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>f});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),c=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},u=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?t.createElement(f,l(l({ref:r},u),{},{components:n})):t.createElement(f,l({ref:r},u))}));function f(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1539:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=n(7462),a=(n(7294),n(3905));const o={},l="Records in C",i={unversionedId:"csharp/examples/records",id:"csharp/examples/records",title:"Records in C",description:"- allocated in the Heap (like classes/objects etc.)",source:"@site/docs/csharp/examples/records.md",sourceDirName:"csharp/examples",slug:"/csharp/examples/records",permalink:"/md/csharp/examples/records",draft:!1,editUrl:"https://github.com/vincepr/md/blob/main/docs/csharp/examples/records.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MinimalAPI example project in csharp",permalink:"/md/csharp/examples/minimal_api"},next:{title:"Span and Benchmarking in C",permalink:"/md/csharp/examples/span"}},s={},c=[],u={toc:c};function p(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"records-in-c"},"Records in C#"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"allocated in the Heap (like classes/objects etc.)"),(0,a.kt)("li",{parentName:"ul"},"bunch of quality of life over class/struct")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'using System.Text;\nnamespace tutorials.RecordType;\npublic class Example{\n    public static void Run(){\n        var rob = new Person("Rob Rega", new DateOnly(1940,1,2));\n        var rob2 = new Person("Rob Rega", new DateOnly(1940,1,2));\n\n        var clara = new PersonAsClass{\n            FullName = "Clara Carleson",\n            DateOfBirth = new DateOnly(1940,1,2),\n        };var clara2 = new PersonAsClass{\n            FullName = "Clara Carleson",\n            DateOfBirth = new DateOnly(1940,1,2),\n        };\n\n        // good ToString() by default:\n        Console.WriteLine(rob);     // Person { FullName = Rob Rega, DateOfBirth = 02/01/1940 }\n        Console.WriteLine(clara);   // tutorials.RecordType.PersonAsClass\n\n        // good \'==\' / Equality checking by Properties NOT Reference.\n        Console.WriteLine(rob == rob2);     // True\n        Console.WriteLine(clara == clara2); // False\n\n        // easy to deconstruct the Properties:\n        var (name, dateOfBirth) = rob;\n\n        // Properties are immutable {like init set;}\n        // - we can use \'with\' clone data into NEW records.\n        var older_rob = rob with { DateOfBirth = rob.DateOfBirth.AddYears(1)};\n        Console.WriteLine(older_rob);\n        // -> Person { FullName = Rob Rega, DateOfBirth = 02/01/1941 }\n\n        // and here we override the default Print and \'with\' behavior:\n        var arob = new APerson("Rob Rega", new DateOnly(1940,1,2));\n        var older_arob = arob with {DateOfBirth = rob.DateOfBirth.AddYears(2)};\n        Console.WriteLine(older_arob);\n        // -> APerson { FullName:old-man-Rob RegaDateOfBirth:02/01/1942 }\n    }\n}\n\n  \n// This is the Version with all the boilerplate\npublic record PersonAsRecord{\n    public string FullName { get; init; } = default!;\n    public DateOnly DateOfBirth { get; init; }= default!;\n}\n// functionally the same as the above (but with less boilerplate)\npublic record Person(string FullName, DateOnly DateOfBirth);\n\n// we have to make it a struct explicitly (is a class by default)\npublic record struct PersonAsStruct(string FullName, DateOnly DateOfBirth);\n\n// normal class for comparison\npublic class PersonAsClass{\n    public string FullName { get; init; } = default!;\n    public DateOnly DateOfBirth { get; init; }= default!;\n}\n\n\n// the copying mechanism we can override:\npublic record APerson(string FullName, DateOnly DateOfBirth){\n    // We can override the default \'with\'-behavior:\n    protected APerson(APerson oldPerson){\n        FullName = "old-man-" + oldPerson.FullName;\n        DateOfBirth = oldPerson.DateOfBirth.AddYears(1);\n    }\n\n    // we could also override the Method used for the default Printing:\n    protected virtual bool PrintMembers(StringBuilder builder){\n        builder.Append($"FullName:{FullName}");\n        builder.Append($"DateOfBirth:{DateOfBirth}");\n        return true;\n    }\n\n    // and here the compiler generated ToString() that we could also override:\n    public override string ToString(){\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.Append("APerson");\n        stringBuilder.Append(" { ");\n        if (PrintMembers(stringBuilder))\n            stringBuilder.Append(" ");\n        stringBuilder.Append("}");\n        return stringBuilder.ToString();\n    }\n}\n')),(0,a.kt)("p",null,"Here some more of the basic auto generated implementation:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Basically its just a class with some basic quality-of-life ontop"),(0,a.kt)("li",{parentName:"ul"},"To check what the compiler lowers code down to: ",(0,a.kt)("a",{parentName:"li",href:"https://sharplab.io/"},"https://sharplab.io/"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},"// we could also override the Equality checking\nprotected virtual Type EqualityContract {\n    get{\n        return typeof(APerson);  // this is the one used by default\n    } \n}\n\npublic static override bool operator !=(APerson left, APerson right){\n    return !(left == right);\n}\n\npublic static override bool operator ==(APerson left, APerson right){\n    if ((object)left != right){\n        if ((object)left != null)\n            return left.Equals(right);\n        return false;\n    }\n    return true;\n}\n")))}p.isMDXComponent=!0}}]);